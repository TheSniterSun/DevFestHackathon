{"ast":null,"code":"// https://en.wikipedia.org/wiki/Rhumb_line\nimport { convertLength, degreesToRadians, earthRadius, point } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n/**\n * Returns the destination {@link Point} having travelled the given distance along a Rhumb line from the\n * origin Point with the (varant) given bearing.\n *\n * @name rhumbDestination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the starting point\n * @param {number} bearing varant bearing angle ranging from -180 to 180 degrees from north\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @param {Object} [options.properties={}] translate properties to destination point\n * @returns {Feature<Point>} Destination point.\n * @example\n * var pt = turf.point([-75.343, 39.984], {\"marker-color\": \"F00\"});\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.rhumbDestination(pt, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [pt, destination]\n * destination.properties['marker-color'] = '#00F';\n */\nfunction rhumbDestination(origin, distance, bearing, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var wasNegativeDistance = distance < 0;\n  var distanceInMeters = convertLength(Math.abs(distance), options.units, \"meters\");\n  if (wasNegativeDistance) distanceInMeters = -Math.abs(distanceInMeters);\n  var coords = getCoord(origin);\n  var destination = calculateRhumbDestination(coords, distanceInMeters, bearing);\n  // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n  // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n  destination[0] += destination[0] - coords[0] > 180 ? -360 : coords[0] - destination[0] > 180 ? 360 : 0;\n  return point(destination, options.properties);\n}\n/**\n * Returns the destination point having travelled along a rhumb line from origin point the given\n * distance on the  given bearing.\n * Adapted from Geodesy: http://www.movable-type.co.uk/scripts/latlong.html#rhumblines\n *\n * @private\n * @param   {Array<number>} origin - point\n * @param   {number} distance - Distance travelled, in same units as earth radius (default: metres).\n * @param   {number} bearing - Bearing in degrees from north.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {Array<number>} Destination point.\n */\nfunction calculateRhumbDestination(origin, distance, bearing, radius) {\n  // φ => phi\n  // λ => lambda\n  // ψ => psi\n  // Δ => Delta\n  // δ => delta\n  // θ => theta\n  radius = radius === undefined ? earthRadius : Number(radius);\n  var delta = distance / radius; // angular distance in radians\n  var lambda1 = origin[0] * Math.PI / 180; // to radians, but without normalize to 𝜋\n  var phi1 = degreesToRadians(origin[1]);\n  var theta = degreesToRadians(bearing);\n  var DeltaPhi = delta * Math.cos(theta);\n  var phi2 = phi1 + DeltaPhi;\n  // check for some daft bugger going past the pole, normalise latitude if so\n  if (Math.abs(phi2) > Math.PI / 2) {\n    phi2 = phi2 > 0 ? Math.PI - phi2 : -Math.PI - phi2;\n  }\n  var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));\n  // E-W course becomes ill-conditioned with 0/0\n  var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n  var DeltaLambda = delta * Math.sin(theta) / q;\n  var lambda2 = lambda1 + DeltaLambda;\n  return [(lambda2 * 180 / Math.PI + 540) % 360 - 180, phi2 * 180 / Math.PI]; // normalise to −180..+180°\n}\nexport default rhumbDestination;","map":{"version":3,"names":["convertLength","degreesToRadians","earthRadius","point","getCoord","rhumbDestination","origin","distance","bearing","options","wasNegativeDistance","distanceInMeters","Math","abs","units","coords","destination","calculateRhumbDestination","properties","radius","undefined","Number","delta","lambda1","PI","phi1","theta","DeltaPhi","cos","phi2","DeltaPsi","log","tan","q","DeltaLambda","sin","lambda2"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/rhumb-destination/dist/es/index.js"],"sourcesContent":["// https://en.wikipedia.org/wiki/Rhumb_line\nimport { convertLength, degreesToRadians, earthRadius, point, } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n/**\n * Returns the destination {@link Point} having travelled the given distance along a Rhumb line from the\n * origin Point with the (varant) given bearing.\n *\n * @name rhumbDestination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the starting point\n * @param {number} bearing varant bearing angle ranging from -180 to 180 degrees from north\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @param {Object} [options.properties={}] translate properties to destination point\n * @returns {Feature<Point>} Destination point.\n * @example\n * var pt = turf.point([-75.343, 39.984], {\"marker-color\": \"F00\"});\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.rhumbDestination(pt, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [pt, destination]\n * destination.properties['marker-color'] = '#00F';\n */\nfunction rhumbDestination(origin, distance, bearing, options) {\n    if (options === void 0) { options = {}; }\n    var wasNegativeDistance = distance < 0;\n    var distanceInMeters = convertLength(Math.abs(distance), options.units, \"meters\");\n    if (wasNegativeDistance)\n        distanceInMeters = -Math.abs(distanceInMeters);\n    var coords = getCoord(origin);\n    var destination = calculateRhumbDestination(coords, distanceInMeters, bearing);\n    // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n    // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n    destination[0] +=\n        destination[0] - coords[0] > 180\n            ? -360\n            : coords[0] - destination[0] > 180\n                ? 360\n                : 0;\n    return point(destination, options.properties);\n}\n/**\n * Returns the destination point having travelled along a rhumb line from origin point the given\n * distance on the  given bearing.\n * Adapted from Geodesy: http://www.movable-type.co.uk/scripts/latlong.html#rhumblines\n *\n * @private\n * @param   {Array<number>} origin - point\n * @param   {number} distance - Distance travelled, in same units as earth radius (default: metres).\n * @param   {number} bearing - Bearing in degrees from north.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {Array<number>} Destination point.\n */\nfunction calculateRhumbDestination(origin, distance, bearing, radius) {\n    // φ => phi\n    // λ => lambda\n    // ψ => psi\n    // Δ => Delta\n    // δ => delta\n    // θ => theta\n    radius = radius === undefined ? earthRadius : Number(radius);\n    var delta = distance / radius; // angular distance in radians\n    var lambda1 = (origin[0] * Math.PI) / 180; // to radians, but without normalize to 𝜋\n    var phi1 = degreesToRadians(origin[1]);\n    var theta = degreesToRadians(bearing);\n    var DeltaPhi = delta * Math.cos(theta);\n    var phi2 = phi1 + DeltaPhi;\n    // check for some daft bugger going past the pole, normalise latitude if so\n    if (Math.abs(phi2) > Math.PI / 2) {\n        phi2 = phi2 > 0 ? Math.PI - phi2 : -Math.PI - phi2;\n    }\n    var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));\n    // E-W course becomes ill-conditioned with 0/0\n    var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n    var DeltaLambda = (delta * Math.sin(theta)) / q;\n    var lambda2 = lambda1 + DeltaLambda;\n    return [\n        (((lambda2 * 180) / Math.PI + 540) % 360) - 180,\n        (phi2 * 180) / Math.PI,\n    ]; // normalise to −180..+180°\n}\nexport default rhumbDestination;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}