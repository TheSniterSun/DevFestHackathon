{"ast":null,"code":"import { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians } from \"@turf/helpers\";\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord | Point} from origin point or coordinate\n * @param {Coord | Point} to destination point or coordinate\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(from, to, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var coordinates1 = getCoord(from);\n  var coordinates2 = getCoord(to);\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n  var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n  return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\n}\nexport default distance;","map":{"version":3,"names":["getCoord","radiansToLength","degreesToRadians","distance","from","to","options","coordinates1","coordinates2","dLat","dLon","lat1","lat2","a","Math","pow","sin","cos","atan2","sqrt","units"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/distance/dist/es/index.js"],"sourcesContent":["import { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians, } from \"@turf/helpers\";\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord | Point} from origin point or coordinate\n * @param {Coord | Point} to destination point or coordinate\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(from, to, options) {\n    if (options === void 0) { options = {}; }\n    var coordinates1 = getCoord(from);\n    var coordinates2 = getCoord(to);\n    var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n    var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n    var lat1 = degreesToRadians(coordinates1[1]);\n    var lat2 = degreesToRadians(coordinates2[1]);\n    var a = Math.pow(Math.sin(dLat / 2), 2) +\n        Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n    return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\n}\nexport default distance;\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,eAAe,EAAEC,gBAAgB,QAAS,eAAe;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,IAAI,EAAEC,EAAE,EAAEC,OAAO,EAAE;EACjC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAIC,YAAY,GAAGP,QAAQ,CAACI,IAAI,CAAC;EACjC,IAAII,YAAY,GAAGR,QAAQ,CAACK,EAAE,CAAC;EAC/B,IAAII,IAAI,GAAGP,gBAAgB,CAACM,YAAY,CAAC,CAAC,CAAC,GAAGD,YAAY,CAAC,CAAC,CAAC,CAAC;EAC9D,IAAIG,IAAI,GAAGR,gBAAgB,CAACM,YAAY,CAAC,CAAC,CAAC,GAAGD,YAAY,CAAC,CAAC,CAAC,CAAC;EAC9D,IAAII,IAAI,GAAGT,gBAAgB,CAACK,YAAY,CAAC,CAAC,CAAC,CAAC;EAC5C,IAAIK,IAAI,GAAGV,gBAAgB,CAACM,YAAY,CAAC,CAAC,CAAC,CAAC;EAC5C,IAAIK,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACP,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GACnCK,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACN,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGI,IAAI,CAACG,GAAG,CAACN,IAAI,CAAC,GAAGG,IAAI,CAACG,GAAG,CAACL,IAAI,CAAC;EACrE,OAAOX,eAAe,CAAC,CAAC,GAAGa,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACK,IAAI,CAACN,CAAC,CAAC,EAAEC,IAAI,CAACK,IAAI,CAAC,CAAC,GAAGN,CAAC,CAAC,CAAC,EAAEP,OAAO,CAACc,KAAK,CAAC;AACzF;AACA,eAAejB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}