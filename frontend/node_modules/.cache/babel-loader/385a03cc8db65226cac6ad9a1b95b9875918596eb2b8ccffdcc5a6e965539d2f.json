{"ast":null,"code":"import { isNumber } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n  if (!coord) {\n    throw new Error(\"coord is required\");\n  }\n  if (!Array.isArray(coord)) {\n    if (coord.type === \"Feature\" && coord.geometry !== null && coord.geometry.type === \"Point\") {\n      return coord.geometry.coordinates;\n    }\n    if (coord.type === \"Point\") {\n      return coord.coordinates;\n    }\n  }\n  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {\n    return coord;\n  }\n  throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n  if (Array.isArray(coords)) {\n    return coords;\n  }\n  // Feature\n  if (coords.type === \"Feature\") {\n    if (coords.geometry !== null) {\n      return coords.geometry.coordinates;\n    }\n  } else {\n    // Geometry\n    if (coords.coordinates) {\n      return coords.coordinates;\n    }\n  }\n  throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n  if (coordinates.length > 1 && isNumber(coordinates[0]) && isNumber(coordinates[1])) {\n    return true;\n  }\n  if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n    return containsNumber(coordinates[0]);\n  }\n  throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n  if (!type || !name) {\n    throw new Error(\"type and name required\");\n  }\n  if (!value || value.type !== type) {\n    throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + value.type);\n  }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n  if (!feature) {\n    throw new Error(\"No feature passed\");\n  }\n  if (!name) {\n    throw new Error(\".featureOf() requires a name\");\n  }\n  if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n    throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n  }\n  if (!feature.geometry || feature.geometry.type !== type) {\n    throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type);\n  }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n  if (!featureCollection) {\n    throw new Error(\"No featureCollection passed\");\n  }\n  if (!name) {\n    throw new Error(\".collectionOf() requires a name\");\n  }\n  if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n    throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n  }\n  for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n    var feature = _a[_i];\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n      throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n      throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type);\n    }\n  }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n  if (geojson.type === \"Feature\") {\n    return geojson.geometry;\n  }\n  return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n  if (geojson.type === \"FeatureCollection\") {\n    return \"FeatureCollection\";\n  }\n  if (geojson.type === \"GeometryCollection\") {\n    return \"GeometryCollection\";\n  }\n  if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n    return geojson.geometry.type;\n  }\n  return geojson.type;\n}","map":{"version":3,"names":["isNumber","getCoord","coord","Error","Array","isArray","type","geometry","coordinates","length","getCoords","coords","containsNumber","geojsonType","value","name","featureOf","feature","collectionOf","featureCollection","_i","_a","features","getGeom","geojson","getType","_name"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/invariant/dist/es/index.js"],"sourcesContent":["import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}