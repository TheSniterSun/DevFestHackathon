{"ast":null,"code":"import { slice } from \"./array\";\nimport bisect from \"./bisect\";\nimport constant from \"./constant\";\nimport extent from \"./extent\";\nimport identity from \"./identity\";\nimport range from \"./range\";\nimport { tickStep } from \"./ticks\";\nimport sturges from \"./threshold/sturges\";\nexport default function () {\n  var value = identity,\n    domain = extent,\n    threshold = sturges;\n  function histogram(data) {\n    var i,\n      n = data.length,\n      x,\n      values = new Array(n);\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n    var xz = domain(values),\n      x0 = xz[0],\n      x1 = xz[1],\n      tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n    var bins = new Array(m + 1),\n      bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n    return bins;\n  }\n  histogram.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n  histogram.domain = function (_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n  histogram.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n  return histogram;\n}","map":{"version":3,"names":["slice","bisect","constant","extent","identity","range","tickStep","sturges","value","domain","threshold","histogram","data","i","n","length","x","values","Array","xz","x0","x1","tz","isArray","Math","ceil","m","shift","pop","bins","bin","push","_","arguments","thresholds","call"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/d3-array/src/histogram.js"],"sourcesContent":["import {slice} from \"./array\";\nimport bisect from \"./bisect\";\nimport constant from \"./constant\";\nimport extent from \"./extent\";\nimport identity from \"./identity\";\nimport range from \"./range\";\nimport {tickStep} from \"./ticks\";\nimport sturges from \"./threshold/sturges\";\n\nexport default function() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}