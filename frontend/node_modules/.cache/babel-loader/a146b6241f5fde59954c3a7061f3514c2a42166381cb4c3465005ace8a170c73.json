{"ast":null,"code":"import { feature, featureCollection, point } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport lineSegment from \"@turf/line-segment\";\nimport { featureEach } from \"@turf/meta\";\nimport rbush from \"geojson-rbush\";\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n  var unique = {};\n  var results = [];\n  // First, normalize geometries to features\n  // Then, handle simple 2-vertex segments\n  if (line1.type === \"LineString\") {\n    line1 = feature(line1);\n  }\n  if (line2.type === \"LineString\") {\n    line2 = feature(line2);\n  }\n  if (line1.type === \"Feature\" && line2.type === \"Feature\" && line1.geometry !== null && line2.geometry !== null && line1.geometry.type === \"LineString\" && line2.geometry.type === \"LineString\" && line1.geometry.coordinates.length === 2 && line2.geometry.coordinates.length === 2) {\n    var intersect = intersects(line1, line2);\n    if (intersect) {\n      results.push(intersect);\n    }\n    return featureCollection(results);\n  }\n  // Handles complex GeoJSON Geometries\n  var tree = rbush();\n  tree.load(lineSegment(line2));\n  featureEach(lineSegment(line1), function (segment) {\n    featureEach(tree.search(segment), function (match) {\n      var intersect = intersects(segment, match);\n      if (intersect) {\n        // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n        var key = getCoords(intersect).join(\",\");\n        if (!unique[key]) {\n          unique[key] = true;\n          results.push(intersect);\n        }\n      }\n    });\n  });\n  return featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n  var coords1 = getCoords(line1);\n  var coords2 = getCoords(line2);\n  if (coords1.length !== 2) {\n    throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n  }\n  if (coords2.length !== 2) {\n    throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n  }\n  var x1 = coords1[0][0];\n  var y1 = coords1[0][1];\n  var x2 = coords1[1][0];\n  var y2 = coords1[1][1];\n  var x3 = coords2[0][0];\n  var y3 = coords2[0][1];\n  var x4 = coords2[1][0];\n  var y4 = coords2[1][1];\n  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n  var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n  if (denom === 0) {\n    if (numeA === 0 && numeB === 0) {\n      return null;\n    }\n    return null;\n  }\n  var uA = numeA / denom;\n  var uB = numeB / denom;\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    var x = x1 + uA * (x2 - x1);\n    var y = y1 + uA * (y2 - y1);\n    return point([x, y]);\n  }\n  return null;\n}\nexport default lineIntersect;","map":{"version":3,"names":["feature","featureCollection","point","getCoords","lineSegment","featureEach","rbush","lineIntersect","line1","line2","unique","results","type","geometry","coordinates","length","intersect","intersects","push","tree","load","segment","search","match","key","join","coords1","coords2","Error","x1","y1","x2","y2","x3","y3","x4","y4","denom","numeA","numeB","uA","uB","x","y"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/line-intersect/dist/es/index.js"],"sourcesContent":["import { feature, featureCollection, point, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport lineSegment from \"@turf/line-segment\";\nimport { featureEach } from \"@turf/meta\";\nimport rbush from \"geojson-rbush\";\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n    var unique = {};\n    var results = [];\n    // First, normalize geometries to features\n    // Then, handle simple 2-vertex segments\n    if (line1.type === \"LineString\") {\n        line1 = feature(line1);\n    }\n    if (line2.type === \"LineString\") {\n        line2 = feature(line2);\n    }\n    if (line1.type === \"Feature\" &&\n        line2.type === \"Feature\" &&\n        line1.geometry !== null &&\n        line2.geometry !== null &&\n        line1.geometry.type === \"LineString\" &&\n        line2.geometry.type === \"LineString\" &&\n        line1.geometry.coordinates.length === 2 &&\n        line2.geometry.coordinates.length === 2) {\n        var intersect = intersects(line1, line2);\n        if (intersect) {\n            results.push(intersect);\n        }\n        return featureCollection(results);\n    }\n    // Handles complex GeoJSON Geometries\n    var tree = rbush();\n    tree.load(lineSegment(line2));\n    featureEach(lineSegment(line1), function (segment) {\n        featureEach(tree.search(segment), function (match) {\n            var intersect = intersects(segment, match);\n            if (intersect) {\n                // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n                var key = getCoords(intersect).join(\",\");\n                if (!unique[key]) {\n                    unique[key] = true;\n                    results.push(intersect);\n                }\n            }\n        });\n    });\n    return featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n    var coords1 = getCoords(line1);\n    var coords2 = getCoords(line2);\n    if (coords1.length !== 2) {\n        throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n    }\n    if (coords2.length !== 2) {\n        throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n    }\n    var x1 = coords1[0][0];\n    var y1 = coords1[0][1];\n    var x2 = coords1[1][0];\n    var y2 = coords1[1][1];\n    var x3 = coords2[0][0];\n    var y3 = coords2[0][1];\n    var x4 = coords2[1][0];\n    var y4 = coords2[1][1];\n    var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n    var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n    var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0) {\n            return null;\n        }\n        return null;\n    }\n    var uA = numeA / denom;\n    var uB = numeB / denom;\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n        var x = x1 + uA * (x2 - x1);\n        var y = y1 + uA * (y2 - y1);\n        return point([x, y]);\n    }\n    return null;\n}\nexport default lineIntersect;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}