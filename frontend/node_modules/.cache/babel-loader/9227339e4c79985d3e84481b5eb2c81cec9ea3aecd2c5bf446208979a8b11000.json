{"ast":null,"code":"// http://en.wikipedia.org/wiki/Delaunay_triangulation\n// https://github.com/ironwallaby/delaunay\nimport { featureCollection, polygon } from \"@turf/helpers\";\n/**\n * Takes a set of {@link Point|points} and creates a\n * [Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),\n * or a TIN for short, returned as a collection of Polygons. These are often used\n * for developing elevation contour maps or stepped heat visualizations.\n *\n * If an optional z-value property is provided then it is added as properties called `a`, `b`,\n * and `c` representing its value at each of the points that represent the corners of the\n * triangle.\n *\n * @name tin\n * @param {FeatureCollection<Point>} points input points\n * @param {String} [z] name of the property from which to pull z values\n * This is optional: if not given, then there will be no extra data added to the derived triangles.\n * @returns {FeatureCollection<Polygon>} TIN output\n * @example\n * // generate some random point data\n * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n *\n * // add a random property to each point between 0 and 9\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = ~~(Math.random() * 9);\n * }\n * var tin = turf.tin(points, 'z');\n *\n * //addToMap\n * var addToMap = [tin, points]\n * for (var i = 0; i < tin.features.length; i++) {\n *   var properties  = tin.features[i].properties;\n *   properties.fill = '#' + properties.a + properties.b + properties.c;\n * }\n */\nexport default function tin(points, z) {\n  // break down points\n  var isPointZ = false;\n  return featureCollection(triangulate(points.features.map(function (p) {\n    var point = {\n      x: p.geometry.coordinates[0],\n      y: p.geometry.coordinates[1]\n    };\n    if (z) {\n      point.z = p.properties[z];\n    } else if (p.geometry.coordinates.length === 3) {\n      isPointZ = true;\n      point.z = p.geometry.coordinates[2];\n    }\n    return point;\n  })).map(function (triangle) {\n    var a = [triangle.a.x, triangle.a.y];\n    var b = [triangle.b.x, triangle.b.y];\n    var c = [triangle.c.x, triangle.c.y];\n    var properties = {};\n    // Add z coordinates to triangle points if user passed\n    // them in that way otherwise add it as a property.\n    if (isPointZ) {\n      a.push(triangle.a.z);\n      b.push(triangle.b.z);\n      c.push(triangle.c.z);\n    } else {\n      properties = {\n        a: triangle.a.z,\n        b: triangle.b.z,\n        c: triangle.c.z\n      };\n    }\n    return polygon([[a, b, c, a]], properties);\n  }));\n}\nvar Triangle = /** @class */function () {\n  function Triangle(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    var A = b.x - a.x;\n    var B = b.y - a.y;\n    var C = c.x - a.x;\n    var D = c.y - a.y;\n    var E = A * (a.x + b.x) + B * (a.y + b.y);\n    var F = C * (a.x + c.x) + D * (a.y + c.y);\n    var G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n    var dx;\n    var dy;\n    // If the points of the triangle are collinear, then just find the\n    // extremes and use the midpoint as the center of the circumcircle.\n    this.x = (D * E - B * F) / G;\n    this.y = (A * F - C * E) / G;\n    dx = this.x - a.x;\n    dy = this.y - a.y;\n    this.r = dx * dx + dy * dy;\n  }\n  return Triangle;\n}();\nfunction byX(a, b) {\n  return b.x - a.x;\n}\nfunction dedup(edges) {\n  var j = edges.length;\n  var a;\n  var b;\n  var i;\n  var m;\n  var n;\n  outer: while (j) {\n    b = edges[--j];\n    a = edges[--j];\n    i = j;\n    while (i) {\n      n = edges[--i];\n      m = edges[--i];\n      if (a === m && b === n || a === n && b === m) {\n        edges.splice(j, 2);\n        edges.splice(i, 2);\n        j -= 2;\n        continue outer;\n      }\n    }\n  }\n}\nfunction triangulate(vertices) {\n  // Bail if there aren't enough vertices to form any triangles.\n  if (vertices.length < 3) {\n    return [];\n  }\n  // Ensure the vertex array is in order of descending X coordinate\n  // (which is needed to ensure a subquadratic runtime), and then find\n  // the bounding box around the points.\n  vertices.sort(byX);\n  var i = vertices.length - 1;\n  var xmin = vertices[i].x;\n  var xmax = vertices[0].x;\n  var ymin = vertices[i].y;\n  var ymax = ymin;\n  var epsilon = 1e-12;\n  var a;\n  var b;\n  var c;\n  var A;\n  var B;\n  var G;\n  while (i--) {\n    if (vertices[i].y < ymin) {\n      ymin = vertices[i].y;\n    }\n    if (vertices[i].y > ymax) {\n      ymax = vertices[i].y;\n    }\n  }\n  // Find a supertriangle, which is a triangle that surrounds all the\n  // vertices. This is used like something of a sentinel value to remove\n  // cases in the main algorithm, and is removed before we return any\n  // results.\n  // Once found, put it in the \"open\" list. (The \"open\" list is for\n  // triangles who may still need to be considered; the \"closed\" list is\n  // for triangles which do not.)\n  var dx = xmax - xmin;\n  var dy = ymax - ymin;\n  var dmax = dx > dy ? dx : dy;\n  var xmid = (xmax + xmin) * 0.5;\n  var ymid = (ymax + ymin) * 0.5;\n  var open = [new Triangle({\n    __sentinel: true,\n    x: xmid - 20 * dmax,\n    y: ymid - dmax\n  }, {\n    __sentinel: true,\n    x: xmid,\n    y: ymid + 20 * dmax\n  }, {\n    __sentinel: true,\n    x: xmid + 20 * dmax,\n    y: ymid - dmax\n  })];\n  var closed = [];\n  var edges = [];\n  var j;\n  // Incrementally add each vertex to the mesh.\n  i = vertices.length;\n  while (i--) {\n    // For each open triangle, check to see if the current point is\n    // inside it's circumcircle. If it is, remove the triangle and add\n    // it's edges to an edge list.\n    edges.length = 0;\n    j = open.length;\n    while (j--) {\n      // If this point is to the right of this triangle's circumcircle,\n      // then this triangle should never get checked again. Remove it\n      // from the open list, add it to the closed list, and skip.\n      dx = vertices[i].x - open[j].x;\n      if (dx > 0 && dx * dx > open[j].r) {\n        closed.push(open[j]);\n        open.splice(j, 1);\n        continue;\n      }\n      // If not, skip this triangle.\n      dy = vertices[i].y - open[j].y;\n      if (dx * dx + dy * dy > open[j].r) {\n        continue;\n      }\n      // Remove the triangle and add it's edges to the edge list.\n      edges.push(open[j].a, open[j].b, open[j].b, open[j].c, open[j].c, open[j].a);\n      open.splice(j, 1);\n    }\n    // Remove any doubled edges.\n    dedup(edges);\n    // Add a new triangle for each edge.\n    j = edges.length;\n    while (j) {\n      b = edges[--j];\n      a = edges[--j];\n      c = vertices[i];\n      // Avoid adding colinear triangles (which have error-prone\n      // circumcircles)\n      A = b.x - a.x;\n      B = b.y - a.y;\n      G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n      if (Math.abs(G) > epsilon) {\n        open.push(new Triangle(a, b, c));\n      }\n    }\n  }\n  // Copy any remaining open triangles to the closed list, and then\n  // remove any triangles that share a vertex with the supertriangle.\n  Array.prototype.push.apply(closed, open);\n  i = closed.length;\n  while (i--) {\n    if (closed[i].a.__sentinel || closed[i].b.__sentinel || closed[i].c.__sentinel) {\n      closed.splice(i, 1);\n    }\n  }\n  return closed;\n}","map":{"version":3,"names":["featureCollection","polygon","tin","points","z","isPointZ","triangulate","features","map","p","point","x","geometry","coordinates","y","properties","length","triangle","a","b","c","push","Triangle","A","B","C","D","E","F","G","dx","dy","r","byX","dedup","edges","j","i","m","n","outer","splice","vertices","sort","xmin","xmax","ymin","ymax","epsilon","dmax","xmid","ymid","open","__sentinel","closed","Math","abs","Array","prototype","apply"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/tin/dist/es/index.js"],"sourcesContent":["// http://en.wikipedia.org/wiki/Delaunay_triangulation\n// https://github.com/ironwallaby/delaunay\nimport { featureCollection, polygon } from \"@turf/helpers\";\n/**\n * Takes a set of {@link Point|points} and creates a\n * [Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),\n * or a TIN for short, returned as a collection of Polygons. These are often used\n * for developing elevation contour maps or stepped heat visualizations.\n *\n * If an optional z-value property is provided then it is added as properties called `a`, `b`,\n * and `c` representing its value at each of the points that represent the corners of the\n * triangle.\n *\n * @name tin\n * @param {FeatureCollection<Point>} points input points\n * @param {String} [z] name of the property from which to pull z values\n * This is optional: if not given, then there will be no extra data added to the derived triangles.\n * @returns {FeatureCollection<Polygon>} TIN output\n * @example\n * // generate some random point data\n * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n *\n * // add a random property to each point between 0 and 9\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = ~~(Math.random() * 9);\n * }\n * var tin = turf.tin(points, 'z');\n *\n * //addToMap\n * var addToMap = [tin, points]\n * for (var i = 0; i < tin.features.length; i++) {\n *   var properties  = tin.features[i].properties;\n *   properties.fill = '#' + properties.a + properties.b + properties.c;\n * }\n */\nexport default function tin(points, z) {\n    // break down points\n    var isPointZ = false;\n    return featureCollection(triangulate(points.features.map(function (p) {\n        var point = {\n            x: p.geometry.coordinates[0],\n            y: p.geometry.coordinates[1],\n        };\n        if (z) {\n            point.z = p.properties[z];\n        }\n        else if (p.geometry.coordinates.length === 3) {\n            isPointZ = true;\n            point.z = p.geometry.coordinates[2];\n        }\n        return point;\n    })).map(function (triangle) {\n        var a = [triangle.a.x, triangle.a.y];\n        var b = [triangle.b.x, triangle.b.y];\n        var c = [triangle.c.x, triangle.c.y];\n        var properties = {};\n        // Add z coordinates to triangle points if user passed\n        // them in that way otherwise add it as a property.\n        if (isPointZ) {\n            a.push(triangle.a.z);\n            b.push(triangle.b.z);\n            c.push(triangle.c.z);\n        }\n        else {\n            properties = {\n                a: triangle.a.z,\n                b: triangle.b.z,\n                c: triangle.c.z,\n            };\n        }\n        return polygon([[a, b, c, a]], properties);\n    }));\n}\nvar Triangle = /** @class */ (function () {\n    function Triangle(a, b, c) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        var A = b.x - a.x;\n        var B = b.y - a.y;\n        var C = c.x - a.x;\n        var D = c.y - a.y;\n        var E = A * (a.x + b.x) + B * (a.y + b.y);\n        var F = C * (a.x + c.x) + D * (a.y + c.y);\n        var G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n        var dx;\n        var dy;\n        // If the points of the triangle are collinear, then just find the\n        // extremes and use the midpoint as the center of the circumcircle.\n        this.x = (D * E - B * F) / G;\n        this.y = (A * F - C * E) / G;\n        dx = this.x - a.x;\n        dy = this.y - a.y;\n        this.r = dx * dx + dy * dy;\n    }\n    return Triangle;\n}());\nfunction byX(a, b) {\n    return b.x - a.x;\n}\nfunction dedup(edges) {\n    var j = edges.length;\n    var a;\n    var b;\n    var i;\n    var m;\n    var n;\n    outer: while (j) {\n        b = edges[--j];\n        a = edges[--j];\n        i = j;\n        while (i) {\n            n = edges[--i];\n            m = edges[--i];\n            if ((a === m && b === n) || (a === n && b === m)) {\n                edges.splice(j, 2);\n                edges.splice(i, 2);\n                j -= 2;\n                continue outer;\n            }\n        }\n    }\n}\nfunction triangulate(vertices) {\n    // Bail if there aren't enough vertices to form any triangles.\n    if (vertices.length < 3) {\n        return [];\n    }\n    // Ensure the vertex array is in order of descending X coordinate\n    // (which is needed to ensure a subquadratic runtime), and then find\n    // the bounding box around the points.\n    vertices.sort(byX);\n    var i = vertices.length - 1;\n    var xmin = vertices[i].x;\n    var xmax = vertices[0].x;\n    var ymin = vertices[i].y;\n    var ymax = ymin;\n    var epsilon = 1e-12;\n    var a;\n    var b;\n    var c;\n    var A;\n    var B;\n    var G;\n    while (i--) {\n        if (vertices[i].y < ymin) {\n            ymin = vertices[i].y;\n        }\n        if (vertices[i].y > ymax) {\n            ymax = vertices[i].y;\n        }\n    }\n    // Find a supertriangle, which is a triangle that surrounds all the\n    // vertices. This is used like something of a sentinel value to remove\n    // cases in the main algorithm, and is removed before we return any\n    // results.\n    // Once found, put it in the \"open\" list. (The \"open\" list is for\n    // triangles who may still need to be considered; the \"closed\" list is\n    // for triangles which do not.)\n    var dx = xmax - xmin;\n    var dy = ymax - ymin;\n    var dmax = dx > dy ? dx : dy;\n    var xmid = (xmax + xmin) * 0.5;\n    var ymid = (ymax + ymin) * 0.5;\n    var open = [\n        new Triangle({\n            __sentinel: true,\n            x: xmid - 20 * dmax,\n            y: ymid - dmax,\n        }, {\n            __sentinel: true,\n            x: xmid,\n            y: ymid + 20 * dmax,\n        }, {\n            __sentinel: true,\n            x: xmid + 20 * dmax,\n            y: ymid - dmax,\n        }),\n    ];\n    var closed = [];\n    var edges = [];\n    var j;\n    // Incrementally add each vertex to the mesh.\n    i = vertices.length;\n    while (i--) {\n        // For each open triangle, check to see if the current point is\n        // inside it's circumcircle. If it is, remove the triangle and add\n        // it's edges to an edge list.\n        edges.length = 0;\n        j = open.length;\n        while (j--) {\n            // If this point is to the right of this triangle's circumcircle,\n            // then this triangle should never get checked again. Remove it\n            // from the open list, add it to the closed list, and skip.\n            dx = vertices[i].x - open[j].x;\n            if (dx > 0 && dx * dx > open[j].r) {\n                closed.push(open[j]);\n                open.splice(j, 1);\n                continue;\n            }\n            // If not, skip this triangle.\n            dy = vertices[i].y - open[j].y;\n            if (dx * dx + dy * dy > open[j].r) {\n                continue;\n            }\n            // Remove the triangle and add it's edges to the edge list.\n            edges.push(open[j].a, open[j].b, open[j].b, open[j].c, open[j].c, open[j].a);\n            open.splice(j, 1);\n        }\n        // Remove any doubled edges.\n        dedup(edges);\n        // Add a new triangle for each edge.\n        j = edges.length;\n        while (j) {\n            b = edges[--j];\n            a = edges[--j];\n            c = vertices[i];\n            // Avoid adding colinear triangles (which have error-prone\n            // circumcircles)\n            A = b.x - a.x;\n            B = b.y - a.y;\n            G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n            if (Math.abs(G) > epsilon) {\n                open.push(new Triangle(a, b, c));\n            }\n        }\n    }\n    // Copy any remaining open triangles to the closed list, and then\n    // remove any triangles that share a vertex with the supertriangle.\n    Array.prototype.push.apply(closed, open);\n    i = closed.length;\n    while (i--) {\n        if (closed[i].a.__sentinel ||\n            closed[i].b.__sentinel ||\n            closed[i].c.__sentinel) {\n            closed.splice(i, 1);\n        }\n    }\n    return closed;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,iBAAiB,EAAEC,OAAO,QAAQ,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,GAAGA,CAACC,MAAM,EAAEC,CAAC,EAAE;EACnC;EACA,IAAIC,QAAQ,GAAG,KAAK;EACpB,OAAOL,iBAAiB,CAACM,WAAW,CAACH,MAAM,CAACI,QAAQ,CAACC,GAAG,CAAC,UAAUC,CAAC,EAAE;IAClE,IAAIC,KAAK,GAAG;MACRC,CAAC,EAAEF,CAAC,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;MAC5BC,CAAC,EAAEL,CAAC,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC;IAC/B,CAAC;IACD,IAAIT,CAAC,EAAE;MACHM,KAAK,CAACN,CAAC,GAAGK,CAAC,CAACM,UAAU,CAACX,CAAC,CAAC;IAC7B,CAAC,MACI,IAAIK,CAAC,CAACG,QAAQ,CAACC,WAAW,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1CX,QAAQ,GAAG,IAAI;MACfK,KAAK,CAACN,CAAC,GAAGK,CAAC,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;IACvC;IACA,OAAOH,KAAK;EAChB,CAAC,CAAC,CAAC,CAACF,GAAG,CAAC,UAAUS,QAAQ,EAAE;IACxB,IAAIC,CAAC,GAAG,CAACD,QAAQ,CAACC,CAAC,CAACP,CAAC,EAAEM,QAAQ,CAACC,CAAC,CAACJ,CAAC,CAAC;IACpC,IAAIK,CAAC,GAAG,CAACF,QAAQ,CAACE,CAAC,CAACR,CAAC,EAAEM,QAAQ,CAACE,CAAC,CAACL,CAAC,CAAC;IACpC,IAAIM,CAAC,GAAG,CAACH,QAAQ,CAACG,CAAC,CAACT,CAAC,EAAEM,QAAQ,CAACG,CAAC,CAACN,CAAC,CAAC;IACpC,IAAIC,UAAU,GAAG,CAAC,CAAC;IACnB;IACA;IACA,IAAIV,QAAQ,EAAE;MACVa,CAAC,CAACG,IAAI,CAACJ,QAAQ,CAACC,CAAC,CAACd,CAAC,CAAC;MACpBe,CAAC,CAACE,IAAI,CAACJ,QAAQ,CAACE,CAAC,CAACf,CAAC,CAAC;MACpBgB,CAAC,CAACC,IAAI,CAACJ,QAAQ,CAACG,CAAC,CAAChB,CAAC,CAAC;IACxB,CAAC,MACI;MACDW,UAAU,GAAG;QACTG,CAAC,EAAED,QAAQ,CAACC,CAAC,CAACd,CAAC;QACfe,CAAC,EAAEF,QAAQ,CAACE,CAAC,CAACf,CAAC;QACfgB,CAAC,EAAEH,QAAQ,CAACG,CAAC,CAAChB;MAClB,CAAC;IACL;IACA,OAAOH,OAAO,CAAC,CAAC,CAACiB,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEF,CAAC,CAAC,CAAC,EAAEH,UAAU,CAAC;EAC9C,CAAC,CAAC,CAAC;AACP;AACA,IAAIO,QAAQ,GAAG,aAAe,YAAY;EACtC,SAASA,QAAQA,CAACJ,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACvB,IAAI,CAACF,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAIG,CAAC,GAAGJ,CAAC,CAACR,CAAC,GAAGO,CAAC,CAACP,CAAC;IACjB,IAAIa,CAAC,GAAGL,CAAC,CAACL,CAAC,GAAGI,CAAC,CAACJ,CAAC;IACjB,IAAIW,CAAC,GAAGL,CAAC,CAACT,CAAC,GAAGO,CAAC,CAACP,CAAC;IACjB,IAAIe,CAAC,GAAGN,CAAC,CAACN,CAAC,GAAGI,CAAC,CAACJ,CAAC;IACjB,IAAIa,CAAC,GAAGJ,CAAC,IAAIL,CAAC,CAACP,CAAC,GAAGQ,CAAC,CAACR,CAAC,CAAC,GAAGa,CAAC,IAAIN,CAAC,CAACJ,CAAC,GAAGK,CAAC,CAACL,CAAC,CAAC;IACzC,IAAIc,CAAC,GAAGH,CAAC,IAAIP,CAAC,CAACP,CAAC,GAAGS,CAAC,CAACT,CAAC,CAAC,GAAGe,CAAC,IAAIR,CAAC,CAACJ,CAAC,GAAGM,CAAC,CAACN,CAAC,CAAC;IACzC,IAAIe,CAAC,GAAG,CAAC,IAAIN,CAAC,IAAIH,CAAC,CAACN,CAAC,GAAGK,CAAC,CAACL,CAAC,CAAC,GAAGU,CAAC,IAAIJ,CAAC,CAACT,CAAC,GAAGQ,CAAC,CAACR,CAAC,CAAC,CAAC;IAC/C,IAAImB,EAAE;IACN,IAAIC,EAAE;IACN;IACA;IACA,IAAI,CAACpB,CAAC,GAAG,CAACe,CAAC,GAAGC,CAAC,GAAGH,CAAC,GAAGI,CAAC,IAAIC,CAAC;IAC5B,IAAI,CAACf,CAAC,GAAG,CAACS,CAAC,GAAGK,CAAC,GAAGH,CAAC,GAAGE,CAAC,IAAIE,CAAC;IAC5BC,EAAE,GAAG,IAAI,CAACnB,CAAC,GAAGO,CAAC,CAACP,CAAC;IACjBoB,EAAE,GAAG,IAAI,CAACjB,CAAC,GAAGI,CAAC,CAACJ,CAAC;IACjB,IAAI,CAACkB,CAAC,GAAGF,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE;EAC9B;EACA,OAAOT,QAAQ;AACnB,CAAC,CAAC,CAAE;AACJ,SAASW,GAAGA,CAACf,CAAC,EAAEC,CAAC,EAAE;EACf,OAAOA,CAAC,CAACR,CAAC,GAAGO,CAAC,CAACP,CAAC;AACpB;AACA,SAASuB,KAAKA,CAACC,KAAK,EAAE;EAClB,IAAIC,CAAC,GAAGD,KAAK,CAACnB,MAAM;EACpB,IAAIE,CAAC;EACL,IAAIC,CAAC;EACL,IAAIkB,CAAC;EACL,IAAIC,CAAC;EACL,IAAIC,CAAC;EACLC,KAAK,EAAE,OAAOJ,CAAC,EAAE;IACbjB,CAAC,GAAGgB,KAAK,CAAC,EAAEC,CAAC,CAAC;IACdlB,CAAC,GAAGiB,KAAK,CAAC,EAAEC,CAAC,CAAC;IACdC,CAAC,GAAGD,CAAC;IACL,OAAOC,CAAC,EAAE;MACNE,CAAC,GAAGJ,KAAK,CAAC,EAAEE,CAAC,CAAC;MACdC,CAAC,GAAGH,KAAK,CAAC,EAAEE,CAAC,CAAC;MACd,IAAKnB,CAAC,KAAKoB,CAAC,IAAInB,CAAC,KAAKoB,CAAC,IAAMrB,CAAC,KAAKqB,CAAC,IAAIpB,CAAC,KAAKmB,CAAE,EAAE;QAC9CH,KAAK,CAACM,MAAM,CAACL,CAAC,EAAE,CAAC,CAAC;QAClBD,KAAK,CAACM,MAAM,CAACJ,CAAC,EAAE,CAAC,CAAC;QAClBD,CAAC,IAAI,CAAC;QACN,SAASI,KAAK;MAClB;IACJ;EACJ;AACJ;AACA,SAASlC,WAAWA,CAACoC,QAAQ,EAAE;EAC3B;EACA,IAAIA,QAAQ,CAAC1B,MAAM,GAAG,CAAC,EAAE;IACrB,OAAO,EAAE;EACb;EACA;EACA;EACA;EACA0B,QAAQ,CAACC,IAAI,CAACV,GAAG,CAAC;EAClB,IAAII,CAAC,GAAGK,QAAQ,CAAC1B,MAAM,GAAG,CAAC;EAC3B,IAAI4B,IAAI,GAAGF,QAAQ,CAACL,CAAC,CAAC,CAAC1B,CAAC;EACxB,IAAIkC,IAAI,GAAGH,QAAQ,CAAC,CAAC,CAAC,CAAC/B,CAAC;EACxB,IAAImC,IAAI,GAAGJ,QAAQ,CAACL,CAAC,CAAC,CAACvB,CAAC;EACxB,IAAIiC,IAAI,GAAGD,IAAI;EACf,IAAIE,OAAO,GAAG,KAAK;EACnB,IAAI9B,CAAC;EACL,IAAIC,CAAC;EACL,IAAIC,CAAC;EACL,IAAIG,CAAC;EACL,IAAIC,CAAC;EACL,IAAIK,CAAC;EACL,OAAOQ,CAAC,EAAE,EAAE;IACR,IAAIK,QAAQ,CAACL,CAAC,CAAC,CAACvB,CAAC,GAAGgC,IAAI,EAAE;MACtBA,IAAI,GAAGJ,QAAQ,CAACL,CAAC,CAAC,CAACvB,CAAC;IACxB;IACA,IAAI4B,QAAQ,CAACL,CAAC,CAAC,CAACvB,CAAC,GAAGiC,IAAI,EAAE;MACtBA,IAAI,GAAGL,QAAQ,CAACL,CAAC,CAAC,CAACvB,CAAC;IACxB;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIgB,EAAE,GAAGe,IAAI,GAAGD,IAAI;EACpB,IAAIb,EAAE,GAAGgB,IAAI,GAAGD,IAAI;EACpB,IAAIG,IAAI,GAAGnB,EAAE,GAAGC,EAAE,GAAGD,EAAE,GAAGC,EAAE;EAC5B,IAAImB,IAAI,GAAG,CAACL,IAAI,GAAGD,IAAI,IAAI,GAAG;EAC9B,IAAIO,IAAI,GAAG,CAACJ,IAAI,GAAGD,IAAI,IAAI,GAAG;EAC9B,IAAIM,IAAI,GAAG,CACP,IAAI9B,QAAQ,CAAC;IACT+B,UAAU,EAAE,IAAI;IAChB1C,CAAC,EAAEuC,IAAI,GAAG,EAAE,GAAGD,IAAI;IACnBnC,CAAC,EAAEqC,IAAI,GAAGF;EACd,CAAC,EAAE;IACCI,UAAU,EAAE,IAAI;IAChB1C,CAAC,EAAEuC,IAAI;IACPpC,CAAC,EAAEqC,IAAI,GAAG,EAAE,GAAGF;EACnB,CAAC,EAAE;IACCI,UAAU,EAAE,IAAI;IAChB1C,CAAC,EAAEuC,IAAI,GAAG,EAAE,GAAGD,IAAI;IACnBnC,CAAC,EAAEqC,IAAI,GAAGF;EACd,CAAC,CAAC,CACL;EACD,IAAIK,MAAM,GAAG,EAAE;EACf,IAAInB,KAAK,GAAG,EAAE;EACd,IAAIC,CAAC;EACL;EACAC,CAAC,GAAGK,QAAQ,CAAC1B,MAAM;EACnB,OAAOqB,CAAC,EAAE,EAAE;IACR;IACA;IACA;IACAF,KAAK,CAACnB,MAAM,GAAG,CAAC;IAChBoB,CAAC,GAAGgB,IAAI,CAACpC,MAAM;IACf,OAAOoB,CAAC,EAAE,EAAE;MACR;MACA;MACA;MACAN,EAAE,GAAGY,QAAQ,CAACL,CAAC,CAAC,CAAC1B,CAAC,GAAGyC,IAAI,CAAChB,CAAC,CAAC,CAACzB,CAAC;MAC9B,IAAImB,EAAE,GAAG,CAAC,IAAIA,EAAE,GAAGA,EAAE,GAAGsB,IAAI,CAAChB,CAAC,CAAC,CAACJ,CAAC,EAAE;QAC/BsB,MAAM,CAACjC,IAAI,CAAC+B,IAAI,CAAChB,CAAC,CAAC,CAAC;QACpBgB,IAAI,CAACX,MAAM,CAACL,CAAC,EAAE,CAAC,CAAC;QACjB;MACJ;MACA;MACAL,EAAE,GAAGW,QAAQ,CAACL,CAAC,CAAC,CAACvB,CAAC,GAAGsC,IAAI,CAAChB,CAAC,CAAC,CAACtB,CAAC;MAC9B,IAAIgB,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGqB,IAAI,CAAChB,CAAC,CAAC,CAACJ,CAAC,EAAE;QAC/B;MACJ;MACA;MACAG,KAAK,CAACd,IAAI,CAAC+B,IAAI,CAAChB,CAAC,CAAC,CAAClB,CAAC,EAAEkC,IAAI,CAAChB,CAAC,CAAC,CAACjB,CAAC,EAAEiC,IAAI,CAAChB,CAAC,CAAC,CAACjB,CAAC,EAAEiC,IAAI,CAAChB,CAAC,CAAC,CAAChB,CAAC,EAAEgC,IAAI,CAAChB,CAAC,CAAC,CAAChB,CAAC,EAAEgC,IAAI,CAAChB,CAAC,CAAC,CAAClB,CAAC,CAAC;MAC5EkC,IAAI,CAACX,MAAM,CAACL,CAAC,EAAE,CAAC,CAAC;IACrB;IACA;IACAF,KAAK,CAACC,KAAK,CAAC;IACZ;IACAC,CAAC,GAAGD,KAAK,CAACnB,MAAM;IAChB,OAAOoB,CAAC,EAAE;MACNjB,CAAC,GAAGgB,KAAK,CAAC,EAAEC,CAAC,CAAC;MACdlB,CAAC,GAAGiB,KAAK,CAAC,EAAEC,CAAC,CAAC;MACdhB,CAAC,GAAGsB,QAAQ,CAACL,CAAC,CAAC;MACf;MACA;MACAd,CAAC,GAAGJ,CAAC,CAACR,CAAC,GAAGO,CAAC,CAACP,CAAC;MACba,CAAC,GAAGL,CAAC,CAACL,CAAC,GAAGI,CAAC,CAACJ,CAAC;MACbe,CAAC,GAAG,CAAC,IAAIN,CAAC,IAAIH,CAAC,CAACN,CAAC,GAAGK,CAAC,CAACL,CAAC,CAAC,GAAGU,CAAC,IAAIJ,CAAC,CAACT,CAAC,GAAGQ,CAAC,CAACR,CAAC,CAAC,CAAC;MAC3C,IAAI4C,IAAI,CAACC,GAAG,CAAC3B,CAAC,CAAC,GAAGmB,OAAO,EAAE;QACvBI,IAAI,CAAC/B,IAAI,CAAC,IAAIC,QAAQ,CAACJ,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAC;MACpC;IACJ;EACJ;EACA;EACA;EACAqC,KAAK,CAACC,SAAS,CAACrC,IAAI,CAACsC,KAAK,CAACL,MAAM,EAAEF,IAAI,CAAC;EACxCf,CAAC,GAAGiB,MAAM,CAACtC,MAAM;EACjB,OAAOqB,CAAC,EAAE,EAAE;IACR,IAAIiB,MAAM,CAACjB,CAAC,CAAC,CAACnB,CAAC,CAACmC,UAAU,IACtBC,MAAM,CAACjB,CAAC,CAAC,CAAClB,CAAC,CAACkC,UAAU,IACtBC,MAAM,CAACjB,CAAC,CAAC,CAACjB,CAAC,CAACiC,UAAU,EAAE;MACxBC,MAAM,CAACb,MAAM,CAACJ,CAAC,EAAE,CAAC,CAAC;IACvB;EACJ;EACA,OAAOiB,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}