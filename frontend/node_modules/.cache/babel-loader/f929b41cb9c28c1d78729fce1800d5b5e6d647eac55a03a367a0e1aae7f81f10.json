{"ast":null,"code":"import centroid from '@turf/centroid';\nimport rhumbBearing from '@turf/rhumb-bearing';\nimport rhumbDistance from '@turf/rhumb-distance';\nimport rhumbDestination from '@turf/rhumb-destination';\nimport clone from '@turf/clone';\nimport { coordEach } from '@turf/meta';\nimport { getCoords } from '@turf/invariant';\nimport { isObject } from '@turf/helpers';\n\n/**\n * Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point.\n *\n * @name transformRotate\n * @param {GeoJSON} geojson object to be rotated\n * @param {number} angle of rotation in decimal degrees, positive clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {Coord} [options.pivot='centroid'] point around which the rotation will be performed\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} the rotated GeoJSON feature\n * @example\n * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * var options = {pivot: [0, 25]};\n * var rotatedPoly = turf.transformRotate(poly, 10, options);\n *\n * //addToMap\n * var addToMap = [poly, rotatedPoly];\n * rotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\nfunction transformRotate(geojson, angle, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var pivot = options.pivot;\n  var mutate = options.mutate;\n\n  // Input validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (angle === undefined || angle === null || isNaN(angle)) throw new Error(\"angle is required\");\n\n  // Shortcut no-rotation\n  if (angle === 0) return geojson;\n\n  // Use centroid of GeoJSON if pivot is not provided\n  if (!pivot) pivot = centroid(geojson);\n\n  // Clone geojson to avoid side effects\n  if (mutate === false || mutate === undefined) geojson = clone(geojson);\n\n  // Rotate each coordinate\n  coordEach(geojson, function (pointCoords) {\n    var initialAngle = rhumbBearing(pivot, pointCoords);\n    var finalAngle = initialAngle + angle;\n    var distance = rhumbDistance(pivot, pointCoords);\n    var newCoords = getCoords(rhumbDestination(pivot, distance, finalAngle));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n  });\n  return geojson;\n}\nexport default transformRotate;","map":{"version":3,"names":["centroid","rhumbBearing","rhumbDistance","rhumbDestination","clone","coordEach","getCoords","isObject","transformRotate","geojson","angle","options","Error","pivot","mutate","undefined","isNaN","pointCoords","initialAngle","finalAngle","distance","newCoords"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/transform-rotate/dist/es/index.js"],"sourcesContent":["import centroid from '@turf/centroid';\nimport rhumbBearing from '@turf/rhumb-bearing';\nimport rhumbDistance from '@turf/rhumb-distance';\nimport rhumbDestination from '@turf/rhumb-destination';\nimport clone from '@turf/clone';\nimport { coordEach } from '@turf/meta';\nimport { getCoords } from '@turf/invariant';\nimport { isObject } from '@turf/helpers';\n\n/**\n * Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point.\n *\n * @name transformRotate\n * @param {GeoJSON} geojson object to be rotated\n * @param {number} angle of rotation in decimal degrees, positive clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {Coord} [options.pivot='centroid'] point around which the rotation will be performed\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} the rotated GeoJSON feature\n * @example\n * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * var options = {pivot: [0, 25]};\n * var rotatedPoly = turf.transformRotate(poly, 10, options);\n *\n * //addToMap\n * var addToMap = [poly, rotatedPoly];\n * rotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\nfunction transformRotate(geojson, angle, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var pivot = options.pivot;\n  var mutate = options.mutate;\n\n  // Input validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (angle === undefined || angle === null || isNaN(angle))\n    throw new Error(\"angle is required\");\n\n  // Shortcut no-rotation\n  if (angle === 0) return geojson;\n\n  // Use centroid of GeoJSON if pivot is not provided\n  if (!pivot) pivot = centroid(geojson);\n\n  // Clone geojson to avoid side effects\n  if (mutate === false || mutate === undefined) geojson = clone(geojson);\n\n  // Rotate each coordinate\n  coordEach(geojson, function (pointCoords) {\n    var initialAngle = rhumbBearing(pivot, pointCoords);\n    var finalAngle = initialAngle + angle;\n    var distance = rhumbDistance(pivot, pointCoords);\n    var newCoords = getCoords(rhumbDestination(pivot, distance, finalAngle));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n  });\n  return geojson;\n}\n\nexport default transformRotate;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,gBAAgB,MAAM,yBAAyB;AACtD,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,QAAQ,QAAQ,eAAe;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAE;EAChD;EACAA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAI,CAACJ,QAAQ,CAACI,OAAO,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;EAC7D,IAAIC,KAAK,GAAGF,OAAO,CAACE,KAAK;EACzB,IAAIC,MAAM,GAAGH,OAAO,CAACG,MAAM;;EAE3B;EACA,IAAI,CAACL,OAAO,EAAE,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;EACpD,IAAIF,KAAK,KAAKK,SAAS,IAAIL,KAAK,KAAK,IAAI,IAAIM,KAAK,CAACN,KAAK,CAAC,EACvD,MAAM,IAAIE,KAAK,CAAC,mBAAmB,CAAC;;EAEtC;EACA,IAAIF,KAAK,KAAK,CAAC,EAAE,OAAOD,OAAO;;EAE/B;EACA,IAAI,CAACI,KAAK,EAAEA,KAAK,GAAGb,QAAQ,CAACS,OAAO,CAAC;;EAErC;EACA,IAAIK,MAAM,KAAK,KAAK,IAAIA,MAAM,KAAKC,SAAS,EAAEN,OAAO,GAAGL,KAAK,CAACK,OAAO,CAAC;;EAEtE;EACAJ,SAAS,CAACI,OAAO,EAAE,UAAUQ,WAAW,EAAE;IACxC,IAAIC,YAAY,GAAGjB,YAAY,CAACY,KAAK,EAAEI,WAAW,CAAC;IACnD,IAAIE,UAAU,GAAGD,YAAY,GAAGR,KAAK;IACrC,IAAIU,QAAQ,GAAGlB,aAAa,CAACW,KAAK,EAAEI,WAAW,CAAC;IAChD,IAAII,SAAS,GAAGf,SAAS,CAACH,gBAAgB,CAACU,KAAK,EAAEO,QAAQ,EAAED,UAAU,CAAC,CAAC;IACxEF,WAAW,CAAC,CAAC,CAAC,GAAGI,SAAS,CAAC,CAAC,CAAC;IAC7BJ,WAAW,CAAC,CAAC,CAAC,GAAGI,SAAS,CAAC,CAAC,CAAC;EAC/B,CAAC,CAAC;EACF,OAAOZ,OAAO;AAChB;AAEA,eAAeD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}