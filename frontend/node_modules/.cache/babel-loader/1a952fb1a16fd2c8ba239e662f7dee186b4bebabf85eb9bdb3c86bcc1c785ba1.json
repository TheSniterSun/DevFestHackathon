{"ast":null,"code":"\"use strict\";\n\nvar Distance = require(\"./distance.js\"),\n  eudist = Distance.eudist,\n  dist = Distance.dist;\nmodule.exports = {\n  kmrand: function kmrand(data, k) {\n    var map = {},\n      ks = [],\n      t = k << 2;\n    var len = data.length;\n    var multi = data[0].length > 0;\n    while (ks.length < k && t-- > 0) {\n      var d = data[Math.floor(Math.random() * len)];\n      var key = multi ? d.join(\"_\") : \"\" + d;\n      if (!map[key]) {\n        map[key] = true;\n        ks.push(d);\n      }\n    }\n    if (ks.length < k) throw new Error(\"Error initializating clusters\");else return ks;\n  },\n  /**\n   * K-means++ initial centroid selection\n   */\n  kmpp: function kmpp(data, k) {\n    var distance = data[0].length ? eudist : dist;\n    var ks = [],\n      len = data.length;\n    var multi = data[0].length > 0;\n    var map = {};\n\n    // First random centroid\n    var c = data[Math.floor(Math.random() * len)];\n    var key = multi ? c.join(\"_\") : \"\" + c;\n    ks.push(c);\n    map[key] = true;\n\n    // Retrieve next centroids\n    while (ks.length < k) {\n      // Min Distances between current centroids and data points\n      var dists = [],\n        lk = ks.length;\n      var dsum = 0,\n        prs = [];\n      for (var i = 0; i < len; i++) {\n        var min = Infinity;\n        for (var j = 0; j < lk; j++) {\n          var _dist = distance(data[i], ks[j]);\n          if (_dist <= min) min = _dist;\n        }\n        dists[i] = min;\n      }\n\n      // Sum all min distances\n      for (var _i = 0; _i < len; _i++) {\n        dsum += dists[_i];\n      }\n\n      // Probabilities and cummulative prob (cumsum)\n      for (var _i2 = 0; _i2 < len; _i2++) {\n        prs[_i2] = {\n          i: _i2,\n          v: data[_i2],\n          pr: dists[_i2] / dsum,\n          cs: 0\n        };\n      }\n\n      // Sort Probabilities\n      prs.sort(function (a, b) {\n        return a.pr - b.pr;\n      });\n\n      // Cummulative Probabilities\n      prs[0].cs = prs[0].pr;\n      for (var _i3 = 1; _i3 < len; _i3++) {\n        prs[_i3].cs = prs[_i3 - 1].cs + prs[_i3].pr;\n      }\n\n      // Randomize\n      var rnd = Math.random();\n\n      // Gets only the items whose cumsum >= rnd\n      var idx = 0;\n      while (idx < len - 1 && prs[idx++].cs < rnd) {}\n      ks.push(prs[idx - 1].v);\n      /*\n      let done = false;\n      while(!done) {\n      \t// this is our new centroid\n      \tc = prs[idx-1].v\n      \tkey = multi? c.join(\"_\") : `${c}`;\n      \tif(!map[key]) {\n      \t\tmap[key] = true;\n      \t\tks.push(c);\n      \t\tdone = true;\n      \t}\n      \telse {\n      \t\tidx++;\n      \t}\n      }\n      */\n    }\n    return ks;\n  }\n};","map":{"version":3,"names":["Distance","require","eudist","dist","module","exports","kmrand","data","k","map","ks","t","len","length","multi","d","Math","floor","random","key","join","push","Error","kmpp","distance","c","dists","lk","dsum","prs","i","min","Infinity","j","_dist","_i","_i2","v","pr","cs","sort","a","b","_i3","rnd","idx"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/skmeans/kinit.js"],"sourcesContent":["const\n\tDistance = require(\"./distance.js\"),\n\teudist = Distance.eudist,\n\tdist = Distance.dist;\n\nmodule.exports = {\n\tkmrand(data,k) {\n\t\tvar map = {}, ks = [], t = k<<2;\n\t\tvar len = data.length;\n\t\tvar multi = data[0].length>0;\n\n\t\twhile(ks.length<k && (t--)>0) {\n\t\t\tlet d = data[Math.floor(Math.random()*len)];\n\t\t\tlet key = multi? d.join(\"_\") : `${d}`;\n\t\t\tif(!map[key]) {\n\t\t\t\tmap[key] = true;\n\t\t\t\tks.push(d);\n\t\t\t}\n\t\t}\n\n\t\tif(ks.length<k) throw new Error(\"Error initializating clusters\");\n\t\telse return ks;\n\t},\n\n\t/**\n\t * K-means++ initial centroid selection\n\t */\n\tkmpp(data,k) {\n\t\tvar distance = data[0].length? eudist : dist;\n\t\tvar ks = [], len = data.length;\n\t\tvar multi = data[0].length>0;\n\t\tvar map = {};\n\n\t\t// First random centroid\n\t\tvar c = data[Math.floor(Math.random()*len)];\n\t\tvar key = multi? c.join(\"_\") : `${c}`;\n\t\tks.push(c);\n\t\tmap[key] = true;\n\n\t\t// Retrieve next centroids\n\t\twhile(ks.length<k) {\n\t\t\t// Min Distances between current centroids and data points\n\t\t\tlet dists = [], lk = ks.length;\n\t\t\tlet dsum = 0, prs = [];\n\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet min = Infinity;\n\t\t\t\tfor(let j=0;j<lk;j++) {\n\t\t\t\t\tlet dist = distance(data[i],ks[j]);\n\t\t\t\t\tif(dist<=min) min = dist;\n\t\t\t\t}\n\t\t\t\tdists[i] = min;\n\t\t\t}\n\n\t\t\t// Sum all min distances\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tdsum += dists[i]\n\t\t\t}\n\n\t\t\t// Probabilities and cummulative prob (cumsum)\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tprs[i] = {i:i, v:data[i],\tpr:dists[i]/dsum, cs:0}\n\t\t\t}\n\n\t\t\t// Sort Probabilities\n\t\t\tprs.sort((a,b)=>a.pr-b.pr);\n\n\t\t\t// Cummulative Probabilities\n\t\t\tprs[0].cs = prs[0].pr;\n\t\t\tfor(let i=1;i<len;i++) {\n\t\t\t\tprs[i].cs = prs[i-1].cs + prs[i].pr;\n\t\t\t}\n\n\t\t\t// Randomize\n\t\t\tlet rnd = Math.random();\n\n\t\t\t// Gets only the items whose cumsum >= rnd\n\t\t\tlet idx = 0;\n\t\t\twhile(idx<len-1 && prs[idx++].cs<rnd);\n\t\t\tks.push(prs[idx-1].v);\n\t\t\t/*\n\t\t\tlet done = false;\n\t\t\twhile(!done) {\n\t\t\t\t// this is our new centroid\n\t\t\t\tc = prs[idx-1].v\n\t\t\t\tkey = multi? c.join(\"_\") : `${c}`;\n\t\t\t\tif(!map[key]) {\n\t\t\t\t\tmap[key] = true;\n\t\t\t\t\tks.push(c);\n\t\t\t\t\tdone = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tidx++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\t\t}\n\n\t\treturn ks;\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}