{"ast":null,"code":"import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport { clipExtent } from \"../clip/extent\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport { degrees, radians, sqrt } from \"../math\";\nimport { rotateRadians } from \"../rotation\";\nimport { transformer } from \"../transform\";\nimport { fitExtent, fitSize } from \"./fit\";\nimport resample from \"./resample\";\nvar transformRadians = transformer({\n  point: function (x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\nexport default function projection(project) {\n  return projectionMutator(function () {\n    return project;\n  })();\n}\nexport function projectionMutator(projectAt) {\n  var project,\n    k = 150,\n    // scale\n    x = 480,\n    y = 250,\n    // translate\n    dx,\n    dy,\n    lambda = 0,\n    phi = 0,\n    // center\n    deltaLambda = 0,\n    deltaPhi = 0,\n    deltaGamma = 0,\n    rotate,\n    projectRotate,\n    // rotate\n    theta = null,\n    preclip = clipAntimeridian,\n    // clip angle\n    x0 = null,\n    y0,\n    x1,\n    y1,\n    postclip = identity,\n    // clip extent\n    delta2 = 0.5,\n    projectResample = resample(projectTransform, delta2),\n    // precision\n    cache,\n    cacheStream;\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n  projection.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n  };\n  projection.clipAngle = function (_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n  projection.clipExtent = function (_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n  projection.scale = function (_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n  projection.translate = function (_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n  projection.center = function (_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n  projection.rotate = function (_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n  projection.precision = function (_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n  projection.fitExtent = function (extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n  projection.fitSize = function (size, object) {\n    return fitSize(projection, size, object);\n  };\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n  return function () {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}","map":{"version":3,"names":["clipAntimeridian","clipCircle","clipExtent","compose","identity","degrees","radians","sqrt","rotateRadians","transformer","fitExtent","fitSize","resample","transformRadians","point","x","y","stream","projection","project","projectionMutator","projectAt","k","dx","dy","lambda","phi","deltaLambda","deltaPhi","deltaGamma","rotate","projectRotate","theta","preclip","x0","y0","x1","y1","postclip","delta2","projectResample","projectTransform","cache","cacheStream","invert","clipAngle","_","arguments","length","reset","scale","recenter","translate","center","precision","extent","object","size","apply"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/d3-geo/src/projection/index.js"],"sourcesContent":["import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport {clipExtent} from \"../clip/extent\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {degrees, radians, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      dx, dy, lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n      theta = null, preclip = clipAntimeridian, // clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}