{"ast":null,"code":"import booleanDisjoint from \"@turf/boolean-disjoint\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Boolean-intersects returns (TRUE) two geometries intersect.\n *\n * @name booleanIntersects\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanIntersects(line, point);\n * //=true\n */\nexport default function booleanIntersects(feature1, feature2) {\n  var bool = false;\n  flattenEach(feature1, function (flatten1) {\n    flattenEach(feature2, function (flatten2) {\n      if (bool === true) {\n        return true;\n      }\n      bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);\n    });\n  });\n  return bool;\n}","map":{"version":3,"names":["booleanDisjoint","flattenEach","booleanIntersects","feature1","feature2","bool","flatten1","flatten2","geometry"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/boolean-intersects/dist/es/index.js"],"sourcesContent":["import booleanDisjoint from \"@turf/boolean-disjoint\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Boolean-intersects returns (TRUE) two geometries intersect.\n *\n * @name booleanIntersects\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanIntersects(line, point);\n * //=true\n */\nexport default function booleanIntersects(feature1, feature2) {\n    var bool = false;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === true) {\n                return true;\n            }\n            bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,wBAAwB;AACpD,SAASC,WAAW,QAAQ,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,iBAAiBA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC1D,IAAIC,IAAI,GAAG,KAAK;EAChBJ,WAAW,CAACE,QAAQ,EAAE,UAAUG,QAAQ,EAAE;IACtCL,WAAW,CAACG,QAAQ,EAAE,UAAUG,QAAQ,EAAE;MACtC,IAAIF,IAAI,KAAK,IAAI,EAAE;QACf,OAAO,IAAI;MACf;MACAA,IAAI,GAAG,CAACL,eAAe,CAACM,QAAQ,CAACE,QAAQ,EAAED,QAAQ,CAACC,QAAQ,CAAC;IACjE,CAAC,CAAC;EACN,CAAC,CAAC;EACF,OAAOH,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}