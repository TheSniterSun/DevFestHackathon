{"ast":null,"code":"import { lineString, multiLineString, multiPolygon, polygon } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\nimport { lineclip, polygonclip } from \"./lib/lineclip.js\";\n/**\n * Takes a {@link Feature} and a bbox and clips the feature to the bbox using\n * [lineclip](https://github.com/mapbox/lineclip).\n * May result in degenerate edges when clipping Polygons.\n *\n * @name bboxClip\n * @param {Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature feature to clip to the bbox\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @returns {Feature<LineString|MultiLineString|Polygon|MultiPolygon>} clipped Feature\n * @example\n * var bbox = [0, 0, 10, 10];\n * var poly = turf.polygon([[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]);\n *\n * var clipped = turf.bboxClip(poly, bbox);\n *\n * //addToMap\n * var addToMap = [bbox, poly, clipped]\n */\nexport default function bboxClip(feature, bbox) {\n  var geom = getGeom(feature);\n  var type = geom.type;\n  var properties = feature.type === \"Feature\" ? feature.properties : {};\n  var coords = geom.coordinates;\n  switch (type) {\n    case \"LineString\":\n    case \"MultiLineString\":\n      {\n        var lines_1 = [];\n        if (type === \"LineString\") {\n          coords = [coords];\n        }\n        coords.forEach(function (line) {\n          lineclip(line, bbox, lines_1);\n        });\n        if (lines_1.length === 1) {\n          return lineString(lines_1[0], properties);\n        }\n        return multiLineString(lines_1, properties);\n      }\n    case \"Polygon\":\n      return polygon(clipPolygon(coords, bbox), properties);\n    case \"MultiPolygon\":\n      return multiPolygon(coords.map(function (poly) {\n        return clipPolygon(poly, bbox);\n      }), properties);\n    default:\n      throw new Error(\"geometry \" + type + \" not supported\");\n  }\n}\nfunction clipPolygon(rings, bbox) {\n  var outRings = [];\n  for (var _i = 0, rings_1 = rings; _i < rings_1.length; _i++) {\n    var ring = rings_1[_i];\n    var clipped = polygonclip(ring, bbox);\n    if (clipped.length > 0) {\n      if (clipped[0][0] !== clipped[clipped.length - 1][0] || clipped[0][1] !== clipped[clipped.length - 1][1]) {\n        clipped.push(clipped[0]);\n      }\n      if (clipped.length >= 4) {\n        outRings.push(clipped);\n      }\n    }\n  }\n  return outRings;\n}","map":{"version":3,"names":["lineString","multiLineString","multiPolygon","polygon","getGeom","lineclip","polygonclip","bboxClip","feature","bbox","geom","type","properties","coords","coordinates","lines_1","forEach","line","length","clipPolygon","map","poly","Error","rings","outRings","_i","rings_1","ring","clipped","push"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/bbox-clip/dist/es/index.js"],"sourcesContent":["import { lineString, multiLineString, multiPolygon, polygon, } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\nimport { lineclip, polygonclip } from \"./lib/lineclip.js\";\n/**\n * Takes a {@link Feature} and a bbox and clips the feature to the bbox using\n * [lineclip](https://github.com/mapbox/lineclip).\n * May result in degenerate edges when clipping Polygons.\n *\n * @name bboxClip\n * @param {Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature feature to clip to the bbox\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @returns {Feature<LineString|MultiLineString|Polygon|MultiPolygon>} clipped Feature\n * @example\n * var bbox = [0, 0, 10, 10];\n * var poly = turf.polygon([[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]);\n *\n * var clipped = turf.bboxClip(poly, bbox);\n *\n * //addToMap\n * var addToMap = [bbox, poly, clipped]\n */\nexport default function bboxClip(feature, bbox) {\n    var geom = getGeom(feature);\n    var type = geom.type;\n    var properties = feature.type === \"Feature\" ? feature.properties : {};\n    var coords = geom.coordinates;\n    switch (type) {\n        case \"LineString\":\n        case \"MultiLineString\": {\n            var lines_1 = [];\n            if (type === \"LineString\") {\n                coords = [coords];\n            }\n            coords.forEach(function (line) {\n                lineclip(line, bbox, lines_1);\n            });\n            if (lines_1.length === 1) {\n                return lineString(lines_1[0], properties);\n            }\n            return multiLineString(lines_1, properties);\n        }\n        case \"Polygon\":\n            return polygon(clipPolygon(coords, bbox), properties);\n        case \"MultiPolygon\":\n            return multiPolygon(coords.map(function (poly) {\n                return clipPolygon(poly, bbox);\n            }), properties);\n        default:\n            throw new Error(\"geometry \" + type + \" not supported\");\n    }\n}\nfunction clipPolygon(rings, bbox) {\n    var outRings = [];\n    for (var _i = 0, rings_1 = rings; _i < rings_1.length; _i++) {\n        var ring = rings_1[_i];\n        var clipped = polygonclip(ring, bbox);\n        if (clipped.length > 0) {\n            if (clipped[0][0] !== clipped[clipped.length - 1][0] ||\n                clipped[0][1] !== clipped[clipped.length - 1][1]) {\n                clipped.push(clipped[0]);\n            }\n            if (clipped.length >= 4) {\n                outRings.push(clipped);\n            }\n        }\n    }\n    return outRings;\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,eAAe,EAAEC,YAAY,EAAEC,OAAO,QAAS,eAAe;AACnF,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,QAAQA,CAACC,OAAO,EAAEC,IAAI,EAAE;EAC5C,IAAIC,IAAI,GAAGN,OAAO,CAACI,OAAO,CAAC;EAC3B,IAAIG,IAAI,GAAGD,IAAI,CAACC,IAAI;EACpB,IAAIC,UAAU,GAAGJ,OAAO,CAACG,IAAI,KAAK,SAAS,GAAGH,OAAO,CAACI,UAAU,GAAG,CAAC,CAAC;EACrE,IAAIC,MAAM,GAAGH,IAAI,CAACI,WAAW;EAC7B,QAAQH,IAAI;IACR,KAAK,YAAY;IACjB,KAAK,iBAAiB;MAAE;QACpB,IAAII,OAAO,GAAG,EAAE;QAChB,IAAIJ,IAAI,KAAK,YAAY,EAAE;UACvBE,MAAM,GAAG,CAACA,MAAM,CAAC;QACrB;QACAA,MAAM,CAACG,OAAO,CAAC,UAAUC,IAAI,EAAE;UAC3BZ,QAAQ,CAACY,IAAI,EAAER,IAAI,EAAEM,OAAO,CAAC;QACjC,CAAC,CAAC;QACF,IAAIA,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;UACtB,OAAOlB,UAAU,CAACe,OAAO,CAAC,CAAC,CAAC,EAAEH,UAAU,CAAC;QAC7C;QACA,OAAOX,eAAe,CAACc,OAAO,EAAEH,UAAU,CAAC;MAC/C;IACA,KAAK,SAAS;MACV,OAAOT,OAAO,CAACgB,WAAW,CAACN,MAAM,EAAEJ,IAAI,CAAC,EAAEG,UAAU,CAAC;IACzD,KAAK,cAAc;MACf,OAAOV,YAAY,CAACW,MAAM,CAACO,GAAG,CAAC,UAAUC,IAAI,EAAE;QAC3C,OAAOF,WAAW,CAACE,IAAI,EAAEZ,IAAI,CAAC;MAClC,CAAC,CAAC,EAAEG,UAAU,CAAC;IACnB;MACI,MAAM,IAAIU,KAAK,CAAC,WAAW,GAAGX,IAAI,GAAG,gBAAgB,CAAC;EAC9D;AACJ;AACA,SAASQ,WAAWA,CAACI,KAAK,EAAEd,IAAI,EAAE;EAC9B,IAAIe,QAAQ,GAAG,EAAE;EACjB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,OAAO,GAAGH,KAAK,EAAEE,EAAE,GAAGC,OAAO,CAACR,MAAM,EAAEO,EAAE,EAAE,EAAE;IACzD,IAAIE,IAAI,GAAGD,OAAO,CAACD,EAAE,CAAC;IACtB,IAAIG,OAAO,GAAGtB,WAAW,CAACqB,IAAI,EAAElB,IAAI,CAAC;IACrC,IAAImB,OAAO,CAACV,MAAM,GAAG,CAAC,EAAE;MACpB,IAAIU,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAKA,OAAO,CAACA,OAAO,CAACV,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAChDU,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAKA,OAAO,CAACA,OAAO,CAACV,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QAClDU,OAAO,CAACC,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;MAC5B;MACA,IAAIA,OAAO,CAACV,MAAM,IAAI,CAAC,EAAE;QACrBM,QAAQ,CAACK,IAAI,CAACD,OAAO,CAAC;MAC1B;IACJ;EACJ;EACA,OAAOJ,QAAQ;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}