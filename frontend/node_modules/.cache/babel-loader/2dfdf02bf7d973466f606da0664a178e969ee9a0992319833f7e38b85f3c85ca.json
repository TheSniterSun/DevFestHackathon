{"ast":null,"code":"import { coordEach } from \"@turf/meta\";\nimport { isNumber } from \"@turf/helpers\";\nimport clone from \"@turf/clone\";\n/**\n * Converts a WGS84 GeoJSON object into Mercator (EPSG:900913) projection\n *\n * @name toMercator\n * @param {GeoJSON|Position} geojson WGS84 GeoJSON object\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Projected GeoJSON\n * @example\n * var pt = turf.point([-71,41]);\n * var converted = turf.toMercator(pt);\n *\n * //addToMap\n * var addToMap = [pt, converted];\n */\nexport function toMercator(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return convert(geojson, \"mercator\", options);\n}\n/**\n * Converts a Mercator (EPSG:900913) GeoJSON object into WGS84 projection\n *\n * @name toWgs84\n * @param {GeoJSON|Position} geojson Mercator GeoJSON object\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Projected GeoJSON\n * @example\n * var pt = turf.point([-7903683.846322424, 5012341.663847514]);\n * var converted = turf.toWgs84(pt);\n *\n * //addToMap\n * var addToMap = [pt, converted];\n */\nexport function toWgs84(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return convert(geojson, \"wgs84\", options);\n}\n/**\n * Converts a GeoJSON coordinates to the defined `projection`\n *\n * @private\n * @param {GeoJSON} geojson GeoJSON Feature or Geometry\n * @param {string} projection defines the projection system to convert the coordinates to\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Converted GeoJSON\n */\nfunction convert(geojson, projection, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // Optional parameters\n  options = options || {};\n  var mutate = options.mutate;\n  // Validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  // Handle Position\n  if (Array.isArray(geojson) && isNumber(geojson[0])) geojson = projection === \"mercator\" ? convertToMercator(geojson) : convertToWgs84(geojson);\n  // Handle GeoJSON\n  else {\n    // Handle possible data mutation\n    if (mutate !== true) geojson = clone(geojson);\n    coordEach(geojson, function (coord) {\n      var newCoord = projection === \"mercator\" ? convertToMercator(coord) : convertToWgs84(coord);\n      coord[0] = newCoord[0];\n      coord[1] = newCoord[1];\n    });\n  }\n  return geojson;\n}\n/**\n * Convert lon/lat values to 900913 x/y.\n * (from https://github.com/mapbox/sphericalmercator)\n *\n * @private\n * @param {Array<number>} lonLat WGS84 point\n * @returns {Array<number>} Mercator [x, y] point\n */\nfunction convertToMercator(lonLat) {\n  var D2R = Math.PI / 180,\n    // 900913 properties\n    A = 6378137.0,\n    MAXEXTENT = 20037508.342789244;\n  // compensate longitudes passing the 180th meridian\n  // from https://github.com/proj4js/proj4js/blob/master/lib/common/adjust_lon.js\n  var adjusted = Math.abs(lonLat[0]) <= 180 ? lonLat[0] : lonLat[0] - sign(lonLat[0]) * 360;\n  var xy = [A * adjusted * D2R, A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * lonLat[1] * D2R))];\n  // if xy value is beyond maxextent (e.g. poles), return maxextent\n  if (xy[0] > MAXEXTENT) xy[0] = MAXEXTENT;\n  if (xy[0] < -MAXEXTENT) xy[0] = -MAXEXTENT;\n  if (xy[1] > MAXEXTENT) xy[1] = MAXEXTENT;\n  if (xy[1] < -MAXEXTENT) xy[1] = -MAXEXTENT;\n  return xy;\n}\n/**\n * Convert 900913 x/y values to lon/lat.\n * (from https://github.com/mapbox/sphericalmercator)\n *\n * @private\n * @param {Array<number>} xy Mercator [x, y] point\n * @returns {Array<number>} WGS84 [lon, lat] point\n */\nfunction convertToWgs84(xy) {\n  // 900913 properties.\n  var R2D = 180 / Math.PI;\n  var A = 6378137.0;\n  return [xy[0] * R2D / A, (Math.PI * 0.5 - 2.0 * Math.atan(Math.exp(-xy[1] / A))) * R2D];\n}\n/**\n * Returns the sign of the input, or zero\n *\n * @private\n * @param {number} x input\n * @returns {number} -1|0|1 output\n */\nfunction sign(x) {\n  return x < 0 ? -1 : x > 0 ? 1 : 0;\n}","map":{"version":3,"names":["coordEach","isNumber","clone","toMercator","geojson","options","convert","toWgs84","projection","mutate","Error","Array","isArray","convertToMercator","convertToWgs84","coord","newCoord","lonLat","D2R","Math","PI","A","MAXEXTENT","adjusted","abs","sign","xy","log","tan","R2D","atan","exp","x"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/projection/dist/es/index.js"],"sourcesContent":["import { coordEach } from \"@turf/meta\";\nimport { isNumber } from \"@turf/helpers\";\nimport clone from \"@turf/clone\";\n/**\n * Converts a WGS84 GeoJSON object into Mercator (EPSG:900913) projection\n *\n * @name toMercator\n * @param {GeoJSON|Position} geojson WGS84 GeoJSON object\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Projected GeoJSON\n * @example\n * var pt = turf.point([-71,41]);\n * var converted = turf.toMercator(pt);\n *\n * //addToMap\n * var addToMap = [pt, converted];\n */\nexport function toMercator(geojson, options) {\n    if (options === void 0) { options = {}; }\n    return convert(geojson, \"mercator\", options);\n}\n/**\n * Converts a Mercator (EPSG:900913) GeoJSON object into WGS84 projection\n *\n * @name toWgs84\n * @param {GeoJSON|Position} geojson Mercator GeoJSON object\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Projected GeoJSON\n * @example\n * var pt = turf.point([-7903683.846322424, 5012341.663847514]);\n * var converted = turf.toWgs84(pt);\n *\n * //addToMap\n * var addToMap = [pt, converted];\n */\nexport function toWgs84(geojson, options) {\n    if (options === void 0) { options = {}; }\n    return convert(geojson, \"wgs84\", options);\n}\n/**\n * Converts a GeoJSON coordinates to the defined `projection`\n *\n * @private\n * @param {GeoJSON} geojson GeoJSON Feature or Geometry\n * @param {string} projection defines the projection system to convert the coordinates to\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Converted GeoJSON\n */\nfunction convert(geojson, projection, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    options = options || {};\n    var mutate = options.mutate;\n    // Validation\n    if (!geojson)\n        throw new Error(\"geojson is required\");\n    // Handle Position\n    if (Array.isArray(geojson) && isNumber(geojson[0]))\n        geojson =\n            projection === \"mercator\"\n                ? convertToMercator(geojson)\n                : convertToWgs84(geojson);\n    // Handle GeoJSON\n    else {\n        // Handle possible data mutation\n        if (mutate !== true)\n            geojson = clone(geojson);\n        coordEach(geojson, function (coord) {\n            var newCoord = projection === \"mercator\"\n                ? convertToMercator(coord)\n                : convertToWgs84(coord);\n            coord[0] = newCoord[0];\n            coord[1] = newCoord[1];\n        });\n    }\n    return geojson;\n}\n/**\n * Convert lon/lat values to 900913 x/y.\n * (from https://github.com/mapbox/sphericalmercator)\n *\n * @private\n * @param {Array<number>} lonLat WGS84 point\n * @returns {Array<number>} Mercator [x, y] point\n */\nfunction convertToMercator(lonLat) {\n    var D2R = Math.PI / 180, \n    // 900913 properties\n    A = 6378137.0, MAXEXTENT = 20037508.342789244;\n    // compensate longitudes passing the 180th meridian\n    // from https://github.com/proj4js/proj4js/blob/master/lib/common/adjust_lon.js\n    var adjusted = Math.abs(lonLat[0]) <= 180 ? lonLat[0] : lonLat[0] - sign(lonLat[0]) * 360;\n    var xy = [\n        A * adjusted * D2R,\n        A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * lonLat[1] * D2R)),\n    ];\n    // if xy value is beyond maxextent (e.g. poles), return maxextent\n    if (xy[0] > MAXEXTENT)\n        xy[0] = MAXEXTENT;\n    if (xy[0] < -MAXEXTENT)\n        xy[0] = -MAXEXTENT;\n    if (xy[1] > MAXEXTENT)\n        xy[1] = MAXEXTENT;\n    if (xy[1] < -MAXEXTENT)\n        xy[1] = -MAXEXTENT;\n    return xy;\n}\n/**\n * Convert 900913 x/y values to lon/lat.\n * (from https://github.com/mapbox/sphericalmercator)\n *\n * @private\n * @param {Array<number>} xy Mercator [x, y] point\n * @returns {Array<number>} WGS84 [lon, lat] point\n */\nfunction convertToWgs84(xy) {\n    // 900913 properties.\n    var R2D = 180 / Math.PI;\n    var A = 6378137.0;\n    return [\n        (xy[0] * R2D) / A,\n        (Math.PI * 0.5 - 2.0 * Math.atan(Math.exp(-xy[1] / A))) * R2D,\n    ];\n}\n/**\n * Returns the sign of the input, or zero\n *\n * @private\n * @param {number} x input\n * @returns {number} -1|0|1 output\n */\nfunction sign(x) {\n    return x < 0 ? -1 : x > 0 ? 1 : 0;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}