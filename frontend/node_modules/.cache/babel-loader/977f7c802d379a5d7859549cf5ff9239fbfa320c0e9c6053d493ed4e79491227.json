{"ast":null,"code":"import { isObject, isNumber, degreesToRadians, polygon } from '@turf/helpers';\nimport rhumbDestination from '@turf/rhumb-destination';\nimport transformRotate from '@turf/transform-rotate';\nimport { getCoord } from '@turf/invariant';\n\n/**\n * Takes a {@link Point} and calculates the ellipse polygon given two semi-axes expressed in variable units and steps for precision.\n *\n * @param {Coord} center center point\n * @param {number} xSemiAxis semi (major) axis of the ellipse along the x-axis\n * @param {number} ySemiAxis semi (minor) axis of the ellipse along the y-axis\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.angle=0] angle of rotation in decimal degrees, positive clockwise\n * @param {Coord} [options.pivot='origin'] point around which the rotation will be performed\n * @param {number} [options.steps=64] number of steps\n * @param {string} [options.units='kilometers'] unit of measurement for axes\n * @param {Object} [options.properties={}] properties\n * @returns {Feature<Polygon>} ellipse polygon\n * @example\n * var center = [-75, 40];\n * var xSemiAxis = 5;\n * var ySemiAxis = 2;\n * var ellipse = turf.ellipse(center, xSemiAxis, ySemiAxis);\n *\n * //addToMap\n * var addToMap = [turf.point(center), ellipse]\n */\nfunction ellipse(center, xSemiAxis, ySemiAxis, options) {\n  // Optional params\n  options = options || {};\n  var steps = options.steps || 64;\n  var units = options.units || \"kilometers\";\n  var angle = options.angle || 0;\n  var pivot = options.pivot || center;\n  var properties = options.properties || center.properties || {};\n\n  // validation\n  if (!center) throw new Error(\"center is required\");\n  if (!xSemiAxis) throw new Error(\"xSemiAxis is required\");\n  if (!ySemiAxis) throw new Error(\"ySemiAxis is required\");\n  if (!isObject(options)) throw new Error(\"options must be an object\");\n  if (!isNumber(steps)) throw new Error(\"steps must be a number\");\n  if (!isNumber(angle)) throw new Error(\"angle must be a number\");\n  var centerCoords = getCoord(center);\n  if (units === \"degrees\") {\n    var angleRad = degreesToRadians(angle);\n  } else {\n    xSemiAxis = rhumbDestination(center, xSemiAxis, 90, {\n      units: units\n    });\n    ySemiAxis = rhumbDestination(center, ySemiAxis, 0, {\n      units: units\n    });\n    xSemiAxis = getCoord(xSemiAxis)[0] - centerCoords[0];\n    ySemiAxis = getCoord(ySemiAxis)[1] - centerCoords[1];\n  }\n  var coordinates = [];\n  for (var i = 0; i < steps; i += 1) {\n    var stepAngle = i * -360 / steps;\n    var x = xSemiAxis * ySemiAxis / Math.sqrt(Math.pow(ySemiAxis, 2) + Math.pow(xSemiAxis, 2) * Math.pow(getTanDeg(stepAngle), 2));\n    var y = xSemiAxis * ySemiAxis / Math.sqrt(Math.pow(xSemiAxis, 2) + Math.pow(ySemiAxis, 2) / Math.pow(getTanDeg(stepAngle), 2));\n    if (stepAngle < -90 && stepAngle >= -270) x = -x;\n    if (stepAngle < -180 && stepAngle >= -360) y = -y;\n    if (units === \"degrees\") {\n      var newx = x * Math.cos(angleRad) + y * Math.sin(angleRad);\n      var newy = y * Math.cos(angleRad) - x * Math.sin(angleRad);\n      x = newx;\n      y = newy;\n    }\n    coordinates.push([x + centerCoords[0], y + centerCoords[1]]);\n  }\n  coordinates.push(coordinates[0]);\n  if (units === \"degrees\") {\n    return polygon([coordinates], properties);\n  } else {\n    return transformRotate(polygon([coordinates], properties), angle, {\n      pivot: pivot\n    });\n  }\n}\n\n/**\n * Get Tan Degrees\n *\n * @private\n * @param {number} deg Degrees\n * @returns {number} Tan Degrees\n */\nfunction getTanDeg(deg) {\n  var rad = deg * Math.PI / 180;\n  return Math.tan(rad);\n}\nexport default ellipse;","map":{"version":3,"names":["isObject","isNumber","degreesToRadians","polygon","rhumbDestination","transformRotate","getCoord","ellipse","center","xSemiAxis","ySemiAxis","options","steps","units","angle","pivot","properties","Error","centerCoords","angleRad","coordinates","i","stepAngle","x","Math","sqrt","pow","getTanDeg","y","newx","cos","sin","newy","push","deg","rad","PI","tan"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/ellipse/dist/es/index.js"],"sourcesContent":["import { isObject, isNumber, degreesToRadians, polygon } from '@turf/helpers';\nimport rhumbDestination from '@turf/rhumb-destination';\nimport transformRotate from '@turf/transform-rotate';\nimport { getCoord } from '@turf/invariant';\n\n/**\n * Takes a {@link Point} and calculates the ellipse polygon given two semi-axes expressed in variable units and steps for precision.\n *\n * @param {Coord} center center point\n * @param {number} xSemiAxis semi (major) axis of the ellipse along the x-axis\n * @param {number} ySemiAxis semi (minor) axis of the ellipse along the y-axis\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.angle=0] angle of rotation in decimal degrees, positive clockwise\n * @param {Coord} [options.pivot='origin'] point around which the rotation will be performed\n * @param {number} [options.steps=64] number of steps\n * @param {string} [options.units='kilometers'] unit of measurement for axes\n * @param {Object} [options.properties={}] properties\n * @returns {Feature<Polygon>} ellipse polygon\n * @example\n * var center = [-75, 40];\n * var xSemiAxis = 5;\n * var ySemiAxis = 2;\n * var ellipse = turf.ellipse(center, xSemiAxis, ySemiAxis);\n *\n * //addToMap\n * var addToMap = [turf.point(center), ellipse]\n */\nfunction ellipse(center, xSemiAxis, ySemiAxis, options) {\n  // Optional params\n  options = options || {};\n  var steps = options.steps || 64;\n  var units = options.units || \"kilometers\";\n  var angle = options.angle || 0;\n  var pivot = options.pivot || center;\n  var properties = options.properties || center.properties || {};\n\n  // validation\n  if (!center) throw new Error(\"center is required\");\n  if (!xSemiAxis) throw new Error(\"xSemiAxis is required\");\n  if (!ySemiAxis) throw new Error(\"ySemiAxis is required\");\n  if (!isObject(options)) throw new Error(\"options must be an object\");\n  if (!isNumber(steps)) throw new Error(\"steps must be a number\");\n  if (!isNumber(angle)) throw new Error(\"angle must be a number\");\n\n  var centerCoords = getCoord(center);\n  if (units === \"degrees\") {\n    var angleRad = degreesToRadians(angle);\n  } else {\n    xSemiAxis = rhumbDestination(center, xSemiAxis, 90, { units: units });\n    ySemiAxis = rhumbDestination(center, ySemiAxis, 0, { units: units });\n    xSemiAxis = getCoord(xSemiAxis)[0] - centerCoords[0];\n    ySemiAxis = getCoord(ySemiAxis)[1] - centerCoords[1];\n  }\n\n  var coordinates = [];\n  for (var i = 0; i < steps; i += 1) {\n    var stepAngle = (i * -360) / steps;\n    var x =\n      (xSemiAxis * ySemiAxis) /\n      Math.sqrt(\n        Math.pow(ySemiAxis, 2) +\n          Math.pow(xSemiAxis, 2) * Math.pow(getTanDeg(stepAngle), 2)\n      );\n    var y =\n      (xSemiAxis * ySemiAxis) /\n      Math.sqrt(\n        Math.pow(xSemiAxis, 2) +\n          Math.pow(ySemiAxis, 2) / Math.pow(getTanDeg(stepAngle), 2)\n      );\n\n    if (stepAngle < -90 && stepAngle >= -270) x = -x;\n    if (stepAngle < -180 && stepAngle >= -360) y = -y;\n    if (units === \"degrees\") {\n      var newx = x * Math.cos(angleRad) + y * Math.sin(angleRad);\n      var newy = y * Math.cos(angleRad) - x * Math.sin(angleRad);\n      x = newx;\n      y = newy;\n    }\n\n    coordinates.push([x + centerCoords[0], y + centerCoords[1]]);\n  }\n  coordinates.push(coordinates[0]);\n  if (units === \"degrees\") {\n    return polygon([coordinates], properties);\n  } else {\n    return transformRotate(polygon([coordinates], properties), angle, {\n      pivot: pivot,\n    });\n  }\n}\n\n/**\n * Get Tan Degrees\n *\n * @private\n * @param {number} deg Degrees\n * @returns {number} Tan Degrees\n */\nfunction getTanDeg(deg) {\n  var rad = (deg * Math.PI) / 180;\n  return Math.tan(rad);\n}\n\nexport default ellipse;\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,QAAQ,EAAEC,gBAAgB,EAAEC,OAAO,QAAQ,eAAe;AAC7E,OAAOC,gBAAgB,MAAM,yBAAyB;AACtD,OAAOC,eAAe,MAAM,wBAAwB;AACpD,SAASC,QAAQ,QAAQ,iBAAiB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,MAAM,EAAEC,SAAS,EAAEC,SAAS,EAAEC,OAAO,EAAE;EACtD;EACAA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAIC,KAAK,GAAGD,OAAO,CAACC,KAAK,IAAI,EAAE;EAC/B,IAAIC,KAAK,GAAGF,OAAO,CAACE,KAAK,IAAI,YAAY;EACzC,IAAIC,KAAK,GAAGH,OAAO,CAACG,KAAK,IAAI,CAAC;EAC9B,IAAIC,KAAK,GAAGJ,OAAO,CAACI,KAAK,IAAIP,MAAM;EACnC,IAAIQ,UAAU,GAAGL,OAAO,CAACK,UAAU,IAAIR,MAAM,CAACQ,UAAU,IAAI,CAAC,CAAC;;EAE9D;EACA,IAAI,CAACR,MAAM,EAAE,MAAM,IAAIS,KAAK,CAAC,oBAAoB,CAAC;EAClD,IAAI,CAACR,SAAS,EAAE,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;EACxD,IAAI,CAACP,SAAS,EAAE,MAAM,IAAIO,KAAK,CAAC,uBAAuB,CAAC;EACxD,IAAI,CAACjB,QAAQ,CAACW,OAAO,CAAC,EAAE,MAAM,IAAIM,KAAK,CAAC,2BAA2B,CAAC;EACpE,IAAI,CAAChB,QAAQ,CAACW,KAAK,CAAC,EAAE,MAAM,IAAIK,KAAK,CAAC,wBAAwB,CAAC;EAC/D,IAAI,CAAChB,QAAQ,CAACa,KAAK,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;EAE/D,IAAIC,YAAY,GAAGZ,QAAQ,CAACE,MAAM,CAAC;EACnC,IAAIK,KAAK,KAAK,SAAS,EAAE;IACvB,IAAIM,QAAQ,GAAGjB,gBAAgB,CAACY,KAAK,CAAC;EACxC,CAAC,MAAM;IACLL,SAAS,GAAGL,gBAAgB,CAACI,MAAM,EAAEC,SAAS,EAAE,EAAE,EAAE;MAAEI,KAAK,EAAEA;IAAM,CAAC,CAAC;IACrEH,SAAS,GAAGN,gBAAgB,CAACI,MAAM,EAAEE,SAAS,EAAE,CAAC,EAAE;MAAEG,KAAK,EAAEA;IAAM,CAAC,CAAC;IACpEJ,SAAS,GAAGH,QAAQ,CAACG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAGS,YAAY,CAAC,CAAC,CAAC;IACpDR,SAAS,GAAGJ,QAAQ,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC,GAAGQ,YAAY,CAAC,CAAC,CAAC;EACtD;EAEA,IAAIE,WAAW,GAAG,EAAE;EACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,EAAES,CAAC,IAAI,CAAC,EAAE;IACjC,IAAIC,SAAS,GAAID,CAAC,GAAG,CAAC,GAAG,GAAIT,KAAK;IAClC,IAAIW,CAAC,GACFd,SAAS,GAAGC,SAAS,GACtBc,IAAI,CAACC,IAAI,CACPD,IAAI,CAACE,GAAG,CAAChB,SAAS,EAAE,CAAC,CAAC,GACpBc,IAAI,CAACE,GAAG,CAACjB,SAAS,EAAE,CAAC,CAAC,GAAGe,IAAI,CAACE,GAAG,CAACC,SAAS,CAACL,SAAS,CAAC,EAAE,CAAC,CAC7D,CAAC;IACH,IAAIM,CAAC,GACFnB,SAAS,GAAGC,SAAS,GACtBc,IAAI,CAACC,IAAI,CACPD,IAAI,CAACE,GAAG,CAACjB,SAAS,EAAE,CAAC,CAAC,GACpBe,IAAI,CAACE,GAAG,CAAChB,SAAS,EAAE,CAAC,CAAC,GAAGc,IAAI,CAACE,GAAG,CAACC,SAAS,CAACL,SAAS,CAAC,EAAE,CAAC,CAC7D,CAAC;IAEH,IAAIA,SAAS,GAAG,CAAC,EAAE,IAAIA,SAAS,IAAI,CAAC,GAAG,EAAEC,CAAC,GAAG,CAACA,CAAC;IAChD,IAAID,SAAS,GAAG,CAAC,GAAG,IAAIA,SAAS,IAAI,CAAC,GAAG,EAAEM,CAAC,GAAG,CAACA,CAAC;IACjD,IAAIf,KAAK,KAAK,SAAS,EAAE;MACvB,IAAIgB,IAAI,GAAGN,CAAC,GAAGC,IAAI,CAACM,GAAG,CAACX,QAAQ,CAAC,GAAGS,CAAC,GAAGJ,IAAI,CAACO,GAAG,CAACZ,QAAQ,CAAC;MAC1D,IAAIa,IAAI,GAAGJ,CAAC,GAAGJ,IAAI,CAACM,GAAG,CAACX,QAAQ,CAAC,GAAGI,CAAC,GAAGC,IAAI,CAACO,GAAG,CAACZ,QAAQ,CAAC;MAC1DI,CAAC,GAAGM,IAAI;MACRD,CAAC,GAAGI,IAAI;IACV;IAEAZ,WAAW,CAACa,IAAI,CAAC,CAACV,CAAC,GAAGL,YAAY,CAAC,CAAC,CAAC,EAAEU,CAAC,GAAGV,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9D;EACAE,WAAW,CAACa,IAAI,CAACb,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,IAAIP,KAAK,KAAK,SAAS,EAAE;IACvB,OAAOV,OAAO,CAAC,CAACiB,WAAW,CAAC,EAAEJ,UAAU,CAAC;EAC3C,CAAC,MAAM;IACL,OAAOX,eAAe,CAACF,OAAO,CAAC,CAACiB,WAAW,CAAC,EAAEJ,UAAU,CAAC,EAAEF,KAAK,EAAE;MAChEC,KAAK,EAAEA;IACT,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASY,SAASA,CAACO,GAAG,EAAE;EACtB,IAAIC,GAAG,GAAID,GAAG,GAAGV,IAAI,CAACY,EAAE,GAAI,GAAG;EAC/B,OAAOZ,IAAI,CAACa,GAAG,CAACF,GAAG,CAAC;AACtB;AAEA,eAAe5B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}