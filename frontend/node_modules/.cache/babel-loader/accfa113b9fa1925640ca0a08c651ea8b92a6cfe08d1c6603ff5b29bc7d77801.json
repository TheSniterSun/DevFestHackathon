{"ast":null,"code":"import turfbbox from \"@turf/bbox\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport rbush from \"rbush\";\n/**\n * Merges a specified property from a FeatureCollection of points into a\n * FeatureCollection of polygons. Given an `inProperty` on points and an `outProperty`\n * for polygons, this finds every point that lies within each polygon, collects the\n * `inProperty` values from those points, and adds them as an array to `outProperty`\n * on the polygon.\n *\n * @name collect\n * @param {FeatureCollection<Polygon>} polygons polygons with values on which to aggregate\n * @param {FeatureCollection<Point>} points points to be aggregated\n * @param {string} inProperty property to be nested from\n * @param {string} outProperty property to be nested into\n * @returns {FeatureCollection<Polygon>} polygons with properties listed based on `outField`\n * @example\n * var poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\n * var poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\n * var polyFC = turf.featureCollection([poly1, poly2]);\n * var pt1 = turf.point([5,5], {population: 200});\n * var pt2 = turf.point([1,3], {population: 600});\n * var pt3 = turf.point([14,2], {population: 100});\n * var pt4 = turf.point([13,1], {population: 200});\n * var pt5 = turf.point([19,7], {population: 300});\n * var pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);\n * var collected = turf.collect(polyFC, pointFC, 'population', 'values');\n * var values = collected.features[0].properties.values\n * //=values => [200, 600]\n *\n * //addToMap\n * var addToMap = [pointFC, collected]\n */\nfunction collect(polygons, points, inProperty, outProperty) {\n  var rtree = rbush(6);\n  var treeItems = points.features.map(function (item) {\n    var _a;\n    return {\n      minX: item.geometry.coordinates[0],\n      minY: item.geometry.coordinates[1],\n      maxX: item.geometry.coordinates[0],\n      maxY: item.geometry.coordinates[1],\n      property: (_a = item.properties) === null || _a === void 0 ? void 0 : _a[inProperty]\n    };\n  });\n  rtree.load(treeItems);\n  polygons.features.forEach(function (poly) {\n    if (!poly.properties) {\n      poly.properties = {};\n    }\n    var bbox = turfbbox(poly);\n    var potentialPoints = rtree.search({\n      minX: bbox[0],\n      minY: bbox[1],\n      maxX: bbox[2],\n      maxY: bbox[3]\n    });\n    var values = [];\n    potentialPoints.forEach(function (pt) {\n      if (booleanPointInPolygon([pt.minX, pt.minY], poly)) {\n        values.push(pt.property);\n      }\n    });\n    poly.properties[outProperty] = values;\n  });\n  return polygons;\n}\nexport default collect;","map":{"version":3,"names":["turfbbox","booleanPointInPolygon","rbush","collect","polygons","points","inProperty","outProperty","rtree","treeItems","features","map","item","_a","minX","geometry","coordinates","minY","maxX","maxY","property","properties","load","forEach","poly","bbox","potentialPoints","search","values","pt","push"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/collect/dist/es/index.js"],"sourcesContent":["import turfbbox from \"@turf/bbox\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport rbush from \"rbush\";\n/**\n * Merges a specified property from a FeatureCollection of points into a\n * FeatureCollection of polygons. Given an `inProperty` on points and an `outProperty`\n * for polygons, this finds every point that lies within each polygon, collects the\n * `inProperty` values from those points, and adds them as an array to `outProperty`\n * on the polygon.\n *\n * @name collect\n * @param {FeatureCollection<Polygon>} polygons polygons with values on which to aggregate\n * @param {FeatureCollection<Point>} points points to be aggregated\n * @param {string} inProperty property to be nested from\n * @param {string} outProperty property to be nested into\n * @returns {FeatureCollection<Polygon>} polygons with properties listed based on `outField`\n * @example\n * var poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\n * var poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\n * var polyFC = turf.featureCollection([poly1, poly2]);\n * var pt1 = turf.point([5,5], {population: 200});\n * var pt2 = turf.point([1,3], {population: 600});\n * var pt3 = turf.point([14,2], {population: 100});\n * var pt4 = turf.point([13,1], {population: 200});\n * var pt5 = turf.point([19,7], {population: 300});\n * var pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);\n * var collected = turf.collect(polyFC, pointFC, 'population', 'values');\n * var values = collected.features[0].properties.values\n * //=values => [200, 600]\n *\n * //addToMap\n * var addToMap = [pointFC, collected]\n */\nfunction collect(polygons, points, inProperty, outProperty) {\n    var rtree = rbush(6);\n    var treeItems = points.features.map(function (item) {\n        var _a;\n        return {\n            minX: item.geometry.coordinates[0],\n            minY: item.geometry.coordinates[1],\n            maxX: item.geometry.coordinates[0],\n            maxY: item.geometry.coordinates[1],\n            property: (_a = item.properties) === null || _a === void 0 ? void 0 : _a[inProperty],\n        };\n    });\n    rtree.load(treeItems);\n    polygons.features.forEach(function (poly) {\n        if (!poly.properties) {\n            poly.properties = {};\n        }\n        var bbox = turfbbox(poly);\n        var potentialPoints = rtree.search({\n            minX: bbox[0],\n            minY: bbox[1],\n            maxX: bbox[2],\n            maxY: bbox[3],\n        });\n        var values = [];\n        potentialPoints.forEach(function (pt) {\n            if (booleanPointInPolygon([pt.minX, pt.minY], poly)) {\n                values.push(pt.property);\n            }\n        });\n        poly.properties[outProperty] = values;\n    });\n    return polygons;\n}\nexport default collect;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AACjC,OAAOC,qBAAqB,MAAM,gCAAgC;AAClE,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,UAAU,EAAEC,WAAW,EAAE;EACxD,IAAIC,KAAK,GAAGN,KAAK,CAAC,CAAC,CAAC;EACpB,IAAIO,SAAS,GAAGJ,MAAM,CAACK,QAAQ,CAACC,GAAG,CAAC,UAAUC,IAAI,EAAE;IAChD,IAAIC,EAAE;IACN,OAAO;MACHC,IAAI,EAAEF,IAAI,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;MAClCC,IAAI,EAAEL,IAAI,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;MAClCE,IAAI,EAAEN,IAAI,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;MAClCG,IAAI,EAAEP,IAAI,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;MAClCI,QAAQ,EAAE,CAACP,EAAE,GAAGD,IAAI,CAACS,UAAU,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACP,UAAU;IACvF,CAAC;EACL,CAAC,CAAC;EACFE,KAAK,CAACc,IAAI,CAACb,SAAS,CAAC;EACrBL,QAAQ,CAACM,QAAQ,CAACa,OAAO,CAAC,UAAUC,IAAI,EAAE;IACtC,IAAI,CAACA,IAAI,CAACH,UAAU,EAAE;MAClBG,IAAI,CAACH,UAAU,GAAG,CAAC,CAAC;IACxB;IACA,IAAII,IAAI,GAAGzB,QAAQ,CAACwB,IAAI,CAAC;IACzB,IAAIE,eAAe,GAAGlB,KAAK,CAACmB,MAAM,CAAC;MAC/Bb,IAAI,EAAEW,IAAI,CAAC,CAAC,CAAC;MACbR,IAAI,EAAEQ,IAAI,CAAC,CAAC,CAAC;MACbP,IAAI,EAAEO,IAAI,CAAC,CAAC,CAAC;MACbN,IAAI,EAAEM,IAAI,CAAC,CAAC;IAChB,CAAC,CAAC;IACF,IAAIG,MAAM,GAAG,EAAE;IACfF,eAAe,CAACH,OAAO,CAAC,UAAUM,EAAE,EAAE;MAClC,IAAI5B,qBAAqB,CAAC,CAAC4B,EAAE,CAACf,IAAI,EAAEe,EAAE,CAACZ,IAAI,CAAC,EAAEO,IAAI,CAAC,EAAE;QACjDI,MAAM,CAACE,IAAI,CAACD,EAAE,CAACT,QAAQ,CAAC;MAC5B;IACJ,CAAC,CAAC;IACFI,IAAI,CAACH,UAAU,CAACd,WAAW,CAAC,GAAGqB,MAAM;EACzC,CAAC,CAAC;EACF,OAAOxB,QAAQ;AACnB;AACA,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}