{"ast":null,"code":"var _jsxFileName = \"/Users/brandonpae/Desktop/secra-code/frontend/src/components/chat/Event.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from '../NavBar';\nimport styles from './chat.module.css';\nimport axios from 'axios'; // Import Axios\n\nimport LoadingText from './AssistantResponse';\nimport AssistantResponse from './AssistantResponse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL = 'auth'; // change as needed\n\nfunction Event(props) {\n  _s();\n  // <Event key={index} timeInfo={timeObj} summary={data.summary} location={data.location} timezone={data.timezone} />\n\n  const timeInfo = props.timeInfo;\n  const summary = props.summary;\n  const location = props.location;\n  const timezone = props.timezone;\n  const [messages, setMessages] = useState(Array(0)); // empty array to start\n  const navigate = useNavigate();\n  const username = props.username;\n\n  // FOR THE QUERY FORM\n  const [query, setQuery] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const submittedQuery = false;\n  let gpt_response = \"\";\n\n  // use an array of dictionaries\n  // for each dict:\n  // prop 1: message itself\n  // prop 2: loc (left vs. right for assistant vs. user)\n\n  function onTextSubmit(new_message) {\n    setMessages(messages => [...messages, new_message] // this message is a dict (has text, sender as 2 fields)\n    );\n  }\n  ;\n  function submitQuery(event) {\n    event.preventDefault(); // prevent default form submission behavior (because we want to connect to BE endpoint)\n\n    setResponse(\"generating\"); // \"Generating response ... \"\n\n    axios({\n      method: \"POST\",\n      url: \"/gpt/submit\",\n      // endpoint in backend to login user and return access token\n      // remember, users module is just base url (e.g. localhost:5000/login but other modules are not\n      // e.g. localhost:5000/gpt/test)\n      // for some reason, proxy not working\n      baseURL: 'http://127.0.0.1:5000',\n      // for some reason, throws error with localhost\n      headers: {\n        Authorization: 'Bearer ' + props.token,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        username: username,\n        query: query\n      }\n    }).then(response => {\n      const data = response.data; // need to access the actual JSON data returned\n\n      // console.log(response);\n      console.log(data[\"success\"]);\n\n      // data is the JSON object returned by endpoint \"chat/submit\"\n      gpt_response = data.response;\n      console.log(gpt_response);\n\n      // setResponse(gpt_response);\n      setResponse(\"\"); // should be empty now\n\n      // NOW PARSE THE JSON TO OBTAIN THE RELEVANT EVENT INFORMATION:\n\n      let times = gpt_response['times']; // array of JSON objects\n      let num_times = times.length;\n      if (num_times === 0) {\n        throw new Error(\"No suggested times found\");\n      }\n\n      // OTHER EVENT PARAMS \n      let timezone = gpt_response['timezone'];\n      let summary = gpt_response['summary'];\n      let loc = gpt_response['location']; // location is a keyword in JS\n      let recurrence = gpt_response['recurrence'];\n\n      // iterate over the times and pass them into components to display\n\n      let start = \"\";\n      let end = \"\";\n      let date = \"\";\n      let time = \"\";\n\n      // edit this with React later\n      for (let i = 0; i < num_times; i++) {\n        time = times[i];\n        start = time['start'];\n        end = time['end'];\n        date = time['date'];\n        let display_tz = \"\";\n        if (timezone == \"US/Eastern\" || timezone == \"America/New_York\" || timezone == \"ET\") {\n          // handle only ET for now\n          display_tz = \"ET\";\n        }\n        let formatted_time = start + \" to \" + end + \" \" + display_tz;\n        console.log(\"Option \" + (i + 1) + \":\\nTime: \" + formatted_time + \"\\nDate: \" + date);\n      }\n\n      // pass the JSON info to the Assistant response\n\n      /*\n       Once GPT returns the list of times, we want to render them as separate options / components\n      All events should be similar/the same, except start, end, date\n      Create a new component with these fields, then just show them side by side\n      We need a way to figure out how to respond back with which option was clicked\n      Specifically, \n       */\n\n      // response is a JSON string, convert to JSON object\n      // gpt_response = JSON.parse(gpt_response)\n    }).catch(error => {\n      if (error.response) {\n        console.log(error.response);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n    });\n  }\n  function handleQueryChange(event) {\n    setQuery(event.target.value);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: styles.header,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'blue'\n          },\n          id: \"username\",\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 36\n        }, this), \"'s Assistant\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"queryForm\",\n        onSubmit: submitQuery,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: query,\n          onChange: handleQueryChange,\n          name: \"query\",\n          id: \"query\",\n          placeholder: \"Schedule a meeting...\",\n          className: styles.box,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"submitButton\",\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AssistantResponse, {\n        response: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: styles.calendarForm,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          name: \"choice\",\n          id: \"choice\",\n          placeholder: \"Choice\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Add to my Calendar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      align: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          width: '800px',\n          height: '600px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: \"https://calendar.google.com/calendar/embed?src=tester1.secra%40gmail.com&ctz=America%2FNew_York\",\n          title: \"User's Google Calendar\",\n          style: {\n            border: 0,\n            width: '100%',\n            height: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            // backgroundColor: 'rgba(173, 216, 230, 0.5)', // Light blue color with opacity\n            pointerEvents: 'none' // To allow interaction with the iframe\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Event, \"CNps93lv6wed+4at0YU+HozeweU=\", false, function () {\n  return [useNavigate];\n});\n_c = Event;\nexport default Event;\nvar _c;\n$RefreshReg$(_c, \"Event\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useNavigate","NavBar","styles","axios","LoadingText","AssistantResponse","jsxDEV","_jsxDEV","Fragment","_Fragment","URL","Event","props","_s","timeInfo","summary","location","timezone","messages","setMessages","Array","navigate","username","query","setQuery","response","setResponse","submittedQuery","gpt_response","onTextSubmit","new_message","submitQuery","event","preventDefault","method","url","baseURL","headers","Authorization","token","data","then","console","log","times","num_times","length","Error","loc","recurrence","start","end","date","time","i","display_tz","formatted_time","catch","error","status","handleQueryChange","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","className","container","id","header","style","color","onSubmit","type","onChange","name","placeholder","box","required","calendarForm","align","position","width","height","src","title","border","top","left","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/brandonpae/Desktop/secra-code/frontend/src/components/chat/Event.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\n\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from '../NavBar';\n\nimport styles from './chat.module.css';\nimport axios from 'axios'; // Import Axios\n\nimport LoadingText from './AssistantResponse';\nimport AssistantResponse from './AssistantResponse';\n\nconst URL = 'auth'; // change as needed\n\nfunction Event(props) {\n    // <Event key={index} timeInfo={timeObj} summary={data.summary} location={data.location} timezone={data.timezone} />\n\n    const timeInfo = props.timeInfo;\n    const summary = props.summary;\n    const location = props.location;\n    const timezone = props.timezone;\n\n    const [messages, setMessages] = useState(Array(0)); // empty array to start\n    const navigate = useNavigate();\n    const username = props.username;\n    \n    // FOR THE QUERY FORM\n    const [query, setQuery] = useState(\"\");\n    const [response, setResponse] = useState(\"\");\n\n    const submittedQuery = false;\n    let gpt_response = \"\";\n\n    // use an array of dictionaries\n    // for each dict:\n    // prop 1: message itself\n    // prop 2: loc (left vs. right for assistant vs. user)\n\n    function onTextSubmit(new_message) {\n        setMessages(messages => (\n            [...messages, new_message] // this message is a dict (has text, sender as 2 fields)\n        ));\n    };\n\n    function submitQuery(event) {\n        event.preventDefault() // prevent default form submission behavior (because we want to connect to BE endpoint)\n        \n        setResponse(\"generating\"); // \"Generating response ... \"\n\n        axios({\n          method: \"POST\",\n          url:\"/gpt/submit\", // endpoint in backend to login user and return access token\n          // remember, users module is just base url (e.g. localhost:5000/login but other modules are not\n          // e.g. localhost:5000/gpt/test)\n          // for some reason, proxy not working\n          baseURL: 'http://127.0.0.1:5000', // for some reason, throws error with localhost\n          headers: {\n            Authorization: 'Bearer ' + props.token,\n            'Content-Type': 'application/json'\n          },\n          \n          data: {\n            username: username,\n            query: query,\n          }\n\n        })\n        .then((response) => {\n\n            const data = response.data; // need to access the actual JSON data returned\n\n            // console.log(response);\n            console.log(data[\"success\"])\n\n            // data is the JSON object returned by endpoint \"chat/submit\"\n            gpt_response = data.response;\n\n            console.log(gpt_response)\n\n            // setResponse(gpt_response);\n            setResponse(\"\") // should be empty now\n\n            // NOW PARSE THE JSON TO OBTAIN THE RELEVANT EVENT INFORMATION:\n            \n            let times = gpt_response['times']; // array of JSON objects\n            let num_times = times.length;\n\n            if (num_times === 0) {\n                throw new Error(\"No suggested times found\");\n            }\n\n            // OTHER EVENT PARAMS \n            let timezone = gpt_response['timezone']\n            let summary = gpt_response['summary'];\n            let loc = gpt_response['location']; // location is a keyword in JS\n            let recurrence = gpt_response['recurrence'];\n\n            // iterate over the times and pass them into components to display\n            \n            let start = \"\";\n            let end = \"\";\n            let date = \"\";\n\n            let time = \"\";\n\n            // edit this with React later\n            for (let i = 0; i < num_times; i++) {\n                time = times[i]\n\n                start = time['start'];\n                end = time['end'];\n                date = time['date'];\n\n                let display_tz = \"\";\n                \n                if (timezone == \"US/Eastern\" || timezone == \"America/New_York\" || timezone == \"ET\") { // handle only ET for now\n                    display_tz = \"ET\";\n                }\n\n                let formatted_time = start + \" to \" + end + \" \" + display_tz;\n\n                console.log(\"Option \" + (i + 1) + \":\\nTime: \" + formatted_time + \"\\nDate: \" + date);\n            }\n\n            // pass the JSON info to the Assistant response\n\n\n            /*\n\n            Once GPT returns the list of times, we want to render them as separate options / components\n            All events should be similar/the same, except start, end, date\n            Create a new component with these fields, then just show them side by side\n            We need a way to figure out how to respond back with which option was clicked\n            Specifically, \n\n            */\n\n\n            // response is a JSON string, convert to JSON object\n            // gpt_response = JSON.parse(gpt_response)\n\n        }).catch((error) => {\n          if (error.response) {\n            console.log(error.response)\n            console.log(error.response.status)\n            console.log(error.response.headers)\n            }\n        })\n    }\n\n    function handleQueryChange(event) {\n        setQuery(event.target.value);\n    }\n\n    return (\n        <>  \n        <div>\n\n        </div>\n        <div className={styles.container}>\n            <h1 id={styles.header}><span style={{color: 'blue'}} id=\"username\">{username}</span>'s Assistant</h1>\n            \n            <br />\n            \n            <h3>Your Message</h3>\n\n            <br />\n\n            <form id=\"queryForm\" onSubmit={submitQuery}>\n                <input type=\"text\" value={query} onChange={handleQueryChange} name=\"query\" id=\"query\" placeholder=\"Schedule a meeting...\" className={styles.box} required></input>\n                <input id=\"submitButton\" type=\"submit\" value=\"Submit\" />\n            </form>\n        \n            {/* GPT RESPONSE HERE */}\n\n            {/* Once GPT returns a response, we use components (for Event) to represent the times */}\n            <AssistantResponse response={response} />\n\n        </div>\n\n        <div className={styles.container}>\n            <h3>Your Calendar</h3>\n\n            <form id={styles.calendarForm}>\n                <textarea type=\"text\" name=\"choice\" id=\"choice\" placeholder=\"Choice\" required></textarea>\n                <input type=\"submit\" value=\"Add to my Calendar\" />\n            </form>\n        </div>\n        \n        {/*-- From tester1.secra calendar */}\n        <div align=\"center\">\n\n        <div style={{ position: 'relative', width: '800px', height: '600px' }}>\n\n        <iframe \n            src=\"https://calendar.google.com/calendar/embed?src=tester1.secra%40gmail.com&ctz=America%2FNew_York\" \n            title=\"User's Google Calendar\" \n            style={{ border: 0, width: '100%', height: '100%' }} >\n        </iframe>\n\n        <div style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            // backgroundColor: 'rgba(173, 216, 230, 0.5)', // Light blue color with opacity\n            pointerEvents: 'none' // To allow interaction with the iframe\n        }}></div>\n\n        </div>\n\n\n        </div>\n        </>\n    );\n}\n\nexport default Event;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}