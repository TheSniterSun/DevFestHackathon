{"ast":null,"code":"import { coordEach } from \"@turf/meta\";\n/**\n * Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.\n *\n * @name truncate\n * @param {GeoJSON} geojson any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection.\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.precision=6] coordinate decimal precision\n * @param {number} [options.coordinates=3] maximum number of coordinates (primarly used to remove z coordinates)\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} layer with truncated geometry\n * @example\n * var point = turf.point([\n *     70.46923055566859,\n *     58.11088890802906,\n *     1508\n * ]);\n * var options = {precision: 3, coordinates: 2};\n * var truncated = turf.truncate(point, options);\n * //=truncated.geometry.coordinates => [70.469, 58.111]\n *\n * //addToMap\n * var addToMap = [truncated];\n */\nfunction truncate(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // Optional parameters\n  var precision = options.precision;\n  var coordinates = options.coordinates;\n  var mutate = options.mutate;\n  // default params\n  precision = precision === undefined || precision === null || isNaN(precision) ? 6 : precision;\n  coordinates = coordinates === undefined || coordinates === null || isNaN(coordinates) ? 3 : coordinates;\n  // validation\n  if (!geojson) throw new Error(\"<geojson> is required\");\n  if (typeof precision !== \"number\") throw new Error(\"<precision> must be a number\");\n  if (typeof coordinates !== \"number\") throw new Error(\"<coordinates> must be a number\");\n  // prevent input mutation\n  if (mutate === false || mutate === undefined) geojson = JSON.parse(JSON.stringify(geojson));\n  var factor = Math.pow(10, precision);\n  // Truncate Coordinates\n  coordEach(geojson, function (coords) {\n    truncateCoords(coords, factor, coordinates);\n  });\n  return geojson;\n}\n/**\n * Truncate Coordinates - Mutates coordinates in place\n *\n * @private\n * @param {Array<any>} coords Geometry Coordinates\n * @param {number} factor rounding factor for coordinate decimal precision\n * @param {number} coordinates maximum number of coordinates (primarly used to remove z coordinates)\n * @returns {Array<any>} mutated coordinates\n */\nfunction truncateCoords(coords, factor, coordinates) {\n  // Remove extra coordinates (usually elevation coordinates and more)\n  if (coords.length > coordinates) coords.splice(coordinates, coords.length);\n  // Truncate coordinate decimals\n  for (var i = 0; i < coords.length; i++) {\n    coords[i] = Math.round(coords[i] * factor) / factor;\n  }\n  return coords;\n}\nexport default truncate;","map":{"version":3,"names":["coordEach","truncate","geojson","options","precision","coordinates","mutate","undefined","isNaN","Error","JSON","parse","stringify","factor","Math","pow","coords","truncateCoords","length","splice","i","round"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/truncate/dist/es/index.js"],"sourcesContent":["import { coordEach } from \"@turf/meta\";\n/**\n * Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.\n *\n * @name truncate\n * @param {GeoJSON} geojson any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection.\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.precision=6] coordinate decimal precision\n * @param {number} [options.coordinates=3] maximum number of coordinates (primarly used to remove z coordinates)\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} layer with truncated geometry\n * @example\n * var point = turf.point([\n *     70.46923055566859,\n *     58.11088890802906,\n *     1508\n * ]);\n * var options = {precision: 3, coordinates: 2};\n * var truncated = turf.truncate(point, options);\n * //=truncated.geometry.coordinates => [70.469, 58.111]\n *\n * //addToMap\n * var addToMap = [truncated];\n */\nfunction truncate(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    var precision = options.precision;\n    var coordinates = options.coordinates;\n    var mutate = options.mutate;\n    // default params\n    precision =\n        precision === undefined || precision === null || isNaN(precision)\n            ? 6\n            : precision;\n    coordinates =\n        coordinates === undefined || coordinates === null || isNaN(coordinates)\n            ? 3\n            : coordinates;\n    // validation\n    if (!geojson)\n        throw new Error(\"<geojson> is required\");\n    if (typeof precision !== \"number\")\n        throw new Error(\"<precision> must be a number\");\n    if (typeof coordinates !== \"number\")\n        throw new Error(\"<coordinates> must be a number\");\n    // prevent input mutation\n    if (mutate === false || mutate === undefined)\n        geojson = JSON.parse(JSON.stringify(geojson));\n    var factor = Math.pow(10, precision);\n    // Truncate Coordinates\n    coordEach(geojson, function (coords) {\n        truncateCoords(coords, factor, coordinates);\n    });\n    return geojson;\n}\n/**\n * Truncate Coordinates - Mutates coordinates in place\n *\n * @private\n * @param {Array<any>} coords Geometry Coordinates\n * @param {number} factor rounding factor for coordinate decimal precision\n * @param {number} coordinates maximum number of coordinates (primarly used to remove z coordinates)\n * @returns {Array<any>} mutated coordinates\n */\nfunction truncateCoords(coords, factor, coordinates) {\n    // Remove extra coordinates (usually elevation coordinates and more)\n    if (coords.length > coordinates)\n        coords.splice(coordinates, coords.length);\n    // Truncate coordinate decimals\n    for (var i = 0; i < coords.length; i++) {\n        coords[i] = Math.round(coords[i] * factor) / factor;\n    }\n    return coords;\n}\nexport default truncate;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,OAAO,EAAEC,OAAO,EAAE;EAChC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC;EACA,IAAIC,SAAS,GAAGD,OAAO,CAACC,SAAS;EACjC,IAAIC,WAAW,GAAGF,OAAO,CAACE,WAAW;EACrC,IAAIC,MAAM,GAAGH,OAAO,CAACG,MAAM;EAC3B;EACAF,SAAS,GACLA,SAAS,KAAKG,SAAS,IAAIH,SAAS,KAAK,IAAI,IAAII,KAAK,CAACJ,SAAS,CAAC,GAC3D,CAAC,GACDA,SAAS;EACnBC,WAAW,GACPA,WAAW,KAAKE,SAAS,IAAIF,WAAW,KAAK,IAAI,IAAIG,KAAK,CAACH,WAAW,CAAC,GACjE,CAAC,GACDA,WAAW;EACrB;EACA,IAAI,CAACH,OAAO,EACR,MAAM,IAAIO,KAAK,CAAC,uBAAuB,CAAC;EAC5C,IAAI,OAAOL,SAAS,KAAK,QAAQ,EAC7B,MAAM,IAAIK,KAAK,CAAC,8BAA8B,CAAC;EACnD,IAAI,OAAOJ,WAAW,KAAK,QAAQ,EAC/B,MAAM,IAAII,KAAK,CAAC,gCAAgC,CAAC;EACrD;EACA,IAAIH,MAAM,KAAK,KAAK,IAAIA,MAAM,KAAKC,SAAS,EACxCL,OAAO,GAAGQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACV,OAAO,CAAC,CAAC;EACjD,IAAIW,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEX,SAAS,CAAC;EACpC;EACAJ,SAAS,CAACE,OAAO,EAAE,UAAUc,MAAM,EAAE;IACjCC,cAAc,CAACD,MAAM,EAAEH,MAAM,EAAER,WAAW,CAAC;EAC/C,CAAC,CAAC;EACF,OAAOH,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASe,cAAcA,CAACD,MAAM,EAAEH,MAAM,EAAER,WAAW,EAAE;EACjD;EACA,IAAIW,MAAM,CAACE,MAAM,GAAGb,WAAW,EAC3BW,MAAM,CAACG,MAAM,CAACd,WAAW,EAAEW,MAAM,CAACE,MAAM,CAAC;EAC7C;EACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACE,MAAM,EAAEE,CAAC,EAAE,EAAE;IACpCJ,MAAM,CAACI,CAAC,CAAC,GAAGN,IAAI,CAACO,KAAK,CAACL,MAAM,CAACI,CAAC,CAAC,GAAGP,MAAM,CAAC,GAAGA,MAAM;EACvD;EACA,OAAOG,MAAM;AACjB;AACA,eAAef,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}