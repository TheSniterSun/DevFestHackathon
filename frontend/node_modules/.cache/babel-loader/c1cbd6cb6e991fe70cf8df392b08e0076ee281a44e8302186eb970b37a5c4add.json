{"ast":null,"code":"import { geomEach, coordEach } from \"@turf/meta\";\nimport { isNumber, point } from \"@turf/helpers\";\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the mean center. Can be weighted.\n *\n * @name centerMean\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point\n * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point\n * @param {Object} [options.id={}] Translate GeoJSON Id to Point\n * @param {string} [options.weight] the property name used to weight the center\n * @returns {Feature<Point>} a Point feature at the mean center point of all input features\n * @example\n * var features = turf.featureCollection([\n *   turf.point([-97.522259, 35.4691], {value: 10}),\n *   turf.point([-97.502754, 35.463455], {value: 3}),\n *   turf.point([-97.508269, 35.463245], {value: 5})\n * ]);\n *\n * var options = {weight: \"value\"}\n * var mean = turf.centerMean(features, options);\n *\n * //addToMap\n * var addToMap = [features, mean]\n * mean.properties['marker-size'] = 'large';\n * mean.properties['marker-color'] = '#000';\n */\nfunction centerMean(geojson,\n// To-Do include Typescript AllGeoJSON\noptions) {\n  if (options === void 0) {\n    options = {};\n  }\n  var sumXs = 0;\n  var sumYs = 0;\n  var sumNs = 0;\n  geomEach(geojson, function (geom, featureIndex, properties) {\n    var weight = options.weight ? properties === null || properties === void 0 ? void 0 : properties[options.weight] : undefined;\n    weight = weight === undefined || weight === null ? 1 : weight;\n    if (!isNumber(weight)) throw new Error(\"weight value must be a number for feature index \" + featureIndex);\n    weight = Number(weight);\n    if (weight > 0) {\n      coordEach(geom, function (coord) {\n        sumXs += coord[0] * weight;\n        sumYs += coord[1] * weight;\n        sumNs += weight;\n      });\n    }\n  });\n  return point([sumXs / sumNs, sumYs / sumNs], options.properties, options);\n}\nexport default centerMean;","map":{"version":3,"names":["geomEach","coordEach","isNumber","point","centerMean","geojson","options","sumXs","sumYs","sumNs","geom","featureIndex","properties","weight","undefined","Error","Number","coord"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/center-mean/dist/es/index.js"],"sourcesContent":["import { geomEach, coordEach } from \"@turf/meta\";\nimport { isNumber, point, } from \"@turf/helpers\";\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the mean center. Can be weighted.\n *\n * @name centerMean\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point\n * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point\n * @param {Object} [options.id={}] Translate GeoJSON Id to Point\n * @param {string} [options.weight] the property name used to weight the center\n * @returns {Feature<Point>} a Point feature at the mean center point of all input features\n * @example\n * var features = turf.featureCollection([\n *   turf.point([-97.522259, 35.4691], {value: 10}),\n *   turf.point([-97.502754, 35.463455], {value: 3}),\n *   turf.point([-97.508269, 35.463245], {value: 5})\n * ]);\n *\n * var options = {weight: \"value\"}\n * var mean = turf.centerMean(features, options);\n *\n * //addToMap\n * var addToMap = [features, mean]\n * mean.properties['marker-size'] = 'large';\n * mean.properties['marker-color'] = '#000';\n */\nfunction centerMean(geojson, // To-Do include Typescript AllGeoJSON\noptions) {\n    if (options === void 0) { options = {}; }\n    var sumXs = 0;\n    var sumYs = 0;\n    var sumNs = 0;\n    geomEach(geojson, function (geom, featureIndex, properties) {\n        var weight = options.weight ? properties === null || properties === void 0 ? void 0 : properties[options.weight] : undefined;\n        weight = weight === undefined || weight === null ? 1 : weight;\n        if (!isNumber(weight))\n            throw new Error(\"weight value must be a number for feature index \" + featureIndex);\n        weight = Number(weight);\n        if (weight > 0) {\n            coordEach(geom, function (coord) {\n                sumXs += coord[0] * weight;\n                sumYs += coord[1] * weight;\n                sumNs += weight;\n            });\n        }\n    });\n    return point([sumXs / sumNs, sumYs / sumNs], options.properties, options);\n}\nexport default centerMean;\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,YAAY;AAChD,SAASC,QAAQ,EAAEC,KAAK,QAAS,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,OAAO;AAAE;AAC7BC,OAAO,EAAE;EACL,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,CAAC;EACbT,QAAQ,CAACK,OAAO,EAAE,UAAUK,IAAI,EAAEC,YAAY,EAAEC,UAAU,EAAE;IACxD,IAAIC,MAAM,GAAGP,OAAO,CAACO,MAAM,GAAGD,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACN,OAAO,CAACO,MAAM,CAAC,GAAGC,SAAS;IAC5HD,MAAM,GAAGA,MAAM,KAAKC,SAAS,IAAID,MAAM,KAAK,IAAI,GAAG,CAAC,GAAGA,MAAM;IAC7D,IAAI,CAACX,QAAQ,CAACW,MAAM,CAAC,EACjB,MAAM,IAAIE,KAAK,CAAC,kDAAkD,GAAGJ,YAAY,CAAC;IACtFE,MAAM,GAAGG,MAAM,CAACH,MAAM,CAAC;IACvB,IAAIA,MAAM,GAAG,CAAC,EAAE;MACZZ,SAAS,CAACS,IAAI,EAAE,UAAUO,KAAK,EAAE;QAC7BV,KAAK,IAAIU,KAAK,CAAC,CAAC,CAAC,GAAGJ,MAAM;QAC1BL,KAAK,IAAIS,KAAK,CAAC,CAAC,CAAC,GAAGJ,MAAM;QAC1BJ,KAAK,IAAII,MAAM;MACnB,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;EACF,OAAOV,KAAK,CAAC,CAACI,KAAK,GAAGE,KAAK,EAAED,KAAK,GAAGC,KAAK,CAAC,EAAEH,OAAO,CAACM,UAAU,EAAEN,OAAO,CAAC;AAC7E;AACA,eAAeF,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}