{"ast":null,"code":"import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from '../NavBar';\nimport styles from './chat.module.css';\nimport axios from 'axios'; // Import Axios\n\nimport LoadingText from './AssistantResponse';\nimport AssistantResponse from './AssistantResponse';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = 'auth'; // change as needed\n\nfunction Event(props) {\n  // <Event key={index} timeInfo={timeObj} summary={data.summary} location={data.location} timezone={data.timezone} />\n\n  const timeInfo = props.timeInfo;\n  const summary = props.summary;\n  const location = props.location;\n  const timezone = props.timezone;\n  function submitQuery(event) {\n    event.preventDefault(); // prevent default form submission behavior (because we want to connect to BE endpoint)\n\n    setResponse(\"generating\"); // \"Generating response ... \"\n\n    axios({\n      method: \"POST\",\n      url: \"/gpt/submit\",\n      // endpoint in backend to login user and return access token\n      // remember, users module is just base url (e.g. localhost:5000/login but other modules are not\n      // e.g. localhost:5000/gpt/test)\n      // for some reason, proxy not working\n      baseURL: 'http://127.0.0.1:5000',\n      // for some reason, throws error with localhost\n      headers: {\n        Authorization: 'Bearer ' + props.token,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        username: username,\n        query: query\n      }\n    }).then(response => {\n      const data = response.data; // need to access the actual JSON data returned\n\n      // console.log(response);\n      console.log(data[\"success\"]);\n\n      // data is the JSON object returned by endpoint \"chat/submit\"\n      gpt_response = data.response;\n      console.log(gpt_response);\n\n      // setResponse(gpt_response);\n      setResponse(\"\"); // should be empty now\n\n      // NOW PARSE THE JSON TO OBTAIN THE RELEVANT EVENT INFORMATION:\n\n      let times = gpt_response['times']; // array of JSON objects\n      let num_times = times.length;\n      if (num_times === 0) {\n        throw new Error(\"No suggested times found\");\n      }\n\n      // OTHER EVENT PARAMS \n      let timezone = gpt_response['timezone'];\n      let summary = gpt_response['summary'];\n      let loc = gpt_response['location']; // location is a keyword in JS\n      let recurrence = gpt_response['recurrence'];\n\n      // iterate over the times and pass them into components to display\n\n      let start = \"\";\n      let end = \"\";\n      let date = \"\";\n      let time = \"\";\n\n      // edit this with React later\n      for (let i = 0; i < num_times; i++) {\n        time = times[i];\n        start = time['start'];\n        end = time['end'];\n        date = time['date'];\n        let display_tz = \"\";\n        if (timezone == \"US/Eastern\" || timezone == \"America/New_York\" || timezone == \"ET\") {\n          // handle only ET for now\n          display_tz = \"ET\";\n        }\n        let formatted_time = start + \" to \" + end + \" \" + display_tz;\n        console.log(\"Option \" + (i + 1) + \":\\nTime: \" + formatted_time + \"\\nDate: \" + date);\n      }\n\n      // pass the JSON info to the Assistant response\n\n      /*\n       Once GPT returns the list of times, we want to render them as separate options / components\n      All events should be similar/the same, except start, end, date\n      Create a new component with these fields, then just show them side by side\n      We need a way to figure out how to respond back with which option was clicked\n      Specifically, \n       */\n\n      // response is a JSON string, convert to JSON object\n      // gpt_response = JSON.parse(gpt_response)\n    }).catch(error => {\n      if (error.response) {\n        console.log(error.response);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n    });\n  }\n  function handleQueryChange(event) {\n    setQuery(event.target.value);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_c = Event;\nexport default Event;\nvar _c;\n$RefreshReg$(_c, \"Event\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useNavigate","NavBar","styles","axios","LoadingText","AssistantResponse","Fragment","_Fragment","jsxDEV","_jsxDEV","URL","Event","props","timeInfo","summary","location","timezone","submitQuery","event","preventDefault","setResponse","method","url","baseURL","headers","Authorization","token","data","username","query","then","response","console","log","gpt_response","times","num_times","length","Error","loc","recurrence","start","end","date","time","i","display_tz","formatted_time","catch","error","status","handleQueryChange","setQuery","target","value","_c","$RefreshReg$"],"sources":["/Users/brandonpae/Desktop/secra-code/frontend/src/components/chat/Event.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\n\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from '../NavBar';\n\nimport styles from './chat.module.css';\nimport axios from 'axios'; // Import Axios\n\nimport LoadingText from './AssistantResponse';\nimport AssistantResponse from './AssistantResponse';\n\nconst URL = 'auth'; // change as needed\n\nfunction Event(props) {\n    // <Event key={index} timeInfo={timeObj} summary={data.summary} location={data.location} timezone={data.timezone} />\n\n    const timeInfo = props.timeInfo;\n    const summary = props.summary;\n    const location = props.location;\n    const timezone = props.timezone;\n\n    function submitQuery(event) {\n        event.preventDefault() // prevent default form submission behavior (because we want to connect to BE endpoint)\n        \n        setResponse(\"generating\"); // \"Generating response ... \"\n\n        axios({\n          method: \"POST\",\n          url:\"/gpt/submit\", // endpoint in backend to login user and return access token\n          // remember, users module is just base url (e.g. localhost:5000/login but other modules are not\n          // e.g. localhost:5000/gpt/test)\n          // for some reason, proxy not working\n          baseURL: 'http://127.0.0.1:5000', // for some reason, throws error with localhost\n          headers: {\n            Authorization: 'Bearer ' + props.token,\n            'Content-Type': 'application/json'\n          },\n          \n          data: {\n            username: username,\n            query: query,\n          }\n\n        })\n        .then((response) => {\n\n            const data = response.data; // need to access the actual JSON data returned\n\n            // console.log(response);\n            console.log(data[\"success\"])\n\n            // data is the JSON object returned by endpoint \"chat/submit\"\n            gpt_response = data.response;\n\n            console.log(gpt_response)\n\n            // setResponse(gpt_response);\n            setResponse(\"\") // should be empty now\n\n            // NOW PARSE THE JSON TO OBTAIN THE RELEVANT EVENT INFORMATION:\n            \n            let times = gpt_response['times']; // array of JSON objects\n            let num_times = times.length;\n\n            if (num_times === 0) {\n                throw new Error(\"No suggested times found\");\n            }\n\n            // OTHER EVENT PARAMS \n            let timezone = gpt_response['timezone']\n            let summary = gpt_response['summary'];\n            let loc = gpt_response['location']; // location is a keyword in JS\n            let recurrence = gpt_response['recurrence'];\n\n            // iterate over the times and pass them into components to display\n            \n            let start = \"\";\n            let end = \"\";\n            let date = \"\";\n\n            let time = \"\";\n\n            // edit this with React later\n            for (let i = 0; i < num_times; i++) {\n                time = times[i]\n\n                start = time['start'];\n                end = time['end'];\n                date = time['date'];\n\n                let display_tz = \"\";\n                \n                if (timezone == \"US/Eastern\" || timezone == \"America/New_York\" || timezone == \"ET\") { // handle only ET for now\n                    display_tz = \"ET\";\n                }\n\n                let formatted_time = start + \" to \" + end + \" \" + display_tz;\n\n                console.log(\"Option \" + (i + 1) + \":\\nTime: \" + formatted_time + \"\\nDate: \" + date);\n            }\n\n            // pass the JSON info to the Assistant response\n\n\n            /*\n\n            Once GPT returns the list of times, we want to render them as separate options / components\n            All events should be similar/the same, except start, end, date\n            Create a new component with these fields, then just show them side by side\n            We need a way to figure out how to respond back with which option was clicked\n            Specifically, \n\n            */\n\n\n            // response is a JSON string, convert to JSON object\n            // gpt_response = JSON.parse(gpt_response)\n\n        }).catch((error) => {\n          if (error.response) {\n            console.log(error.response)\n            console.log(error.response.status)\n            console.log(error.response.headers)\n            }\n        })\n    }\n\n    function handleQueryChange(event) {\n        setQuery(event.target.value);\n    }\n\n    return (\n        <>  \n        \n\n        </>\n    );\n}\n\nexport default Event;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}