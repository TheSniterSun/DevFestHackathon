{"ast":null,"code":"import { polygon, multiPolygon } from '@turf/helpers';\nimport polygonClipping from 'polygon-clipping';\n\n/**\n * Takes any type of {@link Polygon|polygon} and an optional mask and returns a {@link Polygon|polygon} exterior ring with holes.\n *\n * @name mask\n * @param {FeatureCollection|Feature<Polygon|MultiPolygon>} polygon GeoJSON Polygon used as interior rings or holes.\n * @param {Feature<Polygon>} [mask] GeoJSON Polygon used as the exterior ring (if undefined, the world extent is used)\n * @returns {Feature<Polygon>} Masked Polygon (exterior ring with holes).\n * @example\n * var polygon = turf.polygon([[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]);\n * var mask = turf.polygon([[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]);\n *\n * var masked = turf.mask(polygon, mask);\n *\n * //addToMap\n * var addToMap = [masked]\n */\nfunction mask(polygon, mask) {\n  // Define mask\n  var maskPolygon = createMask(mask);\n  var polygonOuters = null;\n  if (polygon.type === \"FeatureCollection\") polygonOuters = unionFc(polygon);else polygonOuters = createGeomFromPolygonClippingOutput(polygonClipping.union(polygon.geometry.coordinates));\n  polygonOuters.geometry.coordinates.forEach(function (contour) {\n    maskPolygon.geometry.coordinates.push(contour[0]);\n  });\n  return maskPolygon;\n}\nfunction unionFc(fc) {\n  var unioned = fc.features.length === 2 ? polygonClipping.union(fc.features[0].geometry.coordinates, fc.features[1].geometry.coordinates) : polygonClipping.union.apply(polygonClipping, fc.features.map(function (f) {\n    return f.geometry.coordinates;\n  }));\n  return createGeomFromPolygonClippingOutput(unioned);\n}\nfunction createGeomFromPolygonClippingOutput(unioned) {\n  return multiPolygon(unioned);\n}\n\n/**\n * Create Mask Coordinates\n *\n * @private\n * @param {Feature<Polygon>} [mask] default to world if undefined\n * @returns {Feature<Polygon>} mask coordinate\n */\nfunction createMask(mask) {\n  var world = [[[180, 90], [-180, 90], [-180, -90], [180, -90], [180, 90]]];\n  var coordinates = mask && mask.geometry.coordinates || world;\n  return polygon(coordinates);\n}\nexport default mask;","map":{"version":3,"names":["polygon","multiPolygon","polygonClipping","mask","maskPolygon","createMask","polygonOuters","type","unionFc","createGeomFromPolygonClippingOutput","union","geometry","coordinates","forEach","contour","push","fc","unioned","features","length","apply","map","f","world"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/mask/dist/es/index.js"],"sourcesContent":["import { polygon, multiPolygon } from '@turf/helpers';\nimport polygonClipping from 'polygon-clipping';\n\n/**\n * Takes any type of {@link Polygon|polygon} and an optional mask and returns a {@link Polygon|polygon} exterior ring with holes.\n *\n * @name mask\n * @param {FeatureCollection|Feature<Polygon|MultiPolygon>} polygon GeoJSON Polygon used as interior rings or holes.\n * @param {Feature<Polygon>} [mask] GeoJSON Polygon used as the exterior ring (if undefined, the world extent is used)\n * @returns {Feature<Polygon>} Masked Polygon (exterior ring with holes).\n * @example\n * var polygon = turf.polygon([[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]);\n * var mask = turf.polygon([[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]);\n *\n * var masked = turf.mask(polygon, mask);\n *\n * //addToMap\n * var addToMap = [masked]\n */\nfunction mask(polygon, mask) {\n  // Define mask\n  var maskPolygon = createMask(mask);\n\n  var polygonOuters = null;\n  if (polygon.type === \"FeatureCollection\") polygonOuters = unionFc(polygon);\n  else\n    polygonOuters = createGeomFromPolygonClippingOutput(\n      polygonClipping.union(polygon.geometry.coordinates)\n    );\n\n  polygonOuters.geometry.coordinates.forEach(function (contour) {\n    maskPolygon.geometry.coordinates.push(contour[0]);\n  });\n\n  return maskPolygon;\n}\n\nfunction unionFc(fc) {\n  var unioned =\n    fc.features.length === 2\n      ? polygonClipping.union(\n          fc.features[0].geometry.coordinates,\n          fc.features[1].geometry.coordinates\n        )\n      : polygonClipping.union.apply(\n          polygonClipping,\n          fc.features.map(function (f) {\n            return f.geometry.coordinates;\n          })\n        );\n  return createGeomFromPolygonClippingOutput(unioned);\n}\n\nfunction createGeomFromPolygonClippingOutput(unioned) {\n  return multiPolygon(unioned);\n}\n\n/**\n * Create Mask Coordinates\n *\n * @private\n * @param {Feature<Polygon>} [mask] default to world if undefined\n * @returns {Feature<Polygon>} mask coordinate\n */\nfunction createMask(mask) {\n  var world = [\n    [\n      [180, 90],\n      [-180, 90],\n      [-180, -90],\n      [180, -90],\n      [180, 90],\n    ],\n  ];\n  var coordinates = (mask && mask.geometry.coordinates) || world;\n  return polygon(coordinates);\n}\n\nexport default mask;\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,YAAY,QAAQ,eAAe;AACrD,OAAOC,eAAe,MAAM,kBAAkB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACH,OAAO,EAAEG,IAAI,EAAE;EAC3B;EACA,IAAIC,WAAW,GAAGC,UAAU,CAACF,IAAI,CAAC;EAElC,IAAIG,aAAa,GAAG,IAAI;EACxB,IAAIN,OAAO,CAACO,IAAI,KAAK,mBAAmB,EAAED,aAAa,GAAGE,OAAO,CAACR,OAAO,CAAC,CAAC,KAEzEM,aAAa,GAAGG,mCAAmC,CACjDP,eAAe,CAACQ,KAAK,CAACV,OAAO,CAACW,QAAQ,CAACC,WAAW,CACpD,CAAC;EAEHN,aAAa,CAACK,QAAQ,CAACC,WAAW,CAACC,OAAO,CAAC,UAAUC,OAAO,EAAE;IAC5DV,WAAW,CAACO,QAAQ,CAACC,WAAW,CAACG,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;EACnD,CAAC,CAAC;EAEF,OAAOV,WAAW;AACpB;AAEA,SAASI,OAAOA,CAACQ,EAAE,EAAE;EACnB,IAAIC,OAAO,GACTD,EAAE,CAACE,QAAQ,CAACC,MAAM,KAAK,CAAC,GACpBjB,eAAe,CAACQ,KAAK,CACnBM,EAAE,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACP,QAAQ,CAACC,WAAW,EACnCI,EAAE,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACP,QAAQ,CAACC,WAC1B,CAAC,GACDV,eAAe,CAACQ,KAAK,CAACU,KAAK,CACzBlB,eAAe,EACfc,EAAE,CAACE,QAAQ,CAACG,GAAG,CAAC,UAAUC,CAAC,EAAE;IAC3B,OAAOA,CAAC,CAACX,QAAQ,CAACC,WAAW;EAC/B,CAAC,CACH,CAAC;EACP,OAAOH,mCAAmC,CAACQ,OAAO,CAAC;AACrD;AAEA,SAASR,mCAAmCA,CAACQ,OAAO,EAAE;EACpD,OAAOhB,YAAY,CAACgB,OAAO,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASZ,UAAUA,CAACF,IAAI,EAAE;EACxB,IAAIoB,KAAK,GAAG,CACV,CACE,CAAC,GAAG,EAAE,EAAE,CAAC,EACT,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EACV,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EACX,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,GAAG,EAAE,EAAE,CAAC,CACV,CACF;EACD,IAAIX,WAAW,GAAIT,IAAI,IAAIA,IAAI,CAACQ,QAAQ,CAACC,WAAW,IAAKW,KAAK;EAC9D,OAAOvB,OAAO,CAACY,WAAW,CAAC;AAC7B;AAEA,eAAeT,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}