{"ast":null,"code":"import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\nexport default function (poly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var geom = getGeom(poly);\n  if (!options.properties && poly.type === \"Feature\") {\n    options.properties = poly.properties;\n  }\n  switch (geom.type) {\n    case \"Polygon\":\n      return polygonToLine(geom, options);\n    case \"MultiPolygon\":\n      return multiPolygonToLine(geom, options);\n    default:\n      throw new Error(\"invalid poly\");\n  }\n}\n/**\n * @private\n */\nexport function polygonToLine(poly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var geom = getGeom(poly);\n  var coords = geom.coordinates;\n  var properties = options.properties ? options.properties : poly.type === \"Feature\" ? poly.properties : {};\n  return coordsToLine(coords, properties);\n}\n/**\n * @private\n */\nexport function multiPolygonToLine(multiPoly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var geom = getGeom(multiPoly);\n  var coords = geom.coordinates;\n  var properties = options.properties ? options.properties : multiPoly.type === \"Feature\" ? multiPoly.properties : {};\n  var lines = [];\n  coords.forEach(function (coord) {\n    lines.push(coordsToLine(coord, properties));\n  });\n  return featureCollection(lines);\n}\n/**\n * @private\n */\nexport function coordsToLine(coords, properties) {\n  if (coords.length > 1) {\n    return multiLineString(coords, properties);\n  }\n  return lineString(coords[0], properties);\n}","map":{"version":3,"names":["featureCollection","lineString","multiLineString","getGeom","poly","options","geom","properties","type","polygonToLine","multiPolygonToLine","Error","coords","coordinates","coordsToLine","multiPoly","lines","forEach","coord","push","length"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/polygon-to-line/dist/es/index.js"],"sourcesContent":["import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\nexport default function (poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    if (!options.properties && poly.type === \"Feature\") {\n        options.properties = poly.properties;\n    }\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonToLine(geom, options);\n        case \"MultiPolygon\":\n            return multiPolygonToLine(geom, options);\n        default:\n            throw new Error(\"invalid poly\");\n    }\n}\n/**\n * @private\n */\nexport function polygonToLine(poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : poly.type === \"Feature\"\n            ? poly.properties\n            : {};\n    return coordsToLine(coords, properties);\n}\n/**\n * @private\n */\nexport function multiPolygonToLine(multiPoly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(multiPoly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : multiPoly.type === \"Feature\"\n            ? multiPoly.properties\n            : {};\n    var lines = [];\n    coords.forEach(function (coord) {\n        lines.push(coordsToLine(coord, properties));\n    });\n    return featureCollection(lines);\n}\n/**\n * @private\n */\nexport function coordsToLine(coords, properties) {\n    if (coords.length > 1) {\n        return multiLineString(coords, properties);\n    }\n    return lineString(coords[0], properties);\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,UAAU,EAAEC,eAAe,QAAQ,eAAe;AAC9E,SAASC,OAAO,QAAQ,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAUC,IAAI,EAAEC,OAAO,EAAE;EACpC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAIC,IAAI,GAAGH,OAAO,CAACC,IAAI,CAAC;EACxB,IAAI,CAACC,OAAO,CAACE,UAAU,IAAIH,IAAI,CAACI,IAAI,KAAK,SAAS,EAAE;IAChDH,OAAO,CAACE,UAAU,GAAGH,IAAI,CAACG,UAAU;EACxC;EACA,QAAQD,IAAI,CAACE,IAAI;IACb,KAAK,SAAS;MACV,OAAOC,aAAa,CAACH,IAAI,EAAED,OAAO,CAAC;IACvC,KAAK,cAAc;MACf,OAAOK,kBAAkB,CAACJ,IAAI,EAAED,OAAO,CAAC;IAC5C;MACI,MAAM,IAAIM,KAAK,CAAC,cAAc,CAAC;EACvC;AACJ;AACA;AACA;AACA;AACA,OAAO,SAASF,aAAaA,CAACL,IAAI,EAAEC,OAAO,EAAE;EACzC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAIC,IAAI,GAAGH,OAAO,CAACC,IAAI,CAAC;EACxB,IAAIQ,MAAM,GAAGN,IAAI,CAACO,WAAW;EAC7B,IAAIN,UAAU,GAAGF,OAAO,CAACE,UAAU,GAC7BF,OAAO,CAACE,UAAU,GAClBH,IAAI,CAACI,IAAI,KAAK,SAAS,GACnBJ,IAAI,CAACG,UAAU,GACf,CAAC,CAAC;EACZ,OAAOO,YAAY,CAACF,MAAM,EAAEL,UAAU,CAAC;AAC3C;AACA;AACA;AACA;AACA,OAAO,SAASG,kBAAkBA,CAACK,SAAS,EAAEV,OAAO,EAAE;EACnD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAIC,IAAI,GAAGH,OAAO,CAACY,SAAS,CAAC;EAC7B,IAAIH,MAAM,GAAGN,IAAI,CAACO,WAAW;EAC7B,IAAIN,UAAU,GAAGF,OAAO,CAACE,UAAU,GAC7BF,OAAO,CAACE,UAAU,GAClBQ,SAAS,CAACP,IAAI,KAAK,SAAS,GACxBO,SAAS,CAACR,UAAU,GACpB,CAAC,CAAC;EACZ,IAAIS,KAAK,GAAG,EAAE;EACdJ,MAAM,CAACK,OAAO,CAAC,UAAUC,KAAK,EAAE;IAC5BF,KAAK,CAACG,IAAI,CAACL,YAAY,CAACI,KAAK,EAAEX,UAAU,CAAC,CAAC;EAC/C,CAAC,CAAC;EACF,OAAOP,iBAAiB,CAACgB,KAAK,CAAC;AACnC;AACA;AACA;AACA;AACA,OAAO,SAASF,YAAYA,CAACF,MAAM,EAAEL,UAAU,EAAE;EAC7C,IAAIK,MAAM,CAACQ,MAAM,GAAG,CAAC,EAAE;IACnB,OAAOlB,eAAe,CAACU,MAAM,EAAEL,UAAU,CAAC;EAC9C;EACA,OAAON,UAAU,CAACW,MAAM,CAAC,CAAC,CAAC,EAAEL,UAAU,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}