{"ast":null,"code":"import compose from \"./compose\";\nimport { asin, atan2, cos, degrees, pi, radians, sin, tau } from \"./math\";\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\nrotationIdentity.invert = rotationIdentity;\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;\n}\nfunction forwardRotationLambda(deltaLambda) {\n  return function (lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n    sinDeltaPhi = sin(deltaPhi),\n    cosDeltaGamma = cos(deltaGamma),\n    sinDeltaGamma = sin(deltaGamma);\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(phi),\n      k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];\n  }\n  rotation.invert = function (lambda, phi) {\n    var cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(phi),\n      k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];\n  };\n  return rotation;\n}\nexport default function (rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n  forward.invert = function (coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n  return forward;\n}","map":{"version":3,"names":["compose","asin","atan2","cos","degrees","pi","radians","sin","tau","rotationIdentity","lambda","phi","invert","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","x","y","z","k","rotate","length","forward","coordinates"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/d3-geo/src/rotation.js"],"sourcesContent":["import compose from \"./compose\";\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}