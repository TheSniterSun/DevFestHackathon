{"ast":null,"code":"import clone from \"@turf/clone\";\nimport { geometryCollection } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport { merge } from \"topojson-client\";\nimport { topology } from \"topojson-server\";\n/**\n * Dissolves all overlapping (Multi)Polygon\n *\n * @param {FeatureCollection<Polygon|MultiPolygon>} geojson Polygons to dissolve\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<Polygon|MultiPolygon>} Dissolved Polygons\n */\nexport default function polygonDissolve(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // Validation\n  if (getType(geojson) !== \"FeatureCollection\") {\n    throw new Error(\"geojson must be a FeatureCollection\");\n  }\n  if (!geojson.features.length) {\n    throw new Error(\"geojson is empty\");\n  }\n  // Clone geojson to avoid side effects\n  // Topojson modifies in place, so we need to deep clone first\n  if (options.mutate === false || options.mutate === undefined) {\n    geojson = clone(geojson);\n  }\n  var geoms = [];\n  flattenEach(geojson, function (feature) {\n    geoms.push(feature.geometry);\n  });\n  var topo = topology({\n    geoms: geometryCollection(geoms).geometry\n  });\n  var merged = merge(topo, topo.objects.geoms.geometries);\n  return merged;\n}","map":{"version":3,"names":["clone","geometryCollection","getType","flattenEach","merge","topology","polygonDissolve","geojson","options","Error","features","length","mutate","undefined","geoms","feature","push","geometry","topo","merged","objects","geometries"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/concave/dist/es/lib/turf-polygon-dissolve.js"],"sourcesContent":["import clone from \"@turf/clone\";\nimport { geometryCollection } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport { merge } from \"topojson-client\";\nimport { topology } from \"topojson-server\";\n/**\n * Dissolves all overlapping (Multi)Polygon\n *\n * @param {FeatureCollection<Polygon|MultiPolygon>} geojson Polygons to dissolve\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<Polygon|MultiPolygon>} Dissolved Polygons\n */\nexport default function polygonDissolve(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Validation\n    if (getType(geojson) !== \"FeatureCollection\") {\n        throw new Error(\"geojson must be a FeatureCollection\");\n    }\n    if (!geojson.features.length) {\n        throw new Error(\"geojson is empty\");\n    }\n    // Clone geojson to avoid side effects\n    // Topojson modifies in place, so we need to deep clone first\n    if (options.mutate === false || options.mutate === undefined) {\n        geojson = clone(geojson);\n    }\n    var geoms = [];\n    flattenEach(geojson, function (feature) {\n        geoms.push(feature.geometry);\n    });\n    var topo = topology({ geoms: geometryCollection(geoms).geometry });\n    var merged = merge(topo, topo.objects.geoms.geometries);\n    return merged;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,aAAa;AAC/B,SAASC,kBAAkB,QAAQ,eAAe;AAClD,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,eAAeA,CAACC,OAAO,EAAEC,OAAO,EAAE;EACtD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC;EACA,IAAIN,OAAO,CAACK,OAAO,CAAC,KAAK,mBAAmB,EAAE;IAC1C,MAAM,IAAIE,KAAK,CAAC,qCAAqC,CAAC;EAC1D;EACA,IAAI,CAACF,OAAO,CAACG,QAAQ,CAACC,MAAM,EAAE;IAC1B,MAAM,IAAIF,KAAK,CAAC,kBAAkB,CAAC;EACvC;EACA;EACA;EACA,IAAID,OAAO,CAACI,MAAM,KAAK,KAAK,IAAIJ,OAAO,CAACI,MAAM,KAAKC,SAAS,EAAE;IAC1DN,OAAO,GAAGP,KAAK,CAACO,OAAO,CAAC;EAC5B;EACA,IAAIO,KAAK,GAAG,EAAE;EACdX,WAAW,CAACI,OAAO,EAAE,UAAUQ,OAAO,EAAE;IACpCD,KAAK,CAACE,IAAI,CAACD,OAAO,CAACE,QAAQ,CAAC;EAChC,CAAC,CAAC;EACF,IAAIC,IAAI,GAAGb,QAAQ,CAAC;IAAES,KAAK,EAAEb,kBAAkB,CAACa,KAAK,CAAC,CAACG;EAAS,CAAC,CAAC;EAClE,IAAIE,MAAM,GAAGf,KAAK,CAACc,IAAI,EAAEA,IAAI,CAACE,OAAO,CAACN,KAAK,CAACO,UAAU,CAAC;EACvD,OAAOF,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}