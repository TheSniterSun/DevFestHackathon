{"ast":null,"code":"import { createBorderEdge } from \"./Edge\";\nimport { cells, edges, epsilon } from \"./Diagram\";\nexport function createCell(site) {\n  return cells[site.index] = {\n    site: site,\n    halfedges: []\n  };\n}\nfunction cellHalfedgeAngle(cell, edge) {\n  var site = cell.site,\n    va = edge.left,\n    vb = edge.right;\n  if (site === vb) vb = va, va = site;\n  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n  if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];\n  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n}\nexport function cellHalfedgeStart(cell, edge) {\n  return edge[+(edge.left !== cell.site)];\n}\nexport function cellHalfedgeEnd(cell, edge) {\n  return edge[+(edge.left === cell.site)];\n}\nexport function sortCellHalfedges() {\n  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n      var index = new Array(m),\n        array = new Array(m);\n      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n      index.sort(function (i, j) {\n        return array[j] - array[i];\n      });\n      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n      for (j = 0; j < m; ++j) halfedges[j] = array[j];\n    }\n  }\n}\nexport function clipCells(x0, y0, x1, y1) {\n  var nCells = cells.length,\n    iCell,\n    cell,\n    site,\n    iHalfedge,\n    halfedges,\n    nHalfedges,\n    start,\n    startX,\n    startY,\n    end,\n    endX,\n    endY,\n    cover = true;\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      site = cell.site;\n      halfedges = cell.halfedges;\n      iHalfedge = halfedges.length;\n\n      // Remove any dangling clipped edges.\n      while (iHalfedge--) {\n        if (!edges[halfedges[iHalfedge]]) {\n          halfedges.splice(iHalfedge, 1);\n        }\n      }\n\n      // Insert any border edges as necessary.\n      iHalfedge = 0, nHalfedges = halfedges.length;\n      while (iHalfedge < nHalfedges) {\n        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {\n          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end, Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1] : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1] : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0] : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0] : null)) - 1);\n          ++nHalfedges;\n        }\n      }\n      if (nHalfedges) cover = false;\n    }\n  }\n\n  // If there weren’t any edges, have the closest site cover the extent.\n  // It doesn’t matter which corner of the extent we measure!\n  if (cover) {\n    var dx,\n      dy,\n      d2,\n      dc = Infinity;\n    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        dx = site[0] - x0;\n        dy = site[1] - y0;\n        d2 = dx * dx + dy * dy;\n        if (d2 < dc) dc = d2, cover = cell;\n      }\n    }\n    if (cover) {\n      var v00 = [x0, y0],\n        v01 = [x0, y1],\n        v11 = [x1, y1],\n        v10 = [x1, y0];\n      cover.halfedges.push(edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1, edges.push(createBorderEdge(site, v01, v11)) - 1, edges.push(createBorderEdge(site, v11, v10)) - 1, edges.push(createBorderEdge(site, v10, v00)) - 1);\n    }\n  }\n\n  // Lastly delete any cells with no edges; these were entirely clipped.\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      if (!cell.halfedges.length) {\n        delete cells[iCell];\n      }\n    }\n  }\n}","map":{"version":3,"names":["createBorderEdge","cells","edges","epsilon","createCell","site","index","halfedges","cellHalfedgeAngle","cell","edge","va","left","vb","right","Math","atan2","cellHalfedgeStart","cellHalfedgeEnd","sortCellHalfedges","i","n","length","j","m","Array","array","sort","clipCells","x0","y0","x1","y1","nCells","iCell","iHalfedge","nHalfedges","start","startX","startY","end","endX","endY","cover","splice","abs","push","dx","dy","d2","dc","Infinity","v00","v01","v11","v10"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/d3-voronoi/src/Cell.js"],"sourcesContent":["import {createBorderEdge} from \"./Edge\";\nimport {cells, edges, epsilon} from \"./Diagram\";\n\nexport function createCell(site) {\n  return cells[site.index] = {\n    site: site,\n    halfedges: []\n  };\n}\n\nfunction cellHalfedgeAngle(cell, edge) {\n  var site = cell.site,\n      va = edge.left,\n      vb = edge.right;\n  if (site === vb) vb = va, va = site;\n  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n  if (site === va) va = edge[1], vb = edge[0];\n  else va = edge[0], vb = edge[1];\n  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n}\n\nexport function cellHalfedgeStart(cell, edge) {\n  return edge[+(edge.left !== cell.site)];\n}\n\nexport function cellHalfedgeEnd(cell, edge) {\n  return edge[+(edge.left === cell.site)];\n}\n\nexport function sortCellHalfedges() {\n  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n      var index = new Array(m),\n          array = new Array(m);\n      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n      index.sort(function(i, j) { return array[j] - array[i]; });\n      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n      for (j = 0; j < m; ++j) halfedges[j] = array[j];\n    }\n  }\n}\n\nexport function clipCells(x0, y0, x1, y1) {\n  var nCells = cells.length,\n      iCell,\n      cell,\n      site,\n      iHalfedge,\n      halfedges,\n      nHalfedges,\n      start,\n      startX,\n      startY,\n      end,\n      endX,\n      endY,\n      cover = true;\n\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      site = cell.site;\n      halfedges = cell.halfedges;\n      iHalfedge = halfedges.length;\n\n      // Remove any dangling clipped edges.\n      while (iHalfedge--) {\n        if (!edges[halfedges[iHalfedge]]) {\n          halfedges.splice(iHalfedge, 1);\n        }\n      }\n\n      // Insert any border edges as necessary.\n      iHalfedge = 0, nHalfedges = halfedges.length;\n      while (iHalfedge < nHalfedges) {\n        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {\n          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\n              Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1]\n              : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1]\n              : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0]\n              : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0]\n              : null)) - 1);\n          ++nHalfedges;\n        }\n      }\n\n      if (nHalfedges) cover = false;\n    }\n  }\n\n  // If there weren’t any edges, have the closest site cover the extent.\n  // It doesn’t matter which corner of the extent we measure!\n  if (cover) {\n    var dx, dy, d2, dc = Infinity;\n\n    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        dx = site[0] - x0;\n        dy = site[1] - y0;\n        d2 = dx * dx + dy * dy;\n        if (d2 < dc) dc = d2, cover = cell;\n      }\n    }\n\n    if (cover) {\n      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\n      cover.halfedges.push(\n        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\n        edges.push(createBorderEdge(site, v01, v11)) - 1,\n        edges.push(createBorderEdge(site, v11, v10)) - 1,\n        edges.push(createBorderEdge(site, v10, v00)) - 1\n      );\n    }\n  }\n\n  // Lastly delete any cells with no edges; these were entirely clipped.\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      if (!cell.halfedges.length) {\n        delete cells[iCell];\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}