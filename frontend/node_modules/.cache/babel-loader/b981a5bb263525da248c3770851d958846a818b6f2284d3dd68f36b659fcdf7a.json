{"ast":null,"code":"import earcut from 'earcut';\nimport { polygon } from '@turf/helpers';\n\n/**\n * Tesselates a {@link Feature<Polygon>} into a {@link FeatureCollection<Polygon>} of triangles\n * using [earcut](https://github.com/mapbox/earcut).\n *\n * @name tesselate\n * @param {Feature<Polygon>} poly the polygon to tesselate\n * @returns {FeatureCollection<Polygon>} a geometrycollection feature\n * @example\n * var poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\n * var triangles = turf.tesselate(poly);\n *\n * //addToMap\n * var addToMap = [poly, triangles]\n */\nfunction tesselate(poly) {\n  if (!poly.geometry || poly.geometry.type !== \"Polygon\" && poly.geometry.type !== \"MultiPolygon\") {\n    throw new Error(\"input must be a Polygon or MultiPolygon\");\n  }\n  var fc = {\n    type: \"FeatureCollection\",\n    features: []\n  };\n  if (poly.geometry.type === \"Polygon\") {\n    fc.features = processPolygon(poly.geometry.coordinates);\n  } else {\n    poly.geometry.coordinates.forEach(function (coordinates) {\n      fc.features = fc.features.concat(processPolygon(coordinates));\n    });\n  }\n  return fc;\n}\nfunction processPolygon(coordinates) {\n  var data = flattenCoords(coordinates);\n  var dim = 2;\n  var result = earcut(data.vertices, data.holes, dim);\n  var features = [];\n  var vertices = [];\n  result.forEach(function (vert, i) {\n    var index = result[i];\n    vertices.push([data.vertices[index * dim], data.vertices[index * dim + 1]]);\n  });\n  for (var i = 0; i < vertices.length; i += 3) {\n    var coords = vertices.slice(i, i + 3);\n    coords.push(vertices[i]);\n    features.push(polygon([coords]));\n  }\n  return features;\n}\nfunction flattenCoords(data) {\n  var dim = data[0][0].length,\n    result = {\n      vertices: [],\n      holes: [],\n      dimensions: dim\n    },\n    holeIndex = 0;\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < data[i].length; j++) {\n      for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n    }\n    if (i > 0) {\n      holeIndex += data[i - 1].length;\n      result.holes.push(holeIndex);\n    }\n  }\n  return result;\n}\nexport default tesselate;","map":{"version":3,"names":["earcut","polygon","tesselate","poly","geometry","type","Error","fc","features","processPolygon","coordinates","forEach","concat","data","flattenCoords","dim","result","vertices","holes","vert","i","index","push","length","coords","slice","dimensions","holeIndex","j","d"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/tesselate/dist/es/index.js"],"sourcesContent":["import earcut from 'earcut';\nimport { polygon } from '@turf/helpers';\n\n/**\n * Tesselates a {@link Feature<Polygon>} into a {@link FeatureCollection<Polygon>} of triangles\n * using [earcut](https://github.com/mapbox/earcut).\n *\n * @name tesselate\n * @param {Feature<Polygon>} poly the polygon to tesselate\n * @returns {FeatureCollection<Polygon>} a geometrycollection feature\n * @example\n * var poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\n * var triangles = turf.tesselate(poly);\n *\n * //addToMap\n * var addToMap = [poly, triangles]\n */\nfunction tesselate(poly) {\n  if (\n    !poly.geometry ||\n    (poly.geometry.type !== \"Polygon\" && poly.geometry.type !== \"MultiPolygon\")\n  ) {\n    throw new Error(\"input must be a Polygon or MultiPolygon\");\n  }\n\n  var fc = { type: \"FeatureCollection\", features: [] };\n\n  if (poly.geometry.type === \"Polygon\") {\n    fc.features = processPolygon(poly.geometry.coordinates);\n  } else {\n    poly.geometry.coordinates.forEach(function (coordinates) {\n      fc.features = fc.features.concat(processPolygon(coordinates));\n    });\n  }\n\n  return fc;\n}\n\nfunction processPolygon(coordinates) {\n  var data = flattenCoords(coordinates);\n  var dim = 2;\n  var result = earcut(data.vertices, data.holes, dim);\n\n  var features = [];\n  var vertices = [];\n\n  result.forEach(function (vert, i) {\n    var index = result[i];\n    vertices.push([data.vertices[index * dim], data.vertices[index * dim + 1]]);\n  });\n\n  for (var i = 0; i < vertices.length; i += 3) {\n    var coords = vertices.slice(i, i + 3);\n    coords.push(vertices[i]);\n    features.push(polygon([coords]));\n  }\n\n  return features;\n}\n\nfunction flattenCoords(data) {\n  var dim = data[0][0].length,\n    result = { vertices: [], holes: [], dimensions: dim },\n    holeIndex = 0;\n\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < data[i].length; j++) {\n      for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n    }\n    if (i > 0) {\n      holeIndex += data[i - 1].length;\n      result.holes.push(holeIndex);\n    }\n  }\n\n  return result;\n}\n\nexport default tesselate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}