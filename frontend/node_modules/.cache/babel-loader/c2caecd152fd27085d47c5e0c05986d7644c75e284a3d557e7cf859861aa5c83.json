{"ast":null,"code":"import { featureCollection, lineString } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n  if (!geojson) {\n    throw new Error(\"geojson is required\");\n  }\n  var results = [];\n  flattenEach(geojson, function (feature) {\n    lineSegmentFeature(feature, results);\n  });\n  return featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n  var coords = [];\n  var geometry = geojson.geometry;\n  if (geometry !== null) {\n    switch (geometry.type) {\n      case \"Polygon\":\n        coords = getCoords(geometry);\n        break;\n      case \"LineString\":\n        coords = [getCoords(geometry)];\n    }\n    coords.forEach(function (coord) {\n      var segments = createSegments(coord, geojson.properties);\n      segments.forEach(function (segment) {\n        segment.id = results.length;\n        results.push(segment);\n      });\n    });\n  }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n  var segments = [];\n  coords.reduce(function (previousCoords, currentCoords) {\n    var segment = lineString([previousCoords, currentCoords], properties);\n    segment.bbox = bbox(previousCoords, currentCoords);\n    segments.push(segment);\n    return currentCoords;\n  });\n  return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n  var x1 = coords1[0];\n  var y1 = coords1[1];\n  var x2 = coords2[0];\n  var y2 = coords2[1];\n  var west = x1 < x2 ? x1 : x2;\n  var south = y1 < y2 ? y1 : y2;\n  var east = x1 > x2 ? x1 : x2;\n  var north = y1 > y2 ? y1 : y2;\n  return [west, south, east, north];\n}\nexport default lineSegment;","map":{"version":3,"names":["featureCollection","lineString","getCoords","flattenEach","lineSegment","geojson","Error","results","feature","lineSegmentFeature","coords","geometry","type","forEach","coord","segments","createSegments","properties","segment","id","length","push","reduce","previousCoords","currentCoords","bbox","coords1","coords2","x1","y1","x2","y2","west","south","east","north"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/line-segment/dist/es/index.js"],"sourcesContent":["import { featureCollection, lineString, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    var results = [];\n    flattenEach(geojson, function (feature) {\n        lineSegmentFeature(feature, results);\n    });\n    return featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n    var coords = [];\n    var geometry = geojson.geometry;\n    if (geometry !== null) {\n        switch (geometry.type) {\n            case \"Polygon\":\n                coords = getCoords(geometry);\n                break;\n            case \"LineString\":\n                coords = [getCoords(geometry)];\n        }\n        coords.forEach(function (coord) {\n            var segments = createSegments(coord, geojson.properties);\n            segments.forEach(function (segment) {\n                segment.id = results.length;\n                results.push(segment);\n            });\n        });\n    }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n    var segments = [];\n    coords.reduce(function (previousCoords, currentCoords) {\n        var segment = lineString([previousCoords, currentCoords], properties);\n        segment.bbox = bbox(previousCoords, currentCoords);\n        segments.push(segment);\n        return currentCoords;\n    });\n    return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n    var x1 = coords1[0];\n    var y1 = coords1[1];\n    var x2 = coords2[0];\n    var y2 = coords2[1];\n    var west = x1 < x2 ? x1 : x2;\n    var south = y1 < y2 ? y1 : y2;\n    var east = x1 > x2 ? x1 : x2;\n    var north = y1 > y2 ? y1 : y2;\n    return [west, south, east, north];\n}\nexport default lineSegment;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}