{"ast":null,"code":"import { addBeach, removeBeach } from \"./Beach\";\nimport { sortCellHalfedges, cellHalfedgeStart, clipCells } from \"./Cell\";\nimport { firstCircle } from \"./Circle\";\nimport { clipEdges } from \"./Edge\";\nimport RedBlackTree from \"./RedBlackTree\";\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var beaches;\nexport var cells;\nexport var circles;\nexport var edges;\nfunction triangleArea(a, b, c) {\n  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n}\nfunction lexicographic(a, b) {\n  return b[1] - a[1] || b[0] - a[0];\n}\nexport default function Diagram(sites, extent) {\n  var site = sites.sort(lexicographic).pop(),\n    x,\n    y,\n    circle;\n  edges = [];\n  cells = new Array(sites.length);\n  beaches = new RedBlackTree();\n  circles = new RedBlackTree();\n  while (true) {\n    circle = firstCircle;\n    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {\n      if (site[0] !== x || site[1] !== y) {\n        addBeach(site);\n        x = site[0], y = site[1];\n      }\n      site = sites.pop();\n    } else if (circle) {\n      removeBeach(circle.arc);\n    } else {\n      break;\n    }\n  }\n  sortCellHalfedges();\n  if (extent) {\n    var x0 = +extent[0][0],\n      y0 = +extent[0][1],\n      x1 = +extent[1][0],\n      y1 = +extent[1][1];\n    clipEdges(x0, y0, x1, y1);\n    clipCells(x0, y0, x1, y1);\n  }\n  this.edges = edges;\n  this.cells = cells;\n  beaches = circles = edges = cells = null;\n}\nDiagram.prototype = {\n  constructor: Diagram,\n  polygons: function () {\n    var edges = this.edges;\n    return this.cells.map(function (cell) {\n      var polygon = cell.halfedges.map(function (i) {\n        return cellHalfedgeStart(cell, edges[i]);\n      });\n      polygon.data = cell.site.data;\n      return polygon;\n    });\n  },\n  triangles: function () {\n    var triangles = [],\n      edges = this.edges;\n    this.cells.forEach(function (cell, i) {\n      if (!(m = (halfedges = cell.halfedges).length)) return;\n      var site = cell.site,\n        halfedges,\n        j = -1,\n        m,\n        s0,\n        e1 = edges[halfedges[m - 1]],\n        s1 = e1.left === site ? e1.right : e1.left;\n      while (++j < m) {\n        s0 = s1;\n        e1 = edges[halfedges[j]];\n        s1 = e1.left === site ? e1.right : e1.left;\n        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n          triangles.push([site.data, s0.data, s1.data]);\n        }\n      }\n    });\n    return triangles;\n  },\n  links: function () {\n    return this.edges.filter(function (edge) {\n      return edge.right;\n    }).map(function (edge) {\n      return {\n        source: edge.left.data,\n        target: edge.right.data\n      };\n    });\n  },\n  find: function (x, y, radius) {\n    var that = this,\n      i0,\n      i1 = that._found || 0,\n      n = that.cells.length,\n      cell;\n\n    // Use the previously-found cell, or start with an arbitrary one.\n    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;\n    var dx = x - cell.site[0],\n      dy = y - cell.site[1],\n      d2 = dx * dx + dy * dy;\n\n    // Traverse the half-edges to find a closer cell, if any.\n    do {\n      cell = that.cells[i0 = i1], i1 = null;\n      cell.halfedges.forEach(function (e) {\n        var edge = that.edges[e],\n          v = edge.left;\n        if ((v === cell.site || !v) && !(v = edge.right)) return;\n        var vx = x - v[0],\n          vy = y - v[1],\n          v2 = vx * vx + vy * vy;\n        if (v2 < d2) d2 = v2, i1 = v.index;\n      });\n    } while (i1 !== null);\n    that._found = i0;\n    return radius == null || d2 <= radius * radius ? cell.site : null;\n  }\n};","map":{"version":3,"names":["addBeach","removeBeach","sortCellHalfedges","cellHalfedgeStart","clipCells","firstCircle","clipEdges","RedBlackTree","epsilon","epsilon2","beaches","cells","circles","edges","triangleArea","a","b","c","lexicographic","Diagram","sites","extent","site","sort","pop","x","y","circle","Array","length","arc","x0","y0","x1","y1","prototype","constructor","polygons","map","cell","polygon","halfedges","i","data","triangles","forEach","m","j","s0","e1","s1","left","right","index","push","links","filter","edge","source","target","find","radius","that","i0","i1","_found","n","dx","dy","d2","e","v","vx","vy","v2"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/d3-voronoi/src/Diagram.js"],"sourcesContent":["import {addBeach, removeBeach} from \"./Beach\";\nimport {sortCellHalfedges, cellHalfedgeStart, clipCells} from \"./Cell\";\nimport {firstCircle} from \"./Circle\";\nimport {clipEdges} from \"./Edge\";\nimport RedBlackTree from \"./RedBlackTree\";\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var beaches;\nexport var cells;\nexport var circles;\nexport var edges;\n\nfunction triangleArea(a, b, c) {\n  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n}\n\nfunction lexicographic(a, b) {\n  return b[1] - a[1]\n      || b[0] - a[0];\n}\n\nexport default function Diagram(sites, extent) {\n  var site = sites.sort(lexicographic).pop(),\n      x,\n      y,\n      circle;\n\n  edges = [];\n  cells = new Array(sites.length);\n  beaches = new RedBlackTree;\n  circles = new RedBlackTree;\n\n  while (true) {\n    circle = firstCircle;\n    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\n      if (site[0] !== x || site[1] !== y) {\n        addBeach(site);\n        x = site[0], y = site[1];\n      }\n      site = sites.pop();\n    } else if (circle) {\n      removeBeach(circle.arc);\n    } else {\n      break;\n    }\n  }\n\n  sortCellHalfedges();\n\n  if (extent) {\n    var x0 = +extent[0][0],\n        y0 = +extent[0][1],\n        x1 = +extent[1][0],\n        y1 = +extent[1][1];\n    clipEdges(x0, y0, x1, y1);\n    clipCells(x0, y0, x1, y1);\n  }\n\n  this.edges = edges;\n  this.cells = cells;\n\n  beaches =\n  circles =\n  edges =\n  cells = null;\n}\n\nDiagram.prototype = {\n  constructor: Diagram,\n\n  polygons: function() {\n    var edges = this.edges;\n\n    return this.cells.map(function(cell) {\n      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\n      polygon.data = cell.site.data;\n      return polygon;\n    });\n  },\n\n  triangles: function() {\n    var triangles = [],\n        edges = this.edges;\n\n    this.cells.forEach(function(cell, i) {\n      if (!(m = (halfedges = cell.halfedges).length)) return;\n      var site = cell.site,\n          halfedges,\n          j = -1,\n          m,\n          s0,\n          e1 = edges[halfedges[m - 1]],\n          s1 = e1.left === site ? e1.right : e1.left;\n\n      while (++j < m) {\n        s0 = s1;\n        e1 = edges[halfedges[j]];\n        s1 = e1.left === site ? e1.right : e1.left;\n        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n          triangles.push([site.data, s0.data, s1.data]);\n        }\n      }\n    });\n\n    return triangles;\n  },\n\n  links: function() {\n    return this.edges.filter(function(edge) {\n      return edge.right;\n    }).map(function(edge) {\n      return {\n        source: edge.left.data,\n        target: edge.right.data\n      };\n    });\n  },\n\n  find: function(x, y, radius) {\n    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;\n\n    // Use the previously-found cell, or start with an arbitrary one.\n    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;\n    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;\n\n    // Traverse the half-edges to find a closer cell, if any.\n    do {\n      cell = that.cells[i0 = i1], i1 = null;\n      cell.halfedges.forEach(function(e) {\n        var edge = that.edges[e], v = edge.left;\n        if ((v === cell.site || !v) && !(v = edge.right)) return;\n        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;\n        if (v2 < d2) d2 = v2, i1 = v.index;\n      });\n    } while (i1 !== null);\n\n    that._found = i0;\n\n    return radius == null || d2 <= radius * radius ? cell.site : null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}