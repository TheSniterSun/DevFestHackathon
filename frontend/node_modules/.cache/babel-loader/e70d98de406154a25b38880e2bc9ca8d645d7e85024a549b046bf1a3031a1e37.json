{"ast":null,"code":"import booleanPointInPolygon from '@turf/boolean-point-in-polygon';\nimport clone from '@turf/clone';\nimport { featureEach } from '@turf/meta';\n\n/**\n * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and/or {@link MultiPolygon|multipolygons} and performs a spatial join.\n *\n * @name tag\n * @param {FeatureCollection<Point>} points input points\n * @param {FeatureCollection<Polygon|MultiPolygon>} polygons input (multi)polygons\n * @param {string} field property in `polygons` to add to joined {<Point>} features\n * @param {string} outField property in `points` in which to store joined property from `polygons`\n * @returns {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`\n * @example\n * var pt1 = turf.point([-77, 44]);\n * var pt2 = turf.point([-77, 38]);\n * var poly1 = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]], {pop: 3000});\n * var poly2 = turf.polygon([[\n *   [-81, 35],\n *   [-81, 41],\n *   [-72, 41],\n *   [-72, 35],\n *   [-81, 35]\n * ]], {pop: 1000});\n *\n * var points = turf.featureCollection([pt1, pt2]);\n * var polygons = turf.featureCollection([poly1, poly2]);\n *\n * var tagged = turf.tag(points, polygons, 'pop', 'population');\n *\n * //addToMap\n * var addToMap = [tagged, polygons]\n */\nfunction tag(points, polygons, field, outField) {\n  // prevent mutations\n  points = clone(points);\n  polygons = clone(polygons);\n  featureEach(points, function (pt) {\n    if (!pt.properties) pt.properties = {};\n    featureEach(polygons, function (poly) {\n      if (pt.properties[outField] === undefined) {\n        if (booleanPointInPolygon(pt, poly)) pt.properties[outField] = poly.properties[field];\n      }\n    });\n  });\n  return points;\n}\nexport default tag;","map":{"version":3,"names":["booleanPointInPolygon","clone","featureEach","tag","points","polygons","field","outField","pt","properties","poly","undefined"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/tag/dist/es/index.js"],"sourcesContent":["import booleanPointInPolygon from '@turf/boolean-point-in-polygon';\nimport clone from '@turf/clone';\nimport { featureEach } from '@turf/meta';\n\n/**\n * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and/or {@link MultiPolygon|multipolygons} and performs a spatial join.\n *\n * @name tag\n * @param {FeatureCollection<Point>} points input points\n * @param {FeatureCollection<Polygon|MultiPolygon>} polygons input (multi)polygons\n * @param {string} field property in `polygons` to add to joined {<Point>} features\n * @param {string} outField property in `points` in which to store joined property from `polygons`\n * @returns {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`\n * @example\n * var pt1 = turf.point([-77, 44]);\n * var pt2 = turf.point([-77, 38]);\n * var poly1 = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]], {pop: 3000});\n * var poly2 = turf.polygon([[\n *   [-81, 35],\n *   [-81, 41],\n *   [-72, 41],\n *   [-72, 35],\n *   [-81, 35]\n * ]], {pop: 1000});\n *\n * var points = turf.featureCollection([pt1, pt2]);\n * var polygons = turf.featureCollection([poly1, poly2]);\n *\n * var tagged = turf.tag(points, polygons, 'pop', 'population');\n *\n * //addToMap\n * var addToMap = [tagged, polygons]\n */\nfunction tag(points, polygons, field, outField) {\n  // prevent mutations\n  points = clone(points);\n  polygons = clone(polygons);\n  featureEach(points, function (pt) {\n    if (!pt.properties) pt.properties = {};\n    featureEach(polygons, function (poly) {\n      if (pt.properties[outField] === undefined) {\n        if (booleanPointInPolygon(pt, poly))\n          pt.properties[outField] = poly.properties[field];\n      }\n    });\n  });\n  return points;\n}\n\nexport default tag;\n"],"mappings":"AAAA,OAAOA,qBAAqB,MAAM,gCAAgC;AAClE,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,WAAW,QAAQ,YAAY;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAGA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EAC9C;EACAH,MAAM,GAAGH,KAAK,CAACG,MAAM,CAAC;EACtBC,QAAQ,GAAGJ,KAAK,CAACI,QAAQ,CAAC;EAC1BH,WAAW,CAACE,MAAM,EAAE,UAAUI,EAAE,EAAE;IAChC,IAAI,CAACA,EAAE,CAACC,UAAU,EAAED,EAAE,CAACC,UAAU,GAAG,CAAC,CAAC;IACtCP,WAAW,CAACG,QAAQ,EAAE,UAAUK,IAAI,EAAE;MACpC,IAAIF,EAAE,CAACC,UAAU,CAACF,QAAQ,CAAC,KAAKI,SAAS,EAAE;QACzC,IAAIX,qBAAqB,CAACQ,EAAE,EAAEE,IAAI,CAAC,EACjCF,EAAE,CAACC,UAAU,CAACF,QAAQ,CAAC,GAAGG,IAAI,CAACD,UAAU,CAACH,KAAK,CAAC;MACpD;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOF,MAAM;AACf;AAEA,eAAeD,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}