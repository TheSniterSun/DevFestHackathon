{"ast":null,"code":"var _jsxFileName = \"/Users/brandonpae/Desktop/secra-code/frontend/src/components/chat/Event.js\";\nimport React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from '../NavBar';\nimport styles from './chat.module.css';\nimport axios from 'axios'; // Import Axios\n\nimport LoadingText from './AssistantResponse';\nimport AssistantResponse from './AssistantResponse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = 'auth'; // change as needed\n\nfunction Event(props) {\n  // <Event key={index} timeInfo={timeObj} summary={data.summary} location={data.location} timezone={data.timezone} />\n\n  const timeInfo = props.timeInfo;\n  const summary = props.summary;\n  const location = props.location;\n  const timezone = props.timezone;\n  const start = timeInfo['start'];\n  const end = timeInfo['end'];\n  const date = timeInfo['date'];\n  const display_tz = \"\";\n  if (timezone === \"US/Eastern\" || timezone === \"America/New_York\" || timezone === \"ET\") {\n    // handle only ET for now\n    display_tz == \"ET\";\n  }\n  let formatted_time = start + \" to \" + end + \" \" + display_tz;\n  console.log(\"Option \" + (i + 1) + \":\\nTime: \" + formatted_time + \"\\nDate: \" + date);\n  function submitQuery(event) {\n    event.preventDefault(); // prevent default form submission behavior (because we want to connect to BE endpoint)\n\n    setResponse(\"generating\"); // \"Generating response ... \"\n\n    axios({\n      method: \"POST\",\n      url: \"/gpt/submit\",\n      // endpoint in backend to login user and return access token\n      // remember, users module is just base url (e.g. localhost:5000/login but other modules are not\n      // e.g. localhost:5000/gpt/test)\n      // for some reason, proxy not working\n      baseURL: 'http://127.0.0.1:5000',\n      // for some reason, throws error with localhost\n      headers: {\n        Authorization: 'Bearer ' + props.token,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        username: username,\n        query: query\n      }\n    }).then(response => {\n      const data = response.data; // need to access the actual JSON data returned\n\n      // console.log(response);\n      console.log(data[\"success\"]);\n\n      // data is the JSON object returned by endpoint \"chat/submit\"\n      gpt_response = data.response;\n      console.log(gpt_response);\n\n      // setResponse(gpt_response);\n      setResponse(\"\"); // should be empty now\n\n      // NOW PARSE THE JSON TO OBTAIN THE RELEVANT EVENT INFORMATION:\n\n      let times = gpt_response['times']; // array of JSON objects\n      let num_times = times.length;\n      if (num_times === 0) {\n        throw new Error(\"No suggested times found\");\n      }\n\n      // OTHER EVENT PARAMS \n      let timezone = gpt_response['timezone'];\n      let summary = gpt_response['summary'];\n      let loc = gpt_response['location']; // location is a keyword in JS\n      let recurrence = gpt_response['recurrence'];\n\n      // iterate over the times and pass them into components to display\n\n      let start = \"\";\n      let end = \"\";\n      let date = \"\";\n      let time = \"\";\n\n      // edit this with React later\n      for (let i = 0; i < num_times; i++) {\n        time = times[i];\n        start = time['start'];\n        end = time['end'];\n        date = time['date'];\n        let display_tz = \"\";\n        if (timezone == \"US/Eastern\" || timezone == \"America/New_York\" || timezone == \"ET\") {\n          // handle only ET for now\n          display_tz = \"ET\";\n        }\n        let formatted_time = start + \" to \" + end + \" \" + display_tz;\n        console.log(\"Option \" + (i + 1) + \":\\nTime: \" + formatted_time + \"\\nDate: \" + date);\n      }\n\n      // pass the JSON info to the Assistant response\n\n      /*\n       Once GPT returns the list of times, we want to render them as separate options / components\n      All events should be similar/the same, except start, end, date\n      Create a new component with these fields, then just show them side by side\n      We need a way to figure out how to respond back with which option was clicked\n      Specifically, \n       */\n\n      // response is a JSON string, convert to JSON object\n      // gpt_response = JSON.parse(gpt_response)\n    }).catch(error => {\n      if (error.response) {\n        console.log(error.response);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n    });\n  }\n  function handleQueryChange(event) {\n    setQuery(event.target.value);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.eventCard,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.eventTime,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.icon,\n        children: \"\\uD83D\\uDD52\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.time,\n        children: \"12:30 - 12:45pm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.eventDate,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.icon,\n        children: \"\\uD83D\\uDCC5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.date,\n        children: \"8/10/23 - 8/31/23\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.addToCalendar,\n      children: \"Add to Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n}\n_c = Event;\nexport default Event;\nvar _c;\n$RefreshReg$(_c, \"Event\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useNavigate","NavBar","styles","axios","LoadingText","AssistantResponse","jsxDEV","_jsxDEV","URL","Event","props","timeInfo","summary","location","timezone","start","end","date","display_tz","formatted_time","console","log","i","submitQuery","event","preventDefault","setResponse","method","url","baseURL","headers","Authorization","token","data","username","query","then","response","gpt_response","times","num_times","length","Error","loc","recurrence","time","catch","error","status","handleQueryChange","setQuery","target","value","className","eventCard","children","eventTime","icon","fileName","_jsxFileName","lineNumber","columnNumber","eventDate","addToCalendar","_c","$RefreshReg$"],"sources":["/Users/brandonpae/Desktop/secra-code/frontend/src/components/chat/Event.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\n\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from '../NavBar';\n\nimport styles from './chat.module.css';\nimport axios from 'axios'; // Import Axios\n\nimport LoadingText from './AssistantResponse';\nimport AssistantResponse from './AssistantResponse';\n\nconst URL = 'auth'; // change as needed\n\nfunction Event(props) {\n    // <Event key={index} timeInfo={timeObj} summary={data.summary} location={data.location} timezone={data.timezone} />\n\n    const timeInfo = props.timeInfo;\n    const summary = props.summary;\n    const location = props.location;\n    const timezone = props.timezone;\n\n    const start = timeInfo['start'];\n    const end = timeInfo['end'];\n    const date = timeInfo['date'];\n\n    const display_tz = \"\";\n    \n    if (timezone === \"US/Eastern\" || timezone === \"America/New_York\" || timezone === \"ET\") { // handle only ET for now\n        display_tz == \"ET\";\n    }\n\n    let formatted_time = start + \" to \" + end + \" \" + display_tz;\n\n    console.log(\"Option \" + (i + 1) + \":\\nTime: \" + formatted_time + \"\\nDate: \" + date);\n\n    function submitQuery(event) {\n        event.preventDefault() // prevent default form submission behavior (because we want to connect to BE endpoint)\n        \n        setResponse(\"generating\"); // \"Generating response ... \"\n\n        axios({\n          method: \"POST\",\n          url:\"/gpt/submit\", // endpoint in backend to login user and return access token\n          // remember, users module is just base url (e.g. localhost:5000/login but other modules are not\n          // e.g. localhost:5000/gpt/test)\n          // for some reason, proxy not working\n          baseURL: 'http://127.0.0.1:5000', // for some reason, throws error with localhost\n          headers: {\n            Authorization: 'Bearer ' + props.token,\n            'Content-Type': 'application/json'\n          },\n          \n          data: {\n            username: username,\n            query: query,\n          }\n\n        })\n        .then((response) => {\n\n            const data = response.data; // need to access the actual JSON data returned\n\n            // console.log(response);\n            console.log(data[\"success\"])\n\n            // data is the JSON object returned by endpoint \"chat/submit\"\n            gpt_response = data.response;\n\n            console.log(gpt_response)\n\n            // setResponse(gpt_response);\n            setResponse(\"\") // should be empty now\n\n            // NOW PARSE THE JSON TO OBTAIN THE RELEVANT EVENT INFORMATION:\n            \n            let times = gpt_response['times']; // array of JSON objects\n            let num_times = times.length;\n\n            if (num_times === 0) {\n                throw new Error(\"No suggested times found\");\n            }\n\n            // OTHER EVENT PARAMS \n            let timezone = gpt_response['timezone']\n            let summary = gpt_response['summary'];\n            let loc = gpt_response['location']; // location is a keyword in JS\n            let recurrence = gpt_response['recurrence'];\n\n            // iterate over the times and pass them into components to display\n            \n            let start = \"\";\n            let end = \"\";\n            let date = \"\";\n\n            let time = \"\";\n\n            // edit this with React later\n            for (let i = 0; i < num_times; i++) {\n                time = times[i]\n\n                start = time['start'];\n                end = time['end'];\n                date = time['date'];\n\n                let display_tz = \"\";\n                \n                if (timezone == \"US/Eastern\" || timezone == \"America/New_York\" || timezone == \"ET\") { // handle only ET for now\n                    display_tz = \"ET\";\n                }\n\n                let formatted_time = start + \" to \" + end + \" \" + display_tz;\n\n                console.log(\"Option \" + (i + 1) + \":\\nTime: \" + formatted_time + \"\\nDate: \" + date);\n            }\n\n            // pass the JSON info to the Assistant response\n\n\n            /*\n\n            Once GPT returns the list of times, we want to render them as separate options / components\n            All events should be similar/the same, except start, end, date\n            Create a new component with these fields, then just show them side by side\n            We need a way to figure out how to respond back with which option was clicked\n            Specifically, \n\n            */\n\n\n            // response is a JSON string, convert to JSON object\n            // gpt_response = JSON.parse(gpt_response)\n\n        }).catch((error) => {\n          if (error.response) {\n            console.log(error.response)\n            console.log(error.response.status)\n            console.log(error.response.headers)\n            }\n        })\n    }\n\n    function handleQueryChange(event) {\n        setQuery(event.target.value);\n    }\n\n    return (\n        <div className={styles.eventCard}>\n          <div className={styles.eventTime}>\n            <span className={styles.icon}>🕒</span>\n            <span className={styles.time}>12:30 - 12:45pm</span>\n          </div>\n          <div className={styles.eventDate}>\n            <span className={styles.icon}>📅</span>\n            <span className={styles.date}>8/10/23 - 8/31/23</span>\n          </div>\n          <button className={styles.addToCalendar}>Add to Calendar</button>\n        </div>\n      );\n}\n\nexport default Event;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}