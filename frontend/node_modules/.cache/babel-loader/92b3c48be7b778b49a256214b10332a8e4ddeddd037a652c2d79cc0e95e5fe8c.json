{"ast":null,"code":"import circle from \"@turf/circle\";\nimport destination from \"@turf/destination\";\nimport { lineString } from \"@turf/helpers\";\n/**\n * Creates a circular arc, of a circle of the given radius and center point, between bearing1 and bearing2;\n * 0 bearing is North of center point, positive clockwise.\n *\n * @name lineArc\n * @param {Coord} center center point\n * @param {number} radius radius of the circle\n * @param {number} bearing1 angle, in decimal degrees, of the first radius of the arc\n * @param {number} bearing2 angle, in decimal degrees, of the second radius of the arc\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.steps=64] number of steps\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @returns {Feature<LineString>} line arc\n * @example\n * var center = turf.point([-75, 40]);\n * var radius = 5;\n * var bearing1 = 25;\n * var bearing2 = 47;\n *\n * var arc = turf.lineArc(center, radius, bearing1, bearing2);\n *\n * //addToMap\n * var addToMap = [center, arc]\n */\nexport default function lineArc(center, radius, bearing1, bearing2, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // default params\n  var steps = options.steps || 64;\n  var angle1 = convertAngleTo360(bearing1);\n  var angle2 = convertAngleTo360(bearing2);\n  var properties = !Array.isArray(center) && center.type === \"Feature\" ? center.properties : {};\n  // handle angle parameters\n  if (angle1 === angle2) {\n    return lineString(circle(center, radius, options).geometry.coordinates[0], properties);\n  }\n  var arcStartDegree = angle1;\n  var arcEndDegree = angle1 < angle2 ? angle2 : angle2 + 360;\n  var alfa = arcStartDegree;\n  var coordinates = [];\n  var i = 0;\n  while (alfa < arcEndDegree) {\n    coordinates.push(destination(center, radius, alfa, options).geometry.coordinates);\n    i++;\n    alfa = arcStartDegree + i * 360 / steps;\n  }\n  if (alfa > arcEndDegree) {\n    coordinates.push(destination(center, radius, arcEndDegree, options).geometry.coordinates);\n  }\n  return lineString(coordinates, properties);\n}\n/**\n * Takes any angle in  degrees\n * and returns a valid angle between 0-360 degrees\n *\n * @private\n * @param {number} alfa angle between -180-180 degrees\n * @returns {number} angle between 0-360 degrees\n */\nfunction convertAngleTo360(alfa) {\n  var beta = alfa % 360;\n  if (beta < 0) {\n    beta += 360;\n  }\n  return beta;\n}","map":{"version":3,"names":["circle","destination","lineString","lineArc","center","radius","bearing1","bearing2","options","steps","angle1","convertAngleTo360","angle2","properties","Array","isArray","type","geometry","coordinates","arcStartDegree","arcEndDegree","alfa","i","push","beta"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/line-arc/dist/es/index.js"],"sourcesContent":["import circle from \"@turf/circle\";\nimport destination from \"@turf/destination\";\nimport { lineString } from \"@turf/helpers\";\n/**\n * Creates a circular arc, of a circle of the given radius and center point, between bearing1 and bearing2;\n * 0 bearing is North of center point, positive clockwise.\n *\n * @name lineArc\n * @param {Coord} center center point\n * @param {number} radius radius of the circle\n * @param {number} bearing1 angle, in decimal degrees, of the first radius of the arc\n * @param {number} bearing2 angle, in decimal degrees, of the second radius of the arc\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.steps=64] number of steps\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @returns {Feature<LineString>} line arc\n * @example\n * var center = turf.point([-75, 40]);\n * var radius = 5;\n * var bearing1 = 25;\n * var bearing2 = 47;\n *\n * var arc = turf.lineArc(center, radius, bearing1, bearing2);\n *\n * //addToMap\n * var addToMap = [center, arc]\n */\nexport default function lineArc(center, radius, bearing1, bearing2, options) {\n    if (options === void 0) { options = {}; }\n    // default params\n    var steps = options.steps || 64;\n    var angle1 = convertAngleTo360(bearing1);\n    var angle2 = convertAngleTo360(bearing2);\n    var properties = !Array.isArray(center) && center.type === \"Feature\"\n        ? center.properties\n        : {};\n    // handle angle parameters\n    if (angle1 === angle2) {\n        return lineString(circle(center, radius, options).geometry.coordinates[0], properties);\n    }\n    var arcStartDegree = angle1;\n    var arcEndDegree = angle1 < angle2 ? angle2 : angle2 + 360;\n    var alfa = arcStartDegree;\n    var coordinates = [];\n    var i = 0;\n    while (alfa < arcEndDegree) {\n        coordinates.push(destination(center, radius, alfa, options).geometry.coordinates);\n        i++;\n        alfa = arcStartDegree + (i * 360) / steps;\n    }\n    if (alfa > arcEndDegree) {\n        coordinates.push(destination(center, radius, arcEndDegree, options).geometry.coordinates);\n    }\n    return lineString(coordinates, properties);\n}\n/**\n * Takes any angle in  degrees\n * and returns a valid angle between 0-360 degrees\n *\n * @private\n * @param {number} alfa angle between -180-180 degrees\n * @returns {number} angle between 0-360 degrees\n */\nfunction convertAngleTo360(alfa) {\n    var beta = alfa % 360;\n    if (beta < 0) {\n        beta += 360;\n    }\n    return beta;\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,cAAc;AACjC,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,SAASC,UAAU,QAAQ,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,OAAOA,CAACC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACzE,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC;EACA,IAAIC,KAAK,GAAGD,OAAO,CAACC,KAAK,IAAI,EAAE;EAC/B,IAAIC,MAAM,GAAGC,iBAAiB,CAACL,QAAQ,CAAC;EACxC,IAAIM,MAAM,GAAGD,iBAAiB,CAACJ,QAAQ,CAAC;EACxC,IAAIM,UAAU,GAAG,CAACC,KAAK,CAACC,OAAO,CAACX,MAAM,CAAC,IAAIA,MAAM,CAACY,IAAI,KAAK,SAAS,GAC9DZ,MAAM,CAACS,UAAU,GACjB,CAAC,CAAC;EACR;EACA,IAAIH,MAAM,KAAKE,MAAM,EAAE;IACnB,OAAOV,UAAU,CAACF,MAAM,CAACI,MAAM,EAAEC,MAAM,EAAEG,OAAO,CAAC,CAACS,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,EAAEL,UAAU,CAAC;EAC1F;EACA,IAAIM,cAAc,GAAGT,MAAM;EAC3B,IAAIU,YAAY,GAAGV,MAAM,GAAGE,MAAM,GAAGA,MAAM,GAAGA,MAAM,GAAG,GAAG;EAC1D,IAAIS,IAAI,GAAGF,cAAc;EACzB,IAAID,WAAW,GAAG,EAAE;EACpB,IAAII,CAAC,GAAG,CAAC;EACT,OAAOD,IAAI,GAAGD,YAAY,EAAE;IACxBF,WAAW,CAACK,IAAI,CAACtB,WAAW,CAACG,MAAM,EAAEC,MAAM,EAAEgB,IAAI,EAAEb,OAAO,CAAC,CAACS,QAAQ,CAACC,WAAW,CAAC;IACjFI,CAAC,EAAE;IACHD,IAAI,GAAGF,cAAc,GAAIG,CAAC,GAAG,GAAG,GAAIb,KAAK;EAC7C;EACA,IAAIY,IAAI,GAAGD,YAAY,EAAE;IACrBF,WAAW,CAACK,IAAI,CAACtB,WAAW,CAACG,MAAM,EAAEC,MAAM,EAAEe,YAAY,EAAEZ,OAAO,CAAC,CAACS,QAAQ,CAACC,WAAW,CAAC;EAC7F;EACA,OAAOhB,UAAU,CAACgB,WAAW,EAAEL,UAAU,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,iBAAiBA,CAACU,IAAI,EAAE;EAC7B,IAAIG,IAAI,GAAGH,IAAI,GAAG,GAAG;EACrB,IAAIG,IAAI,GAAG,CAAC,EAAE;IACVA,IAAI,IAAI,GAAG;EACf;EACA,OAAOA,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}