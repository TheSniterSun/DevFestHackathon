{"ast":null,"code":"import GeojsonEquality from \"geojson-equality\";\nimport cleanCoords from \"@turf/clean-coords\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Determine whether two geometries of the same type have identical X,Y coordinate values.\n * See http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm\n *\n * @name booleanEqual\n * @param {Geometry|Feature} feature1 GeoJSON input\n * @param {Geometry|Feature} feature2 GeoJSON input\n * @returns {boolean} true if the objects are equal, false otherwise\n * @example\n * var pt1 = turf.point([0, 0]);\n * var pt2 = turf.point([0, 0]);\n * var pt3 = turf.point([1, 1]);\n *\n * turf.booleanEqual(pt1, pt2);\n * //= true\n * turf.booleanEqual(pt2, pt3);\n * //= false\n */\nfunction booleanEqual(feature1, feature2) {\n  var type1 = getGeom(feature1).type;\n  var type2 = getGeom(feature2).type;\n  if (type1 !== type2) return false;\n  var equality = new GeojsonEquality({\n    precision: 6\n  });\n  return equality.compare(cleanCoords(feature1), cleanCoords(feature2));\n}\nexport default booleanEqual;","map":{"version":3,"names":["GeojsonEquality","cleanCoords","getGeom","booleanEqual","feature1","feature2","type1","type","type2","equality","precision","compare"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/boolean-equal/dist/es/index.js"],"sourcesContent":["import GeojsonEquality from \"geojson-equality\";\nimport cleanCoords from \"@turf/clean-coords\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Determine whether two geometries of the same type have identical X,Y coordinate values.\n * See http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm\n *\n * @name booleanEqual\n * @param {Geometry|Feature} feature1 GeoJSON input\n * @param {Geometry|Feature} feature2 GeoJSON input\n * @returns {boolean} true if the objects are equal, false otherwise\n * @example\n * var pt1 = turf.point([0, 0]);\n * var pt2 = turf.point([0, 0]);\n * var pt3 = turf.point([1, 1]);\n *\n * turf.booleanEqual(pt1, pt2);\n * //= true\n * turf.booleanEqual(pt2, pt3);\n * //= false\n */\nfunction booleanEqual(feature1, feature2) {\n    var type1 = getGeom(feature1).type;\n    var type2 = getGeom(feature2).type;\n    if (type1 !== type2)\n        return false;\n    var equality = new GeojsonEquality({ precision: 6 });\n    return equality.compare(cleanCoords(feature1), cleanCoords(feature2));\n}\nexport default booleanEqual;\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,kBAAkB;AAC9C,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,SAASC,OAAO,QAAQ,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EACtC,IAAIC,KAAK,GAAGJ,OAAO,CAACE,QAAQ,CAAC,CAACG,IAAI;EAClC,IAAIC,KAAK,GAAGN,OAAO,CAACG,QAAQ,CAAC,CAACE,IAAI;EAClC,IAAID,KAAK,KAAKE,KAAK,EACf,OAAO,KAAK;EAChB,IAAIC,QAAQ,GAAG,IAAIT,eAAe,CAAC;IAAEU,SAAS,EAAE;EAAE,CAAC,CAAC;EACpD,OAAOD,QAAQ,CAACE,OAAO,CAACV,WAAW,CAACG,QAAQ,CAAC,EAAEH,WAAW,CAACI,QAAQ,CAAC,CAAC;AACzE;AACA,eAAeF,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}