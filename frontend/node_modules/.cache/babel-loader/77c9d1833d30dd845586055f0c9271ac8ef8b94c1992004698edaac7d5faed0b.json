{"ast":null,"code":"import { getCoords } from \"@turf/invariant\";\n/**\n * Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.\n *\n * @name booleanClockwise\n * @param {Feature<LineString>|LineString|Array<Array<number>>} line to be evaluated\n * @returns {boolean} true/false\n * @example\n * var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\n * var counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n *\n * turf.booleanClockwise(clockwiseRing)\n * //=true\n * turf.booleanClockwise(counterClockwiseRing)\n * //=false\n */\nexport default function booleanClockwise(line) {\n  var ring = getCoords(line);\n  var sum = 0;\n  var i = 1;\n  var prev;\n  var cur;\n  while (i < ring.length) {\n    prev = cur || ring[0];\n    cur = ring[i];\n    sum += (cur[0] - prev[0]) * (cur[1] + prev[1]);\n    i++;\n  }\n  return sum > 0;\n}","map":{"version":3,"names":["getCoords","booleanClockwise","line","ring","sum","i","prev","cur","length"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/boolean-clockwise/dist/es/index.js"],"sourcesContent":["import { getCoords } from \"@turf/invariant\";\n/**\n * Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.\n *\n * @name booleanClockwise\n * @param {Feature<LineString>|LineString|Array<Array<number>>} line to be evaluated\n * @returns {boolean} true/false\n * @example\n * var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\n * var counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n *\n * turf.booleanClockwise(clockwiseRing)\n * //=true\n * turf.booleanClockwise(counterClockwiseRing)\n * //=false\n */\nexport default function booleanClockwise(line) {\n    var ring = getCoords(line);\n    var sum = 0;\n    var i = 1;\n    var prev;\n    var cur;\n    while (i < ring.length) {\n        prev = cur || ring[0];\n        cur = ring[i];\n        sum += (cur[0] - prev[0]) * (cur[1] + prev[1]);\n        i++;\n    }\n    return sum > 0;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,gBAAgBA,CAACC,IAAI,EAAE;EAC3C,IAAIC,IAAI,GAAGH,SAAS,CAACE,IAAI,CAAC;EAC1B,IAAIE,GAAG,GAAG,CAAC;EACX,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,IAAI;EACR,IAAIC,GAAG;EACP,OAAOF,CAAC,GAAGF,IAAI,CAACK,MAAM,EAAE;IACpBF,IAAI,GAAGC,GAAG,IAAIJ,IAAI,CAAC,CAAC,CAAC;IACrBI,GAAG,GAAGJ,IAAI,CAACE,CAAC,CAAC;IACbD,GAAG,IAAI,CAACG,GAAG,CAAC,CAAC,CAAC,GAAGD,IAAI,CAAC,CAAC,CAAC,KAAKC,GAAG,CAAC,CAAC,CAAC,GAAGD,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9CD,CAAC,EAAE;EACP;EACA,OAAOD,GAAG,GAAG,CAAC;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}