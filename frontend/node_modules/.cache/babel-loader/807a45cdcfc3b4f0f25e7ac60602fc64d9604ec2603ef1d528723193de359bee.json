{"ast":null,"code":"/**\n * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.\n *\n * @name clone\n * @param {GeoJSON} geojson GeoJSON Object\n * @returns {GeoJSON} cloned GeoJSON Object\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n *\n * var lineCloned = turf.clone(line);\n */\nfunction clone(geojson) {\n  if (!geojson) {\n    throw new Error(\"geojson is required\");\n  }\n  switch (geojson.type) {\n    case \"Feature\":\n      return cloneFeature(geojson);\n    case \"FeatureCollection\":\n      return cloneFeatureCollection(geojson);\n    case \"Point\":\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiPoint\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n    case \"GeometryCollection\":\n      return cloneGeometry(geojson);\n    default:\n      throw new Error(\"unknown GeoJSON type\");\n  }\n}\n/**\n * Clone Feature\n *\n * @private\n * @param {Feature<any>} geojson GeoJSON Feature\n * @returns {Feature<any>} cloned Feature\n */\nfunction cloneFeature(geojson) {\n  var cloned = {\n    type: \"Feature\"\n  };\n  // Preserve Foreign Members\n  Object.keys(geojson).forEach(function (key) {\n    switch (key) {\n      case \"type\":\n      case \"properties\":\n      case \"geometry\":\n        return;\n      default:\n        cloned[key] = geojson[key];\n    }\n  });\n  // Add properties & geometry last\n  cloned.properties = cloneProperties(geojson.properties);\n  cloned.geometry = cloneGeometry(geojson.geometry);\n  return cloned;\n}\n/**\n * Clone Properties\n *\n * @private\n * @param {Object} properties GeoJSON Properties\n * @returns {Object} cloned Properties\n */\nfunction cloneProperties(properties) {\n  var cloned = {};\n  if (!properties) {\n    return cloned;\n  }\n  Object.keys(properties).forEach(function (key) {\n    var value = properties[key];\n    if (typeof value === \"object\") {\n      if (value === null) {\n        // handle null\n        cloned[key] = null;\n      } else if (Array.isArray(value)) {\n        // handle Array\n        cloned[key] = value.map(function (item) {\n          return item;\n        });\n      } else {\n        // handle generic Object\n        cloned[key] = cloneProperties(value);\n      }\n    } else {\n      cloned[key] = value;\n    }\n  });\n  return cloned;\n}\n/**\n * Clone Feature Collection\n *\n * @private\n * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection\n * @returns {FeatureCollection<any>} cloned Feature Collection\n */\nfunction cloneFeatureCollection(geojson) {\n  var cloned = {\n    type: \"FeatureCollection\"\n  };\n  // Preserve Foreign Members\n  Object.keys(geojson).forEach(function (key) {\n    switch (key) {\n      case \"type\":\n      case \"features\":\n        return;\n      default:\n        cloned[key] = geojson[key];\n    }\n  });\n  // Add features\n  cloned.features = geojson.features.map(function (feature) {\n    return cloneFeature(feature);\n  });\n  return cloned;\n}\n/**\n * Clone Geometry\n *\n * @private\n * @param {Geometry<any>} geometry GeoJSON Geometry\n * @returns {Geometry<any>} cloned Geometry\n */\nfunction cloneGeometry(geometry) {\n  var geom = {\n    type: geometry.type\n  };\n  if (geometry.bbox) {\n    geom.bbox = geometry.bbox;\n  }\n  if (geometry.type === \"GeometryCollection\") {\n    geom.geometries = geometry.geometries.map(function (g) {\n      return cloneGeometry(g);\n    });\n    return geom;\n  }\n  geom.coordinates = deepSlice(geometry.coordinates);\n  return geom;\n}\n/**\n * Deep Slice coordinates\n *\n * @private\n * @param {Coordinates} coords Coordinates\n * @returns {Coordinates} all coordinates sliced\n */\nfunction deepSlice(coords) {\n  var cloned = coords;\n  if (typeof cloned[0] !== \"object\") {\n    return cloned.slice();\n  }\n  return cloned.map(function (coord) {\n    return deepSlice(coord);\n  });\n}\nexport default clone;","map":{"version":3,"names":["clone","geojson","Error","type","cloneFeature","cloneFeatureCollection","cloneGeometry","cloned","Object","keys","forEach","key","properties","cloneProperties","geometry","value","Array","isArray","map","item","features","feature","geom","bbox","geometries","g","coordinates","deepSlice","coords","slice","coord"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/clone/dist/es/index.js"],"sourcesContent":["/**\n * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.\n *\n * @name clone\n * @param {GeoJSON} geojson GeoJSON Object\n * @returns {GeoJSON} cloned GeoJSON Object\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n *\n * var lineCloned = turf.clone(line);\n */\nfunction clone(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    switch (geojson.type) {\n        case \"Feature\":\n            return cloneFeature(geojson);\n        case \"FeatureCollection\":\n            return cloneFeatureCollection(geojson);\n        case \"Point\":\n        case \"LineString\":\n        case \"Polygon\":\n        case \"MultiPoint\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\":\n        case \"GeometryCollection\":\n            return cloneGeometry(geojson);\n        default:\n            throw new Error(\"unknown GeoJSON type\");\n    }\n}\n/**\n * Clone Feature\n *\n * @private\n * @param {Feature<any>} geojson GeoJSON Feature\n * @returns {Feature<any>} cloned Feature\n */\nfunction cloneFeature(geojson) {\n    var cloned = { type: \"Feature\" };\n    // Preserve Foreign Members\n    Object.keys(geojson).forEach(function (key) {\n        switch (key) {\n            case \"type\":\n            case \"properties\":\n            case \"geometry\":\n                return;\n            default:\n                cloned[key] = geojson[key];\n        }\n    });\n    // Add properties & geometry last\n    cloned.properties = cloneProperties(geojson.properties);\n    cloned.geometry = cloneGeometry(geojson.geometry);\n    return cloned;\n}\n/**\n * Clone Properties\n *\n * @private\n * @param {Object} properties GeoJSON Properties\n * @returns {Object} cloned Properties\n */\nfunction cloneProperties(properties) {\n    var cloned = {};\n    if (!properties) {\n        return cloned;\n    }\n    Object.keys(properties).forEach(function (key) {\n        var value = properties[key];\n        if (typeof value === \"object\") {\n            if (value === null) {\n                // handle null\n                cloned[key] = null;\n            }\n            else if (Array.isArray(value)) {\n                // handle Array\n                cloned[key] = value.map(function (item) {\n                    return item;\n                });\n            }\n            else {\n                // handle generic Object\n                cloned[key] = cloneProperties(value);\n            }\n        }\n        else {\n            cloned[key] = value;\n        }\n    });\n    return cloned;\n}\n/**\n * Clone Feature Collection\n *\n * @private\n * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection\n * @returns {FeatureCollection<any>} cloned Feature Collection\n */\nfunction cloneFeatureCollection(geojson) {\n    var cloned = { type: \"FeatureCollection\" };\n    // Preserve Foreign Members\n    Object.keys(geojson).forEach(function (key) {\n        switch (key) {\n            case \"type\":\n            case \"features\":\n                return;\n            default:\n                cloned[key] = geojson[key];\n        }\n    });\n    // Add features\n    cloned.features = geojson.features.map(function (feature) {\n        return cloneFeature(feature);\n    });\n    return cloned;\n}\n/**\n * Clone Geometry\n *\n * @private\n * @param {Geometry<any>} geometry GeoJSON Geometry\n * @returns {Geometry<any>} cloned Geometry\n */\nfunction cloneGeometry(geometry) {\n    var geom = { type: geometry.type };\n    if (geometry.bbox) {\n        geom.bbox = geometry.bbox;\n    }\n    if (geometry.type === \"GeometryCollection\") {\n        geom.geometries = geometry.geometries.map(function (g) {\n            return cloneGeometry(g);\n        });\n        return geom;\n    }\n    geom.coordinates = deepSlice(geometry.coordinates);\n    return geom;\n}\n/**\n * Deep Slice coordinates\n *\n * @private\n * @param {Coordinates} coords Coordinates\n * @returns {Coordinates} all coordinates sliced\n */\nfunction deepSlice(coords) {\n    var cloned = coords;\n    if (typeof cloned[0] !== \"object\") {\n        return cloned.slice();\n    }\n    return cloned.map(function (coord) {\n        return deepSlice(coord);\n    });\n}\nexport default clone;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAKA,CAACC,OAAO,EAAE;EACpB,IAAI,CAACA,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EAC1C;EACA,QAAQD,OAAO,CAACE,IAAI;IAChB,KAAK,SAAS;MACV,OAAOC,YAAY,CAACH,OAAO,CAAC;IAChC,KAAK,mBAAmB;MACpB,OAAOI,sBAAsB,CAACJ,OAAO,CAAC;IAC1C,KAAK,OAAO;IACZ,KAAK,YAAY;IACjB,KAAK,SAAS;IACd,KAAK,YAAY;IACjB,KAAK,iBAAiB;IACtB,KAAK,cAAc;IACnB,KAAK,oBAAoB;MACrB,OAAOK,aAAa,CAACL,OAAO,CAAC;IACjC;MACI,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EAC/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,YAAYA,CAACH,OAAO,EAAE;EAC3B,IAAIM,MAAM,GAAG;IAAEJ,IAAI,EAAE;EAAU,CAAC;EAChC;EACAK,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC,CAACS,OAAO,CAAC,UAAUC,GAAG,EAAE;IACxC,QAAQA,GAAG;MACP,KAAK,MAAM;MACX,KAAK,YAAY;MACjB,KAAK,UAAU;QACX;MACJ;QACIJ,MAAM,CAACI,GAAG,CAAC,GAAGV,OAAO,CAACU,GAAG,CAAC;IAClC;EACJ,CAAC,CAAC;EACF;EACAJ,MAAM,CAACK,UAAU,GAAGC,eAAe,CAACZ,OAAO,CAACW,UAAU,CAAC;EACvDL,MAAM,CAACO,QAAQ,GAAGR,aAAa,CAACL,OAAO,CAACa,QAAQ,CAAC;EACjD,OAAOP,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,eAAeA,CAACD,UAAU,EAAE;EACjC,IAAIL,MAAM,GAAG,CAAC,CAAC;EACf,IAAI,CAACK,UAAU,EAAE;IACb,OAAOL,MAAM;EACjB;EACAC,MAAM,CAACC,IAAI,CAACG,UAAU,CAAC,CAACF,OAAO,CAAC,UAAUC,GAAG,EAAE;IAC3C,IAAII,KAAK,GAAGH,UAAU,CAACD,GAAG,CAAC;IAC3B,IAAI,OAAOI,KAAK,KAAK,QAAQ,EAAE;MAC3B,IAAIA,KAAK,KAAK,IAAI,EAAE;QAChB;QACAR,MAAM,CAACI,GAAG,CAAC,GAAG,IAAI;MACtB,CAAC,MACI,IAAIK,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;QAC3B;QACAR,MAAM,CAACI,GAAG,CAAC,GAAGI,KAAK,CAACG,GAAG,CAAC,UAAUC,IAAI,EAAE;UACpC,OAAOA,IAAI;QACf,CAAC,CAAC;MACN,CAAC,MACI;QACD;QACAZ,MAAM,CAACI,GAAG,CAAC,GAAGE,eAAe,CAACE,KAAK,CAAC;MACxC;IACJ,CAAC,MACI;MACDR,MAAM,CAACI,GAAG,CAAC,GAAGI,KAAK;IACvB;EACJ,CAAC,CAAC;EACF,OAAOR,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,sBAAsBA,CAACJ,OAAO,EAAE;EACrC,IAAIM,MAAM,GAAG;IAAEJ,IAAI,EAAE;EAAoB,CAAC;EAC1C;EACAK,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC,CAACS,OAAO,CAAC,UAAUC,GAAG,EAAE;IACxC,QAAQA,GAAG;MACP,KAAK,MAAM;MACX,KAAK,UAAU;QACX;MACJ;QACIJ,MAAM,CAACI,GAAG,CAAC,GAAGV,OAAO,CAACU,GAAG,CAAC;IAClC;EACJ,CAAC,CAAC;EACF;EACAJ,MAAM,CAACa,QAAQ,GAAGnB,OAAO,CAACmB,QAAQ,CAACF,GAAG,CAAC,UAAUG,OAAO,EAAE;IACtD,OAAOjB,YAAY,CAACiB,OAAO,CAAC;EAChC,CAAC,CAAC;EACF,OAAOd,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,aAAaA,CAACQ,QAAQ,EAAE;EAC7B,IAAIQ,IAAI,GAAG;IAAEnB,IAAI,EAAEW,QAAQ,CAACX;EAAK,CAAC;EAClC,IAAIW,QAAQ,CAACS,IAAI,EAAE;IACfD,IAAI,CAACC,IAAI,GAAGT,QAAQ,CAACS,IAAI;EAC7B;EACA,IAAIT,QAAQ,CAACX,IAAI,KAAK,oBAAoB,EAAE;IACxCmB,IAAI,CAACE,UAAU,GAAGV,QAAQ,CAACU,UAAU,CAACN,GAAG,CAAC,UAAUO,CAAC,EAAE;MACnD,OAAOnB,aAAa,CAACmB,CAAC,CAAC;IAC3B,CAAC,CAAC;IACF,OAAOH,IAAI;EACf;EACAA,IAAI,CAACI,WAAW,GAAGC,SAAS,CAACb,QAAQ,CAACY,WAAW,CAAC;EAClD,OAAOJ,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,SAASA,CAACC,MAAM,EAAE;EACvB,IAAIrB,MAAM,GAAGqB,MAAM;EACnB,IAAI,OAAOrB,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAC/B,OAAOA,MAAM,CAACsB,KAAK,CAAC,CAAC;EACzB;EACA,OAAOtB,MAAM,CAACW,GAAG,CAAC,UAAUY,KAAK,EAAE;IAC/B,OAAOH,SAAS,CAACG,KAAK,CAAC;EAC3B,CAAC,CAAC;AACN;AACA,eAAe9B,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}