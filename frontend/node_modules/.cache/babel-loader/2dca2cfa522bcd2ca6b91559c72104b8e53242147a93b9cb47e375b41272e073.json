{"ast":null,"code":"import distance from \"@turf/distance\";\nimport intersect from \"@turf/intersect\";\nimport { polygon, featureCollection } from \"@turf/helpers\";\n/**\n * Takes a bounding box and the diameter of the cell and returns a {@link FeatureCollection} of flat-topped\n * hexagons or triangles ({@link Polygon} features) aligned in an \"odd-q\" vertical grid as\n * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).\n *\n * @name hexGrid\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSide length of the side of the the hexagons or triangles, in units. It will also coincide with the\n * radius of the circumcircle of the hexagons.\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] used in calculating cell size, can be degrees, radians, miles, or kilometers\n * @param {Object} [options.properties={}] passed to each hexagon or triangle of the grid\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {boolean} [options.triangles=false] whether to return as triangles instead of hexagons\n * @returns {FeatureCollection<Polygon>} a hexagonal grid\n * @example\n * var bbox = [-96,31,-84,40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var hexgrid = turf.hexGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [hexgrid];\n */\nfunction hexGrid(bbox, cellSide, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // Issue => https://github.com/Turfjs/turf/issues/1284\n  var clonedProperties = JSON.stringify(options.properties || {});\n  var west = bbox[0],\n    south = bbox[1],\n    east = bbox[2],\n    north = bbox[3];\n  var centerY = (south + north) / 2;\n  var centerX = (west + east) / 2;\n  // https://github.com/Turfjs/turf/issues/758\n  var xFraction = cellSide * 2 / distance([west, centerY], [east, centerY], options);\n  var cellWidth = xFraction * (east - west);\n  var yFraction = cellSide * 2 / distance([centerX, south], [centerX, north], options);\n  var cellHeight = yFraction * (north - south);\n  var radius = cellWidth / 2;\n  var hex_width = radius * 2;\n  var hex_height = Math.sqrt(3) / 2 * cellHeight;\n  var box_width = east - west;\n  var box_height = north - south;\n  var x_interval = 3 / 4 * hex_width;\n  var y_interval = hex_height;\n  // adjust box_width so all hexagons will be inside the bbox\n  var x_span = (box_width - hex_width) / (hex_width - radius / 2);\n  var x_count = Math.floor(x_span);\n  var x_adjust = (x_count * x_interval - radius / 2 - box_width) / 2 - radius / 2 + x_interval / 2;\n  // adjust box_height so all hexagons will be inside the bbox\n  var y_count = Math.floor((box_height - hex_height) / hex_height);\n  var y_adjust = (box_height - y_count * hex_height) / 2;\n  var hasOffsetY = y_count * hex_height - box_height > hex_height / 2;\n  if (hasOffsetY) {\n    y_adjust -= hex_height / 4;\n  }\n  // Precompute cosines and sines of angles used in hexagon creation for performance gain\n  var cosines = [];\n  var sines = [];\n  for (var i = 0; i < 6; i++) {\n    var angle = 2 * Math.PI / 6 * i;\n    cosines.push(Math.cos(angle));\n    sines.push(Math.sin(angle));\n  }\n  var results = [];\n  for (var x = 0; x <= x_count; x++) {\n    for (var y = 0; y <= y_count; y++) {\n      var isOdd = x % 2 === 1;\n      if (y === 0 && isOdd) continue;\n      if (y === 0 && hasOffsetY) continue;\n      var center_x = x * x_interval + west - x_adjust;\n      var center_y = y * y_interval + south + y_adjust;\n      if (isOdd) {\n        center_y -= hex_height / 2;\n      }\n      if (options.triangles === true) {\n        hexTriangles([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines).forEach(function (triangle) {\n          if (options.mask) {\n            if (intersect(options.mask, triangle)) results.push(triangle);\n          } else {\n            results.push(triangle);\n          }\n        });\n      } else {\n        var hex = hexagon([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines);\n        if (options.mask) {\n          if (intersect(options.mask, hex)) results.push(hex);\n        } else {\n          results.push(hex);\n        }\n      }\n    }\n  }\n  return featureCollection(results);\n}\n/**\n * Creates hexagon\n *\n * @private\n * @param {Array<number>} center of the hexagon\n * @param {number} rx half hexagon width\n * @param {number} ry half hexagon height\n * @param {Object} properties passed to each hexagon\n * @param {Array<number>} cosines precomputed\n * @param {Array<number>} sines precomputed\n * @returns {Feature<Polygon>} hexagon\n */\nfunction hexagon(center, rx, ry, properties, cosines, sines) {\n  var vertices = [];\n  for (var i = 0; i < 6; i++) {\n    var x = center[0] + rx * cosines[i];\n    var y = center[1] + ry * sines[i];\n    vertices.push([x, y]);\n  }\n  //first and last vertex must be the same\n  vertices.push(vertices[0].slice());\n  return polygon([vertices], properties);\n}\n/**\n * Creates triangles composing an hexagon\n *\n * @private\n * @param {Array<number>} center of the hexagon\n * @param {number} rx half triangle width\n * @param {number} ry half triangle height\n * @param {Object} properties passed to each triangle\n * @param {Array<number>} cosines precomputed\n * @param {Array<number>} sines precomputed\n * @returns {Array<Feature<Polygon>>} triangles\n */\nfunction hexTriangles(center, rx, ry, properties, cosines, sines) {\n  var triangles = [];\n  for (var i = 0; i < 6; i++) {\n    var vertices = [];\n    vertices.push(center);\n    vertices.push([center[0] + rx * cosines[i], center[1] + ry * sines[i]]);\n    vertices.push([center[0] + rx * cosines[(i + 1) % 6], center[1] + ry * sines[(i + 1) % 6]]);\n    vertices.push(center);\n    triangles.push(polygon([vertices], properties));\n  }\n  return triangles;\n}\nexport default hexGrid;","map":{"version":3,"names":["distance","intersect","polygon","featureCollection","hexGrid","bbox","cellSide","options","clonedProperties","JSON","stringify","properties","west","south","east","north","centerY","centerX","xFraction","cellWidth","yFraction","cellHeight","radius","hex_width","hex_height","Math","sqrt","box_width","box_height","x_interval","y_interval","x_span","x_count","floor","x_adjust","y_count","y_adjust","hasOffsetY","cosines","sines","i","angle","PI","push","cos","sin","results","x","y","isOdd","center_x","center_y","triangles","hexTriangles","parse","forEach","triangle","mask","hex","hexagon","center","rx","ry","vertices","slice"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/hex-grid/dist/es/index.js"],"sourcesContent":["import distance from \"@turf/distance\";\nimport intersect from \"@turf/intersect\";\nimport { polygon, featureCollection, } from \"@turf/helpers\";\n/**\n * Takes a bounding box and the diameter of the cell and returns a {@link FeatureCollection} of flat-topped\n * hexagons or triangles ({@link Polygon} features) aligned in an \"odd-q\" vertical grid as\n * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).\n *\n * @name hexGrid\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSide length of the side of the the hexagons or triangles, in units. It will also coincide with the\n * radius of the circumcircle of the hexagons.\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] used in calculating cell size, can be degrees, radians, miles, or kilometers\n * @param {Object} [options.properties={}] passed to each hexagon or triangle of the grid\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {boolean} [options.triangles=false] whether to return as triangles instead of hexagons\n * @returns {FeatureCollection<Polygon>} a hexagonal grid\n * @example\n * var bbox = [-96,31,-84,40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var hexgrid = turf.hexGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [hexgrid];\n */\nfunction hexGrid(bbox, cellSide, options) {\n    if (options === void 0) { options = {}; }\n    // Issue => https://github.com/Turfjs/turf/issues/1284\n    var clonedProperties = JSON.stringify(options.properties || {});\n    var west = bbox[0], south = bbox[1], east = bbox[2], north = bbox[3];\n    var centerY = (south + north) / 2;\n    var centerX = (west + east) / 2;\n    // https://github.com/Turfjs/turf/issues/758\n    var xFraction = (cellSide * 2) / distance([west, centerY], [east, centerY], options);\n    var cellWidth = xFraction * (east - west);\n    var yFraction = (cellSide * 2) / distance([centerX, south], [centerX, north], options);\n    var cellHeight = yFraction * (north - south);\n    var radius = cellWidth / 2;\n    var hex_width = radius * 2;\n    var hex_height = (Math.sqrt(3) / 2) * cellHeight;\n    var box_width = east - west;\n    var box_height = north - south;\n    var x_interval = (3 / 4) * hex_width;\n    var y_interval = hex_height;\n    // adjust box_width so all hexagons will be inside the bbox\n    var x_span = (box_width - hex_width) / (hex_width - radius / 2);\n    var x_count = Math.floor(x_span);\n    var x_adjust = (x_count * x_interval - radius / 2 - box_width) / 2 -\n        radius / 2 +\n        x_interval / 2;\n    // adjust box_height so all hexagons will be inside the bbox\n    var y_count = Math.floor((box_height - hex_height) / hex_height);\n    var y_adjust = (box_height - y_count * hex_height) / 2;\n    var hasOffsetY = y_count * hex_height - box_height > hex_height / 2;\n    if (hasOffsetY) {\n        y_adjust -= hex_height / 4;\n    }\n    // Precompute cosines and sines of angles used in hexagon creation for performance gain\n    var cosines = [];\n    var sines = [];\n    for (var i = 0; i < 6; i++) {\n        var angle = ((2 * Math.PI) / 6) * i;\n        cosines.push(Math.cos(angle));\n        sines.push(Math.sin(angle));\n    }\n    var results = [];\n    for (var x = 0; x <= x_count; x++) {\n        for (var y = 0; y <= y_count; y++) {\n            var isOdd = x % 2 === 1;\n            if (y === 0 && isOdd)\n                continue;\n            if (y === 0 && hasOffsetY)\n                continue;\n            var center_x = x * x_interval + west - x_adjust;\n            var center_y = y * y_interval + south + y_adjust;\n            if (isOdd) {\n                center_y -= hex_height / 2;\n            }\n            if (options.triangles === true) {\n                hexTriangles([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines).forEach(function (triangle) {\n                    if (options.mask) {\n                        if (intersect(options.mask, triangle))\n                            results.push(triangle);\n                    }\n                    else {\n                        results.push(triangle);\n                    }\n                });\n            }\n            else {\n                var hex = hexagon([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines);\n                if (options.mask) {\n                    if (intersect(options.mask, hex))\n                        results.push(hex);\n                }\n                else {\n                    results.push(hex);\n                }\n            }\n        }\n    }\n    return featureCollection(results);\n}\n/**\n * Creates hexagon\n *\n * @private\n * @param {Array<number>} center of the hexagon\n * @param {number} rx half hexagon width\n * @param {number} ry half hexagon height\n * @param {Object} properties passed to each hexagon\n * @param {Array<number>} cosines precomputed\n * @param {Array<number>} sines precomputed\n * @returns {Feature<Polygon>} hexagon\n */\nfunction hexagon(center, rx, ry, properties, cosines, sines) {\n    var vertices = [];\n    for (var i = 0; i < 6; i++) {\n        var x = center[0] + rx * cosines[i];\n        var y = center[1] + ry * sines[i];\n        vertices.push([x, y]);\n    }\n    //first and last vertex must be the same\n    vertices.push(vertices[0].slice());\n    return polygon([vertices], properties);\n}\n/**\n * Creates triangles composing an hexagon\n *\n * @private\n * @param {Array<number>} center of the hexagon\n * @param {number} rx half triangle width\n * @param {number} ry half triangle height\n * @param {Object} properties passed to each triangle\n * @param {Array<number>} cosines precomputed\n * @param {Array<number>} sines precomputed\n * @returns {Array<Feature<Polygon>>} triangles\n */\nfunction hexTriangles(center, rx, ry, properties, cosines, sines) {\n    var triangles = [];\n    for (var i = 0; i < 6; i++) {\n        var vertices = [];\n        vertices.push(center);\n        vertices.push([center[0] + rx * cosines[i], center[1] + ry * sines[i]]);\n        vertices.push([\n            center[0] + rx * cosines[(i + 1) % 6],\n            center[1] + ry * sines[(i + 1) % 6],\n        ]);\n        vertices.push(center);\n        triangles.push(polygon([vertices], properties));\n    }\n    return triangles;\n}\nexport default hexGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}