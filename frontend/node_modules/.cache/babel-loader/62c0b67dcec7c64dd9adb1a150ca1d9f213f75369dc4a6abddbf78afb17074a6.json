{"ast":null,"code":"import { abs, asin, atan2, cos, epsilon, sign, sin, sqrt } from \"../math\";\nimport { conicProjection } from \"./conic\";\nimport { cylindricalEqualAreaRaw } from \"./cylindricalEqualArea\";\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0),\n    n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n  var c = 1 + sy0 * (2 * n - sy0),\n    r0 = sqrt(c) / n;\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n  project.invert = function (x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n  return project;\n}\nexport default function () {\n  return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);\n}","map":{"version":3,"names":["abs","asin","atan2","cos","epsilon","sign","sin","sqrt","conicProjection","cylindricalEqualAreaRaw","conicEqualAreaRaw","y0","y1","sy0","n","c","r0","project","x","y","r","invert","r0y","scale","center"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/d3-geo/src/projection/conicEqualArea.js"],"sourcesContent":["import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n"],"mappings":"AAAA,SAAQA,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,OAAO,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,QAAO,SAAS;AACvE,SAAQC,eAAe,QAAO,SAAS;AACvC,SAAQC,uBAAuB,QAAO,wBAAwB;AAE9D,OAAO,SAASC,iBAAiBA,CAACC,EAAE,EAAEC,EAAE,EAAE;EACxC,IAAIC,GAAG,GAAGP,GAAG,CAACK,EAAE,CAAC;IAAEG,CAAC,GAAG,CAACD,GAAG,GAAGP,GAAG,CAACM,EAAE,CAAC,IAAI,CAAC;;EAE1C;EACA,IAAIZ,GAAG,CAACc,CAAC,CAAC,GAAGV,OAAO,EAAE,OAAOK,uBAAuB,CAACE,EAAE,CAAC;EAExD,IAAII,CAAC,GAAG,CAAC,GAAGF,GAAG,IAAI,CAAC,GAAGC,CAAC,GAAGD,GAAG,CAAC;IAAEG,EAAE,GAAGT,IAAI,CAACQ,CAAC,CAAC,GAAGD,CAAC;EAEjD,SAASG,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAE;IACrB,IAAIC,CAAC,GAAGb,IAAI,CAACQ,CAAC,GAAG,CAAC,GAAGD,CAAC,GAAGR,GAAG,CAACa,CAAC,CAAC,CAAC,GAAGL,CAAC;IACpC,OAAO,CAACM,CAAC,GAAGd,GAAG,CAACY,CAAC,IAAIJ,CAAC,CAAC,EAAEE,EAAE,GAAGI,CAAC,GAAGjB,GAAG,CAACe,CAAC,CAAC,CAAC;EAC3C;EAEAD,OAAO,CAACI,MAAM,GAAG,UAASH,CAAC,EAAEC,CAAC,EAAE;IAC9B,IAAIG,GAAG,GAAGN,EAAE,GAAGG,CAAC;IAChB,OAAO,CAACjB,KAAK,CAACgB,CAAC,EAAElB,GAAG,CAACsB,GAAG,CAAC,CAAC,GAAGR,CAAC,GAAGT,IAAI,CAACiB,GAAG,CAAC,EAAErB,IAAI,CAAC,CAACc,CAAC,GAAG,CAACG,CAAC,GAAGA,CAAC,GAAGI,GAAG,GAAGA,GAAG,IAAIR,CAAC,GAAGA,CAAC,KAAK,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC;EAChG,CAAC;EAED,OAAOG,OAAO;AAChB;AAEA,eAAe,YAAW;EACxB,OAAOT,eAAe,CAACE,iBAAiB,CAAC,CACpCa,KAAK,CAAC,OAAO,CAAC,CACdC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}