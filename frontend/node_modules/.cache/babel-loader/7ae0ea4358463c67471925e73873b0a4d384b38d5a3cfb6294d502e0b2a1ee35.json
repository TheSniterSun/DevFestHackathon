{"ast":null,"code":"import adder from \"./adder\";\nimport { cartesian, cartesianCross, cartesianNormalizeInPlace } from \"./cartesian\";\nimport { asin, atan2, cos, epsilon, pi, quarterPi, sin, tau } from \"./math\";\nvar sum = adder();\nexport default function (polygon, point) {\n  var lambda = point[0],\n    phi = point[1],\n    normal = [sin(lambda), -cos(lambda), 0],\n    angle = 0,\n    winding = 0;\n  sum.reset();\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n      m,\n      point0 = ring[m - 1],\n      lambda0 = point0[0],\n      phi0 = point0[1] / 2 + quarterPi,\n      sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n        lambda1 = point1[0],\n        phi1 = point1[1] / 2 + quarterPi,\n        sinPhi1 = sin(phi1),\n        cosPhi1 = cos(phi1),\n        delta = lambda1 - lambda0,\n        sign = delta >= 0 ? 1 : -1,\n        absDelta = sign * delta,\n        antimeridian = absDelta > pi,\n        k = sinPhi0 * sinPhi1;\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ winding & 1;\n}","map":{"version":3,"names":["adder","cartesian","cartesianCross","cartesianNormalizeInPlace","asin","atan2","cos","epsilon","pi","quarterPi","sin","tau","sum","polygon","point","lambda","phi","normal","angle","winding","reset","i","n","length","m","ring","point0","lambda0","phi0","sinPhi0","cosPhi0","j","lambda1","sinPhi1","cosPhi1","point1","phi1","delta","sign","absDelta","antimeridian","k","add","arc","intersection","phiArc"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/d3-geo/src/polygonContains.js"],"sourcesContent":["import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}