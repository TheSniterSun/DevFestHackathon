{"ast":null,"code":"var _jsxFileName = \"/Users/brandonpae/Desktop/DevFestHackathon/frontend/src/components/chat/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from '../NavBar';\nimport styles from './chat.module.css';\nimport axios from 'axios'; // Import Axios\n\nimport LoadingText from './AssistantResponse';\nimport AssistantResponse from './AssistantResponse';\nimport Message from './Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL = 'auth'; // change as needed\n\nfunction ChatPage(props) {\n  _s();\n  const logoPath = '/images/secra_logo.png';\n  const [messages, setMessages] = useState(Array(0)); // empty array to start\n  const navigate = useNavigate();\n  const username = props.username;\n\n  // FOR THE QUERY FORM\n  const [query, setQuery] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const submittedQuery = false;\n  let gpt_response = \"\";\n\n  // use an array of dictionaries\n  // for each dict:\n  // prop 1: message itself\n  // prop 2: loc (left vs. right for assistant vs. user)\n\n  function submitQuery(event) {\n    console.log(\"Hello testing how many times this is called\");\n    event.preventDefault(); // prevent default form submission behavior (because we want to connect to BE endpoint)\n\n    // setResponse(\"generating\"); // \"Generating response ... \"\n\n    onUserTextSubmit(new_message);\n    axios({\n      method: \"POST\",\n      url: \"/gpt/submit\",\n      // endpoint in backend to login user and return access token\n      // remember, users module is just base url (e.g. localhost:5000/login but other modules are not\n      // e.g. localhost:5000/gpt/test)\n      // for some reason, proxy not working\n      baseURL: 'http://127.0.0.1:5000',\n      // for some reason, throws error with localhost\n      headers: {\n        Authorization: 'Bearer ' + props.token,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        username: username,\n        query: query\n      }\n    }).then(response => {\n      const data = response.data; // need to access the actual JSON data returned\n\n      // console.log(response);\n      console.log(data[\"success\"]);\n\n      // data is the JSON object returned by endpoint \"chat/submit\"\n      gpt_response = data.response;\n      console.log(gpt_response);\n      gpt_response = data.response;\n      onTextSubmit(gpt_response); // Add the GPT response to the messages\n\n      // pass the JSON info to the Assistant response\n      setResponse(gpt_response); // should be a JSON\n\n      /*\n       Once GPT returns the list of times, we want to render them as separate options / components\n      All events should be similar/the same, except start, end, date\n      Create a new component with these fields, then just show them side by side\n      We need a way to figure out how to respond back with which option was clicked\n      Specifically, \n      */\n\n      // response is a JSON string, convert to JSON object\n      // gpt_response = JSON.parse(gpt_response)\n    }).catch(error => {\n      if (error.response) {\n        console.log(error.response);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n    });\n  }\n\n  /** TREAT AS STRING NOT OBJECT WITH PROPS\n  function handleQueryChange(event) {\n      const { name, value } = event.target;\n      setQuery(prevState => ({\n          ...prevState,\n          [name]: value\n      }));\n  }\n  */\n\n  function handleQueryChange(event) {\n    setQuery(event.target.value);\n  }\n  function onUserTextSubmit(new_message) {\n    // add text for the message, and indication of the sender\n    setMessages(messages => [...messages, {\n      text: new_message,\n      sender: 'user'\n    } // Assuming 'user' as the sender\n    ]);\n  }\n  function onGptTextSubmit(new_message) {\n    // add text for the message, and indication of the sender\n    setMessages(messages => [...messages, {\n      text: new_message,\n      sender: 'gpt'\n    } // Assuming 'user' as the sender\n    ]);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messageContainer,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: message.text,\n        sender: message.sender\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: styles.header,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'blue'\n          },\n          id: \"username\",\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 32\n        }, this), \"'s Assistant\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        id: styles.header,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'blue'\n          },\n          id: \"username\",\n          children: username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 36\n        }, this), \"'s Assistant\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"queryForm\",\n        onSubmit: submitQuery,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: query,\n          onChange: handleQueryChange,\n          name: \"query\",\n          id: \"query\",\n          placeholder: \"Schedule a meeting...\",\n          className: styles.box,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"submitButton\",\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AssistantResponse, {\n        response: response,\n        username: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(ChatPage, \"CNps93lv6wed+4at0YU+HozeweU=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useNavigate","NavBar","styles","axios","LoadingText","AssistantResponse","Message","jsxDEV","_jsxDEV","Fragment","_Fragment","URL","ChatPage","props","_s","logoPath","messages","setMessages","Array","navigate","username","query","setQuery","response","setResponse","submittedQuery","gpt_response","submitQuery","event","console","log","preventDefault","onUserTextSubmit","new_message","method","url","baseURL","headers","Authorization","token","data","then","onTextSubmit","catch","error","status","handleQueryChange","target","value","text","sender","onGptTextSubmit","children","className","container","fileName","_jsxFileName","lineNumber","columnNumber","messageContainer","map","message","index","id","header","style","color","onSubmit","type","onChange","name","placeholder","box","required","_c","$RefreshReg$"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/src/components/chat/ChatPage.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useContext } from 'react';\n\nimport { useNavigate } from 'react-router-dom';\nimport NavBar from '../NavBar';\n\nimport styles from './chat.module.css';\nimport axios from 'axios'; // Import Axios\n\nimport LoadingText from './AssistantResponse';\nimport AssistantResponse from './AssistantResponse';\n\nimport Message from './Message';\n\nconst URL = 'auth'; // change as needed\n\nfunction ChatPage(props) {\n\n    const logoPath = '/images/secra_logo.png';\n    const [messages, setMessages] = useState(Array(0)); // empty array to start\n    const navigate = useNavigate();\n    const username = props.username;\n    \n    // FOR THE QUERY FORM\n    const [query, setQuery] = useState(\"\");\n    const [response, setResponse] = useState(\"\");\n\n    const submittedQuery = false;\n    let gpt_response = \"\";\n\n    // use an array of dictionaries\n    // for each dict:\n    // prop 1: message itself\n    // prop 2: loc (left vs. right for assistant vs. user)\n\n    function submitQuery(event) {\n        console.log(\"Hello testing how many times this is called\")\n\n        event.preventDefault() // prevent default form submission behavior (because we want to connect to BE endpoint)\n        \n        // setResponse(\"generating\"); // \"Generating response ... \"\n\n        onUserTextSubmit(new_message)\n\n        axios({\n          method: \"POST\",\n          url:\"/gpt/submit\", // endpoint in backend to login user and return access token\n          // remember, users module is just base url (e.g. localhost:5000/login but other modules are not\n          // e.g. localhost:5000/gpt/test)\n          // for some reason, proxy not working\n          baseURL: 'http://127.0.0.1:5000', // for some reason, throws error with localhost\n          headers: {\n            Authorization: 'Bearer ' + props.token,\n            'Content-Type': 'application/json'\n          },\n          \n          data: {\n            username: username,\n            query: query,\n          }\n\n        })\n        .then((response) => {\n\n            const data = response.data; // need to access the actual JSON data returned\n\n            // console.log(response);\n            console.log(data[\"success\"])\n\n            // data is the JSON object returned by endpoint \"chat/submit\"\n            gpt_response = data.response;\n\n            console.log(gpt_response)\n\n            gpt_response = data.response;\n            onTextSubmit(gpt_response); // Add the GPT response to the messages\n\n            // pass the JSON info to the Assistant response\n            setResponse(gpt_response); // should be a JSON\n            \n            /*\n\n            Once GPT returns the list of times, we want to render them as separate options / components\n            All events should be similar/the same, except start, end, date\n            Create a new component with these fields, then just show them side by side\n            We need a way to figure out how to respond back with which option was clicked\n            Specifically, \n            */\n\n            // response is a JSON string, convert to JSON object\n            // gpt_response = JSON.parse(gpt_response)\n\n        }).catch((error) => {\n          if (error.response) {\n            console.log(error.response)\n            console.log(error.response.status)\n            console.log(error.response.headers)\n            }\n        })\n    }\n\n    /** TREAT AS STRING NOT OBJECT WITH PROPS\n    function handleQueryChange(event) {\n        const { name, value } = event.target;\n        setQuery(prevState => ({\n            ...prevState,\n            [name]: value\n        }));\n    }\n    */\n\n    function handleQueryChange(event) {\n        setQuery(event.target.value);\n    }\n\n    function onUserTextSubmit(new_message) { // add text for the message, and indication of the sender\n        setMessages(messages => [\n            ...messages,\n            { text: new_message, sender: 'user' } // Assuming 'user' as the sender\n        ]);\n    }\n\n    function onGptTextSubmit(new_message) { // add text for the message, and indication of the sender\n        setMessages(messages => [\n            ...messages,\n            { text: new_message, sender: 'gpt' } // Assuming 'user' as the sender\n        ]);\n    }\n\n    return (\n        <>  \n\n        <div className={styles.container}>\n            </div>\n            \n            {/* Messages container */}\n            <div className={styles.messageContainer}>\n                {messages.map((message, index) => (\n                    <Message key={index} text={message.text} sender={message.sender} />\n                ))}\n        </div>\n\n        <div className={styles.container}>\n\n        <h1 id={styles.header}><span style={{color: 'blue'}} id=\"username\">{username}</span>'s Assistant</h1>\n            \n            <h1 id={styles.header}><span style={{color: 'blue'}} id=\"username\">{username}</span>'s Assistant</h1>\n            \n            <br />\n            \n            <h3>Your Message</h3>\n\n            <br />\n\n            <form id=\"queryForm\" onSubmit={submitQuery}>\n                <input type=\"text\" value={query} onChange={handleQueryChange} name=\"query\" id=\"query\" placeholder=\"Schedule a meeting...\" className={styles.box} required></input>\n                <input id=\"submitButton\" type=\"submit\" value=\"Submit\" />\n            </form>\n        \n            {/* GPT RESPONSE HERE */}\n\n            {/* Once GPT returns a response, we use components (for Event) to represent the times */}\n            <br />\n            <br />\n            <AssistantResponse response={response} username={username} />\n\n        </div>\n        \n        {/*-- From tester1.secra calendar \n        <div align=\"center\">\n\n        <div style={{ position: 'relative', width: '800px', height: '600px' }}>\n\n        <iframe \n            src=\"https://calendar.google.com/calendar/embed?src=tester1.secra%40gmail.com&ctz=America%2FNew_York\" \n            title=\"User's Google Calendar\" \n            style={{ border: 0, width: '100%', height: '100%' }} >\n        </iframe>\n\n        <div style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            // backgroundColor: 'rgba(173, 216, 230, 0.5)', // Light blue color with opacity\n            pointerEvents: 'none' // To allow interaction with the iframe\n        }}></div>\n\n        </div>\n\n\n        </div> */}\n        </>\n    );\n}\n\nexport default ChatPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}