{"ast":null,"code":"import bearing from \"@turf/bearing\";\nimport destination from \"@turf/destination\";\nimport measureDistance from \"@turf/distance\";\nimport { point } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.\n *\n * @name along\n * @param {Feature<LineString>} line input line\n * @param {number} distance distance along the line\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} Point `distance` `units` along the line\n * @example\n * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\n * var options = {units: 'miles'};\n *\n * var along = turf.along(line, 200, options);\n *\n * //addToMap\n * var addToMap = [along, line]\n */\nexport default function along(line, distance, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // Get Coords\n  var geom = getGeom(line);\n  var coords = geom.coordinates;\n  var travelled = 0;\n  for (var i = 0; i < coords.length; i++) {\n    if (distance >= travelled && i === coords.length - 1) {\n      break;\n    } else if (travelled >= distance) {\n      var overshot = distance - travelled;\n      if (!overshot) {\n        return point(coords[i]);\n      } else {\n        var direction = bearing(coords[i], coords[i - 1]) - 180;\n        var interpolated = destination(coords[i], overshot, direction, options);\n        return interpolated;\n      }\n    } else {\n      travelled += measureDistance(coords[i], coords[i + 1], options);\n    }\n  }\n  return point(coords[coords.length - 1]);\n}","map":{"version":3,"names":["bearing","destination","measureDistance","point","getGeom","along","line","distance","options","geom","coords","coordinates","travelled","i","length","overshot","direction","interpolated"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/along/dist/es/index.js"],"sourcesContent":["import bearing from \"@turf/bearing\";\nimport destination from \"@turf/destination\";\nimport measureDistance from \"@turf/distance\";\nimport { point } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.\n *\n * @name along\n * @param {Feature<LineString>} line input line\n * @param {number} distance distance along the line\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} Point `distance` `units` along the line\n * @example\n * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\n * var options = {units: 'miles'};\n *\n * var along = turf.along(line, 200, options);\n *\n * //addToMap\n * var addToMap = [along, line]\n */\nexport default function along(line, distance, options) {\n    if (options === void 0) { options = {}; }\n    // Get Coords\n    var geom = getGeom(line);\n    var coords = geom.coordinates;\n    var travelled = 0;\n    for (var i = 0; i < coords.length; i++) {\n        if (distance >= travelled && i === coords.length - 1) {\n            break;\n        }\n        else if (travelled >= distance) {\n            var overshot = distance - travelled;\n            if (!overshot) {\n                return point(coords[i]);\n            }\n            else {\n                var direction = bearing(coords[i], coords[i - 1]) - 180;\n                var interpolated = destination(coords[i], overshot, direction, options);\n                return interpolated;\n            }\n        }\n        else {\n            travelled += measureDistance(coords[i], coords[i + 1], options);\n        }\n    }\n    return point(coords[coords.length - 1]);\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,eAAe;AACnC,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,eAAe,MAAM,gBAAgB;AAC5C,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,OAAO,QAAQ,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,KAAKA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACnD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC;EACA,IAAIC,IAAI,GAAGL,OAAO,CAACE,IAAI,CAAC;EACxB,IAAII,MAAM,GAAGD,IAAI,CAACE,WAAW;EAC7B,IAAIC,SAAS,GAAG,CAAC;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,IAAIN,QAAQ,IAAIK,SAAS,IAAIC,CAAC,KAAKH,MAAM,CAACI,MAAM,GAAG,CAAC,EAAE;MAClD;IACJ,CAAC,MACI,IAAIF,SAAS,IAAIL,QAAQ,EAAE;MAC5B,IAAIQ,QAAQ,GAAGR,QAAQ,GAAGK,SAAS;MACnC,IAAI,CAACG,QAAQ,EAAE;QACX,OAAOZ,KAAK,CAACO,MAAM,CAACG,CAAC,CAAC,CAAC;MAC3B,CAAC,MACI;QACD,IAAIG,SAAS,GAAGhB,OAAO,CAACU,MAAM,CAACG,CAAC,CAAC,EAAEH,MAAM,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG;QACvD,IAAII,YAAY,GAAGhB,WAAW,CAACS,MAAM,CAACG,CAAC,CAAC,EAAEE,QAAQ,EAAEC,SAAS,EAAER,OAAO,CAAC;QACvE,OAAOS,YAAY;MACvB;IACJ,CAAC,MACI;MACDL,SAAS,IAAIV,eAAe,CAACQ,MAAM,CAACG,CAAC,CAAC,EAAEH,MAAM,CAACG,CAAC,GAAG,CAAC,CAAC,EAAEL,OAAO,CAAC;IACnE;EACJ;EACA,OAAOL,KAAK,CAACO,MAAM,CAACA,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC;AAC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}