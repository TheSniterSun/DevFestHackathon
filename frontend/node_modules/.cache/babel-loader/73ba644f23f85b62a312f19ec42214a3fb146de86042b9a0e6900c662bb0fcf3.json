{"ast":null,"code":"import clone from \"@turf/clone\";\nimport { isObject } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport lineDissolve from \"./turf-line-dissolve.js\";\nimport polygonDissolve from \"./turf-polygon-dissolve.js\";\n/**\n * Transform function: attempts to dissolve geojson objects where possible\n * [GeoJSON] -> GeoJSON geometry\n *\n * @private\n * @param {FeatureCollection<LineString|MultiLineString|Polygon|MultiPolygon>} geojson Features to dissolved\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<MultiLineString|MultiPolygon>} Dissolved Features\n */\nfunction dissolve(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) {\n    throw new Error(\"options is invalid\");\n  }\n  var mutate = options.mutate;\n  // Validation\n  if (getType(geojson) !== \"FeatureCollection\") {\n    throw new Error(\"geojson must be a FeatureCollection\");\n  }\n  if (!geojson.features.length) {\n    throw new Error(\"geojson is empty\");\n  }\n  // Clone geojson to avoid side effects\n  // Topojson modifies in place, so we need to deep clone first\n  if (mutate === false || mutate === undefined) {\n    geojson = clone(geojson);\n  }\n  // Assert homogenity\n  var type = getHomogenousType(geojson);\n  if (!type) {\n    throw new Error(\"geojson must be homogenous\");\n  }\n  // Data => Typescript hack\n  var data = geojson;\n  switch (type) {\n    case \"LineString\":\n      return lineDissolve(data, options);\n    case \"Polygon\":\n      return polygonDissolve(data, options);\n    default:\n      throw new Error(type + \" is not supported\");\n  }\n}\n/**\n * Checks if GeoJSON is Homogenous\n *\n * @private\n * @param {GeoJSON} geojson GeoJSON\n * @returns {string|null} Homogenous type or null if multiple types\n */\nfunction getHomogenousType(geojson) {\n  var types = {};\n  flattenEach(geojson, function (feature) {\n    types[feature.geometry.type] = true;\n  });\n  var keys = Object.keys(types);\n  if (keys.length === 1) {\n    return keys[0];\n  }\n  return null;\n}\nexport default dissolve;","map":{"version":3,"names":["clone","isObject","getType","flattenEach","lineDissolve","polygonDissolve","dissolve","geojson","options","Error","mutate","features","length","undefined","type","getHomogenousType","data","types","feature","geometry","keys","Object"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/concave/dist/es/lib/turf-dissolve.js"],"sourcesContent":["import clone from \"@turf/clone\";\nimport { isObject } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport lineDissolve from \"./turf-line-dissolve.js\";\nimport polygonDissolve from \"./turf-polygon-dissolve.js\";\n/**\n * Transform function: attempts to dissolve geojson objects where possible\n * [GeoJSON] -> GeoJSON geometry\n *\n * @private\n * @param {FeatureCollection<LineString|MultiLineString|Polygon|MultiPolygon>} geojson Features to dissolved\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<MultiLineString|MultiPolygon>} Dissolved Features\n */\nfunction dissolve(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    options = options || {};\n    if (!isObject(options)) {\n        throw new Error(\"options is invalid\");\n    }\n    var mutate = options.mutate;\n    // Validation\n    if (getType(geojson) !== \"FeatureCollection\") {\n        throw new Error(\"geojson must be a FeatureCollection\");\n    }\n    if (!geojson.features.length) {\n        throw new Error(\"geojson is empty\");\n    }\n    // Clone geojson to avoid side effects\n    // Topojson modifies in place, so we need to deep clone first\n    if (mutate === false || mutate === undefined) {\n        geojson = clone(geojson);\n    }\n    // Assert homogenity\n    var type = getHomogenousType(geojson);\n    if (!type) {\n        throw new Error(\"geojson must be homogenous\");\n    }\n    // Data => Typescript hack\n    var data = geojson;\n    switch (type) {\n        case \"LineString\":\n            return lineDissolve(data, options);\n        case \"Polygon\":\n            return polygonDissolve(data, options);\n        default:\n            throw new Error(type + \" is not supported\");\n    }\n}\n/**\n * Checks if GeoJSON is Homogenous\n *\n * @private\n * @param {GeoJSON} geojson GeoJSON\n * @returns {string|null} Homogenous type or null if multiple types\n */\nfunction getHomogenousType(geojson) {\n    var types = {};\n    flattenEach(geojson, function (feature) {\n        types[feature.geometry.type] = true;\n    });\n    var keys = Object.keys(types);\n    if (keys.length === 1) {\n        return keys[0];\n    }\n    return null;\n}\nexport default dissolve;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,aAAa;AAC/B,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,WAAW,QAAQ,YAAY;AACxC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,eAAe,MAAM,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,OAAO,EAAEC,OAAO,EAAE;EAChC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC;EACAA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAI,CAACP,QAAQ,CAACO,OAAO,CAAC,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;EACzC;EACA,IAAIC,MAAM,GAAGF,OAAO,CAACE,MAAM;EAC3B;EACA,IAAIR,OAAO,CAACK,OAAO,CAAC,KAAK,mBAAmB,EAAE;IAC1C,MAAM,IAAIE,KAAK,CAAC,qCAAqC,CAAC;EAC1D;EACA,IAAI,CAACF,OAAO,CAACI,QAAQ,CAACC,MAAM,EAAE;IAC1B,MAAM,IAAIH,KAAK,CAAC,kBAAkB,CAAC;EACvC;EACA;EACA;EACA,IAAIC,MAAM,KAAK,KAAK,IAAIA,MAAM,KAAKG,SAAS,EAAE;IAC1CN,OAAO,GAAGP,KAAK,CAACO,OAAO,CAAC;EAC5B;EACA;EACA,IAAIO,IAAI,GAAGC,iBAAiB,CAACR,OAAO,CAAC;EACrC,IAAI,CAACO,IAAI,EAAE;IACP,MAAM,IAAIL,KAAK,CAAC,4BAA4B,CAAC;EACjD;EACA;EACA,IAAIO,IAAI,GAAGT,OAAO;EAClB,QAAQO,IAAI;IACR,KAAK,YAAY;MACb,OAAOV,YAAY,CAACY,IAAI,EAAER,OAAO,CAAC;IACtC,KAAK,SAAS;MACV,OAAOH,eAAe,CAACW,IAAI,EAAER,OAAO,CAAC;IACzC;MACI,MAAM,IAAIC,KAAK,CAACK,IAAI,GAAG,mBAAmB,CAAC;EACnD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACR,OAAO,EAAE;EAChC,IAAIU,KAAK,GAAG,CAAC,CAAC;EACdd,WAAW,CAACI,OAAO,EAAE,UAAUW,OAAO,EAAE;IACpCD,KAAK,CAACC,OAAO,CAACC,QAAQ,CAACL,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC,CAAC;EACF,IAAIM,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACH,KAAK,CAAC;EAC7B,IAAIG,IAAI,CAACR,MAAM,KAAK,CAAC,EAAE;IACnB,OAAOQ,IAAI,CAAC,CAAC,CAAC;EAClB;EACA,OAAO,IAAI;AACf;AACA,eAAed,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}