{"ast":null,"code":"import { lineString } from \"@turf/helpers\";\nimport { orientationIndex } from \"./util.js\";\n/**\n * This class is inspired by GEOS's geos::operation::polygonize::PolygonizeDirectedEdge\n */\nvar Edge = /** @class */function () {\n  /**\n   * @param {Node} from - start node of the Edge\n   * @param {Node} to - end node of the edge\n   */\n  function Edge(from, to) {\n    this.from = from; //< start\n    this.to = to; //< End\n    this.next = undefined; //< The edge to be computed after\n    this.label = undefined; //< Used in order to detect Cut Edges (Bridges)\n    this.symetric = undefined; //< The symetric edge of this\n    this.ring = undefined; //< EdgeRing in which the Edge is\n    this.from.addOuterEdge(this);\n    this.to.addInnerEdge(this);\n  }\n  /**\n   * Creates or get the symetric Edge.\n   *\n   * @returns {Edge} - Symetric Edge.\n   */\n  Edge.prototype.getSymetric = function () {\n    if (!this.symetric) {\n      this.symetric = new Edge(this.to, this.from);\n      this.symetric.symetric = this;\n    }\n    return this.symetric;\n  };\n  /**\n   * Removes edge from from and to nodes.\n   */\n  Edge.prototype.deleteEdge = function () {\n    this.from.removeOuterEdge(this);\n    this.to.removeInnerEdge(this);\n  };\n  /**\n   * Compares Edge equallity.\n   *\n   * An edge is equal to another, if the from and to nodes are the same.\n   *\n   * @param {Edge} edge - Another Edge\n   * @returns {boolean} - True if Edges are equal, False otherwise\n   */\n  Edge.prototype.isEqual = function (edge) {\n    return this.from.id === edge.from.id && this.to.id === edge.to.id;\n  };\n  Edge.prototype.toString = function () {\n    return \"Edge { \" + this.from.id + \" -> \" + this.to.id + \" }\";\n  };\n  /**\n   * Returns a LineString representation of the Edge\n   *\n   * @returns {Feature<LineString>} - LineString representation of the Edge\n   */\n  Edge.prototype.toLineString = function () {\n    return lineString([this.from.coordinates, this.to.coordinates]);\n  };\n  /**\n   * Comparator of two edges.\n   *\n   * Implementation of geos::planargraph::DirectedEdge::compareTo.\n   *\n   * @param {Edge} edge - Another edge to compare with this one\n   * @returns {number} -1 if this Edge has a greater angle with the positive x-axis than b,\n   *          0 if the Edges are colinear,\n   *          1 otherwise\n   */\n  Edge.prototype.compareTo = function (edge) {\n    return orientationIndex(edge.from.coordinates, edge.to.coordinates, this.to.coordinates);\n  };\n  return Edge;\n}();\nexport default Edge;","map":{"version":3,"names":["lineString","orientationIndex","Edge","from","to","next","undefined","label","symetric","ring","addOuterEdge","addInnerEdge","prototype","getSymetric","deleteEdge","removeOuterEdge","removeInnerEdge","isEqual","edge","id","toString","toLineString","coordinates","compareTo"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/polygonize/dist/es/lib/Edge.js"],"sourcesContent":["import { lineString } from \"@turf/helpers\";\nimport { orientationIndex } from \"./util.js\";\n/**\n * This class is inspired by GEOS's geos::operation::polygonize::PolygonizeDirectedEdge\n */\nvar Edge = /** @class */ (function () {\n    /**\n     * @param {Node} from - start node of the Edge\n     * @param {Node} to - end node of the edge\n     */\n    function Edge(from, to) {\n        this.from = from; //< start\n        this.to = to; //< End\n        this.next = undefined; //< The edge to be computed after\n        this.label = undefined; //< Used in order to detect Cut Edges (Bridges)\n        this.symetric = undefined; //< The symetric edge of this\n        this.ring = undefined; //< EdgeRing in which the Edge is\n        this.from.addOuterEdge(this);\n        this.to.addInnerEdge(this);\n    }\n    /**\n     * Creates or get the symetric Edge.\n     *\n     * @returns {Edge} - Symetric Edge.\n     */\n    Edge.prototype.getSymetric = function () {\n        if (!this.symetric) {\n            this.symetric = new Edge(this.to, this.from);\n            this.symetric.symetric = this;\n        }\n        return this.symetric;\n    };\n    /**\n     * Removes edge from from and to nodes.\n     */\n    Edge.prototype.deleteEdge = function () {\n        this.from.removeOuterEdge(this);\n        this.to.removeInnerEdge(this);\n    };\n    /**\n     * Compares Edge equallity.\n     *\n     * An edge is equal to another, if the from and to nodes are the same.\n     *\n     * @param {Edge} edge - Another Edge\n     * @returns {boolean} - True if Edges are equal, False otherwise\n     */\n    Edge.prototype.isEqual = function (edge) {\n        return this.from.id === edge.from.id && this.to.id === edge.to.id;\n    };\n    Edge.prototype.toString = function () {\n        return \"Edge { \" + this.from.id + \" -> \" + this.to.id + \" }\";\n    };\n    /**\n     * Returns a LineString representation of the Edge\n     *\n     * @returns {Feature<LineString>} - LineString representation of the Edge\n     */\n    Edge.prototype.toLineString = function () {\n        return lineString([this.from.coordinates, this.to.coordinates]);\n    };\n    /**\n     * Comparator of two edges.\n     *\n     * Implementation of geos::planargraph::DirectedEdge::compareTo.\n     *\n     * @param {Edge} edge - Another edge to compare with this one\n     * @returns {number} -1 if this Edge has a greater angle with the positive x-axis than b,\n     *          0 if the Edges are colinear,\n     *          1 otherwise\n     */\n    Edge.prototype.compareTo = function (edge) {\n        return orientationIndex(edge.from.coordinates, edge.to.coordinates, this.to.coordinates);\n    };\n    return Edge;\n}());\nexport default Edge;\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,QAAQ,WAAW;AAC5C;AACA;AACA;AACA,IAAIC,IAAI,GAAG,aAAe,YAAY;EAClC;AACJ;AACA;AACA;EACI,SAASA,IAAIA,CAACC,IAAI,EAAEC,EAAE,EAAE;IACpB,IAAI,CAACD,IAAI,GAAGA,IAAI,CAAC,CAAC;IAClB,IAAI,CAACC,EAAE,GAAGA,EAAE,CAAC,CAAC;IACd,IAAI,CAACC,IAAI,GAAGC,SAAS,CAAC,CAAC;IACvB,IAAI,CAACC,KAAK,GAAGD,SAAS,CAAC,CAAC;IACxB,IAAI,CAACE,QAAQ,GAAGF,SAAS,CAAC,CAAC;IAC3B,IAAI,CAACG,IAAI,GAAGH,SAAS,CAAC,CAAC;IACvB,IAAI,CAACH,IAAI,CAACO,YAAY,CAAC,IAAI,CAAC;IAC5B,IAAI,CAACN,EAAE,CAACO,YAAY,CAAC,IAAI,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;EACIT,IAAI,CAACU,SAAS,CAACC,WAAW,GAAG,YAAY;IACrC,IAAI,CAAC,IAAI,CAACL,QAAQ,EAAE;MAChB,IAAI,CAACA,QAAQ,GAAG,IAAIN,IAAI,CAAC,IAAI,CAACE,EAAE,EAAE,IAAI,CAACD,IAAI,CAAC;MAC5C,IAAI,CAACK,QAAQ,CAACA,QAAQ,GAAG,IAAI;IACjC;IACA,OAAO,IAAI,CAACA,QAAQ;EACxB,CAAC;EACD;AACJ;AACA;EACIN,IAAI,CAACU,SAAS,CAACE,UAAU,GAAG,YAAY;IACpC,IAAI,CAACX,IAAI,CAACY,eAAe,CAAC,IAAI,CAAC;IAC/B,IAAI,CAACX,EAAE,CAACY,eAAe,CAAC,IAAI,CAAC;EACjC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACId,IAAI,CAACU,SAAS,CAACK,OAAO,GAAG,UAAUC,IAAI,EAAE;IACrC,OAAO,IAAI,CAACf,IAAI,CAACgB,EAAE,KAAKD,IAAI,CAACf,IAAI,CAACgB,EAAE,IAAI,IAAI,CAACf,EAAE,CAACe,EAAE,KAAKD,IAAI,CAACd,EAAE,CAACe,EAAE;EACrE,CAAC;EACDjB,IAAI,CAACU,SAAS,CAACQ,QAAQ,GAAG,YAAY;IAClC,OAAO,SAAS,GAAG,IAAI,CAACjB,IAAI,CAACgB,EAAE,GAAG,MAAM,GAAG,IAAI,CAACf,EAAE,CAACe,EAAE,GAAG,IAAI;EAChE,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjB,IAAI,CAACU,SAAS,CAACS,YAAY,GAAG,YAAY;IACtC,OAAOrB,UAAU,CAAC,CAAC,IAAI,CAACG,IAAI,CAACmB,WAAW,EAAE,IAAI,CAAClB,EAAE,CAACkB,WAAW,CAAC,CAAC;EACnE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIpB,IAAI,CAACU,SAAS,CAACW,SAAS,GAAG,UAAUL,IAAI,EAAE;IACvC,OAAOjB,gBAAgB,CAACiB,IAAI,CAACf,IAAI,CAACmB,WAAW,EAAEJ,IAAI,CAACd,EAAE,CAACkB,WAAW,EAAE,IAAI,CAAClB,EAAE,CAACkB,WAAW,CAAC;EAC5F,CAAC;EACD,OAAOpB,IAAI;AACf,CAAC,CAAC,CAAE;AACJ,eAAeA,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}