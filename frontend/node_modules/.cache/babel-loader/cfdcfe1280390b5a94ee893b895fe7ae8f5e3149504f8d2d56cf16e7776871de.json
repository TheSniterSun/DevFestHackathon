{"ast":null,"code":"import distance from \"@turf/distance\";\nimport intersect from \"@turf/intersect\";\nimport { polygon, featureCollection } from \"@turf/helpers\";\n/**\n * Takes a bounding box and a cell depth and returns a set of triangular {@link Polygon|polygons} in a grid.\n *\n * @name triangleGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSide dimension of each cell\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees, radians, miles, or kilometers\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {Object} [options.properties={}] passed to each point of the grid\n * @returns {FeatureCollection<Polygon>} grid of polygons\n * @example\n * var bbox = [-95, 30 ,-85, 40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var triangleGrid = turf.triangleGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [triangleGrid];\n */\nfunction triangleGrid(bbox, cellSide, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // Containers\n  var results = [];\n  // Input Validation is being handled by Typescript\n  // if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');\n  // if (!isNumber(cellSide)) throw new Error('cellSide is invalid');\n  // if (!bbox) throw new Error('bbox is required');\n  // if (!Array.isArray(bbox)) throw new Error('bbox must be array');\n  // if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');\n  // if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');\n  // Main\n  var xFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], options);\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], options);\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n  var xi = 0;\n  var currentX = bbox[0];\n  while (currentX <= bbox[2]) {\n    var yi = 0;\n    var currentY = bbox[1];\n    while (currentY <= bbox[3]) {\n      var cellTriangle1 = null;\n      var cellTriangle2 = null;\n      if (xi % 2 === 0 && yi % 2 === 0) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]], options.properties);\n      } else if (xi % 2 === 0 && yi % 2 === 1) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]], options.properties);\n      } else if (yi % 2 === 0 && xi % 2 === 1) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n      } else if (yi % 2 === 1 && xi % 2 === 1) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]], options.properties);\n      }\n      if (options.mask) {\n        if (intersect(options.mask, cellTriangle1)) results.push(cellTriangle1);\n        if (intersect(options.mask, cellTriangle2)) results.push(cellTriangle2);\n      } else {\n        results.push(cellTriangle1);\n        results.push(cellTriangle2);\n      }\n      currentY += cellHeight;\n      yi++;\n    }\n    xi++;\n    currentX += cellWidth;\n  }\n  return featureCollection(results);\n}\nexport default triangleGrid;","map":{"version":3,"names":["distance","intersect","polygon","featureCollection","triangleGrid","bbox","cellSide","options","results","xFraction","cellWidth","yFraction","cellHeight","xi","currentX","yi","currentY","cellTriangle1","cellTriangle2","properties","mask","push"],"sources":["/Users/brandonpae/Desktop/DevFestHackathon/frontend/node_modules/@turf/triangle-grid/dist/es/index.js"],"sourcesContent":["import distance from \"@turf/distance\";\nimport intersect from \"@turf/intersect\";\nimport { polygon, featureCollection, } from \"@turf/helpers\";\n/**\n * Takes a bounding box and a cell depth and returns a set of triangular {@link Polygon|polygons} in a grid.\n *\n * @name triangleGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSide dimension of each cell\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees, radians, miles, or kilometers\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {Object} [options.properties={}] passed to each point of the grid\n * @returns {FeatureCollection<Polygon>} grid of polygons\n * @example\n * var bbox = [-95, 30 ,-85, 40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var triangleGrid = turf.triangleGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [triangleGrid];\n */\nfunction triangleGrid(bbox, cellSide, options) {\n    if (options === void 0) { options = {}; }\n    // Containers\n    var results = [];\n    // Input Validation is being handled by Typescript\n    // if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');\n    // if (!isNumber(cellSide)) throw new Error('cellSide is invalid');\n    // if (!bbox) throw new Error('bbox is required');\n    // if (!Array.isArray(bbox)) throw new Error('bbox must be array');\n    // if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');\n    // if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');\n    // Main\n    var xFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], options);\n    var cellWidth = xFraction * (bbox[2] - bbox[0]);\n    var yFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], options);\n    var cellHeight = yFraction * (bbox[3] - bbox[1]);\n    var xi = 0;\n    var currentX = bbox[0];\n    while (currentX <= bbox[2]) {\n        var yi = 0;\n        var currentY = bbox[1];\n        while (currentY <= bbox[3]) {\n            var cellTriangle1 = null;\n            var cellTriangle2 = null;\n            if (xi % 2 === 0 && yi % 2 === 0) {\n                cellTriangle1 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n                cellTriangle2 = polygon([\n                    [\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY + cellHeight],\n                    ],\n                ], options.properties);\n            }\n            else if (xi % 2 === 0 && yi % 2 === 1) {\n                cellTriangle1 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n                cellTriangle2 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n            }\n            else if (yi % 2 === 0 && xi % 2 === 1) {\n                cellTriangle1 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n                cellTriangle2 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n            }\n            else if (yi % 2 === 1 && xi % 2 === 1) {\n                cellTriangle1 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n                cellTriangle2 = polygon([\n                    [\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY + cellHeight],\n                    ],\n                ], options.properties);\n            }\n            if (options.mask) {\n                if (intersect(options.mask, cellTriangle1))\n                    results.push(cellTriangle1);\n                if (intersect(options.mask, cellTriangle2))\n                    results.push(cellTriangle2);\n            }\n            else {\n                results.push(cellTriangle1);\n                results.push(cellTriangle2);\n            }\n            currentY += cellHeight;\n            yi++;\n        }\n        xi++;\n        currentX += cellWidth;\n    }\n    return featureCollection(results);\n}\nexport default triangleGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}